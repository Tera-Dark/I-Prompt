{"ast":null,"code":"import exifr from 'exifr';\n\n/**\r\n * 图像元数据提取器\r\n * 支持主流AI绘画工具的元数据格式\r\n */\nexport class ImageMetadataExtractor {\n  /**\r\n   * 提取图像元数据\r\n   * @param {File} file - 图像文件\r\n   * @returns {Promise<Object>} 提取的元数据\r\n   */\n  static async extractMetadata(file) {\n    try {\n      const results = {\n        positivePrompts: '',\n        negativePrompts: '',\n        parameters: {},\n        metadata: {\n          software: 'Unknown',\n          version: '',\n          createdAt: '',\n          fileSize: (file.size / 1024 / 1024).toFixed(2) + \" MB\",\n          fileName: file.name,\n          fileType: file.type\n        },\n        rawData: {},\n        extractionSource: 'unknown'\n      };\n\n      // 读取基本EXIF数据\n      const exifData = await exifr.parse(file, {\n        userComment: true,\n        imageDescription: true,\n        software: true,\n        dateTime: true,\n        make: true,\n        model: true\n      });\n      if (exifData) {\n        results.rawData.exif = exifData;\n\n        // 提取基本信息\n        if (exifData.Software) results.metadata.software = exifData.Software;\n        if (exifData.DateTime) results.metadata.createdAt = exifData.DateTime;\n        if (exifData.Make) results.metadata.make = exifData.Make;\n        if (exifData.Model) results.metadata.model = exifData.Model;\n      }\n\n      // 如果是PNG文件，尝试读取文本块\n      if (file.type === 'image/png') {\n        const pngData = await this.extractPNGTextChunks(file);\n        results.rawData.png = pngData;\n\n        // 解析不同AI工具的格式\n        const aiData = this.parseAIMetadata(pngData, exifData);\n        Object.assign(results, aiData);\n      }\n\n      // 如果是JPEG文件，尝试从EXIF的UserComment中提取\n      if (file.type === 'image/jpeg' && exifData !== null && exifData !== void 0 && exifData.UserComment) {\n        const aiData = this.parseUserComment(exifData.UserComment);\n        Object.assign(results, aiData);\n      }\n      return results;\n    } catch (error) {\n      console.error('元数据提取失败:', error);\n      throw new Error('无法读取图像元数据，可能不是AI生成的图像或格式不支持');\n    }\n  }\n\n  /**\r\n   * 提取PNG文本块\r\n   * @param {File} file - PNG文件\r\n   * @returns {Promise<Object>} PNG文本块数据\r\n   */\n  static async extractPNGTextChunks(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const arrayBuffer = e.target.result;\n          const dataView = new DataView(arrayBuffer);\n          const textChunks = {};\n\n          // 检查PNG签名\n          const pngSignature = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A];\n          for (let i = 0; i < 8; i++) {\n            if (dataView.getUint8(i) !== pngSignature[i]) {\n              throw new Error('不是有效的PNG文件');\n            }\n          }\n          let offset = 8; // 跳过PNG签名\n\n          while (offset < arrayBuffer.byteLength - 8) {\n            // 读取块长度\n            const chunkLength = dataView.getUint32(offset);\n            offset += 4;\n\n            // 读取块类型\n            const chunkType = String.fromCharCode(dataView.getUint8(offset), dataView.getUint8(offset + 1), dataView.getUint8(offset + 2), dataView.getUint8(offset + 3));\n            offset += 4;\n\n            // 如果是文本块\n            if (chunkType === 'tEXt' || chunkType === 'iTXt' || chunkType === 'zTXt') {\n              const chunkData = new Uint8Array(arrayBuffer, offset, chunkLength);\n              const textData = this.parseTextChunk(chunkData, chunkType);\n              if (textData.keyword && textData.text) {\n                textChunks[textData.keyword] = textData.text;\n              }\n            }\n\n            // 跳到下一个块\n            offset += chunkLength + 4; // +4 for CRC\n\n            // 如果遇到IEND块，停止解析\n            if (chunkType === 'IEND') break;\n          }\n          resolve(textChunks);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      reader.onerror = () => reject(new Error('文件读取失败'));\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\r\n   * 解析PNG文本块\r\n   * @param {Uint8Array} data - 文本块数据\r\n   * @param {string} type - 块类型\r\n   * @returns {Object} 解析后的文本数据\r\n   */\n  static parseTextChunk(data, type) {\n    try {\n      if (type === 'tEXt') {\n        // tEXt: keyword\\0text\n        const nullIndex = data.indexOf(0);\n        if (nullIndex === -1) return {};\n        const keyword = new TextDecoder('latin1').decode(data.slice(0, nullIndex));\n        const text = new TextDecoder('latin1').decode(data.slice(nullIndex + 1));\n        return {\n          keyword,\n          text\n        };\n      } else if (type === 'iTXt') {\n        // iTXt: keyword\\0compression\\0language\\0translated_keyword\\0text\n        let offset = 0;\n        const nullIndices = [];\n        for (let i = 0; i < data.length; i++) {\n          if (data[i] === 0) {\n            nullIndices.push(i);\n            if (nullIndices.length >= 4) break;\n          }\n        }\n        if (nullIndices.length < 4) return {};\n        const keyword = new TextDecoder('utf8').decode(data.slice(0, nullIndices[0]));\n        const text = new TextDecoder('utf8').decode(data.slice(nullIndices[3] + 1));\n        return {\n          keyword,\n          text\n        };\n      }\n      return {};\n    } catch (error) {\n      console.warn('文本块解析失败:', error);\n      return {};\n    }\n  }\n\n  /**\r\n   * 解析AI工具元数据\r\n   * @param {Object} pngData - PNG文本块数据\r\n   * @param {Object} exifData - EXIF数据\r\n   * @returns {Object} 解析后的AI元数据\r\n   */\n  static parseAIMetadata(pngData, exifData) {\n    const result = {\n      positivePrompts: '',\n      negativePrompts: '',\n      parameters: {},\n      extractionSource: 'unknown'\n    };\n\n    // ComfyUI格式检测\n    if (pngData.workflow || pngData.prompt) {\n      return this.parseComfyUIMetadata(pngData);\n    }\n\n    // AUTOMATIC1111格式检测\n    if (pngData.parameters) {\n      return this.parseAutomatic1111Metadata(pngData);\n    }\n\n    // NovelAI格式检测\n    if (pngData.Description || pngData.Comment) {\n      return this.parseNovelAIMetadata(pngData);\n    }\n\n    // Stable Diffusion WebUI格式\n    if (pngData['sd-metadata']) {\n      return this.parseSDWebUIMetadata(pngData);\n    }\n\n    // 尝试从其他字段解析\n    for (const [key, value] of Object.entries(pngData)) {\n      if (this.looksLikePrompt(value)) {\n        result.positivePrompts = value;\n        result.extractionSource = `png_${key}`;\n        break;\n      }\n    }\n    return result;\n  }\n\n  /**\r\n   * 解析ComfyUI元数据\r\n   */\n  static parseComfyUIMetadata(pngData) {\n    const result = {\n      positivePrompts: '',\n      negativePrompts: '',\n      parameters: {},\n      extractionSource: 'comfyui'\n    };\n    try {\n      // 解析workflow\n      if (pngData.workflow) {\n        const workflow = JSON.parse(pngData.workflow);\n        result.parameters.workflow = workflow;\n\n        // 从workflow中提取提示词\n        this.extractPromptsFromComfyWorkflow(workflow, result);\n      }\n\n      // 解析prompt\n      if (pngData.prompt) {\n        const prompt = JSON.parse(pngData.prompt);\n        result.parameters.prompt = prompt;\n\n        // 从prompt中提取提示词\n        this.extractPromptsFromComfyPrompt(prompt, result);\n      }\n    } catch (error) {\n      console.warn('ComfyUI元数据解析失败:', error);\n    }\n    return result;\n  }\n\n  /**\r\n   * 从ComfyUI workflow中提取提示词\r\n   */\n  static extractPromptsFromComfyWorkflow(workflow, result) {\n    try {\n      // 遍历workflow节点寻找文本输入\n      for (const node of workflow.nodes || []) {\n        if (node.type === 'CLIPTextEncode' || node.type === 'CLIPTextEncodeSDXL') {\n          var _node$widgets_values;\n          const text = (_node$widgets_values = node.widgets_values) === null || _node$widgets_values === void 0 ? void 0 : _node$widgets_values[0];\n          if (text && this.looksLikePrompt(text)) {\n            var _node$title;\n            if ((_node$title = node.title) !== null && _node$title !== void 0 && _node$title.toLowerCase().includes('negative') || text.toLowerCase().includes('worst quality')) {\n              result.negativePrompts = text;\n            } else {\n              result.positivePrompts = text;\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('ComfyUI workflow提示词提取失败:', error);\n    }\n  }\n\n  /**\r\n   * 从ComfyUI prompt中提取提示词\r\n   */\n  static extractPromptsFromComfyPrompt(prompt, result) {\n    try {\n      // 遍历prompt节点\n      for (const [nodeId, nodeData] of Object.entries(prompt)) {\n        if (nodeData.class_type === 'CLIPTextEncode' || nodeData.class_type === 'CLIPTextEncodeSDXL') {\n          var _nodeData$inputs;\n          const text = (_nodeData$inputs = nodeData.inputs) === null || _nodeData$inputs === void 0 ? void 0 : _nodeData$inputs.text;\n          if (text && this.looksLikePrompt(text)) {\n            // 简单判断正负提示词\n            if (text.toLowerCase().includes('worst quality') || text.toLowerCase().includes('bad anatomy')) {\n              result.negativePrompts = text;\n            } else {\n              result.positivePrompts = text;\n            }\n          }\n        }\n\n        // 提取其他参数\n        if (nodeData.class_type === 'KSampler') {\n          const inputs = nodeData.inputs || {};\n          result.parameters.seed = inputs.seed;\n          result.parameters.steps = inputs.steps;\n          result.parameters.cfgScale = inputs.cfg;\n          result.parameters.sampler = inputs.sampler_name;\n          result.parameters.scheduler = inputs.scheduler;\n        }\n      }\n    } catch (error) {\n      console.warn('ComfyUI prompt提示词提取失败:', error);\n    }\n  }\n\n  /**\r\n   * 解析AUTOMATIC1111元数据\r\n   */\n  static parseAutomatic1111Metadata(pngData) {\n    const result = {\n      positivePrompts: '',\n      negativePrompts: '',\n      parameters: {},\n      extractionSource: 'automatic1111'\n    };\n    try {\n      const params = pngData.parameters;\n\n      // 解析参数字符串\n      const lines = params.split('\\n');\n\n      // 第一行通常是正向提示词\n      if (lines[0]) {\n        result.positivePrompts = lines[0].trim();\n      }\n\n      // 查找负向提示词\n      const negativeIndex = lines.findIndex(line => line.startsWith('Negative prompt:'));\n      if (negativeIndex !== -1) {\n        result.negativePrompts = lines[negativeIndex].replace('Negative prompt:', '').trim();\n      }\n\n      // 解析其他参数\n      const paramLine = lines[lines.length - 1];\n      if (paramLine) {\n        const paramPairs = paramLine.split(',');\n        for (const pair of paramPairs) {\n          const [key, value] = pair.split(':').map(s => s.trim());\n          if (key && value) {\n            switch (key.toLowerCase()) {\n              case 'steps':\n                result.parameters.steps = parseInt(value);\n                break;\n              case 'sampler':\n                result.parameters.sampler = value;\n                break;\n              case 'cfg scale':\n                result.parameters.cfgScale = parseFloat(value);\n                break;\n              case 'seed':\n                result.parameters.seed = parseInt(value);\n                break;\n              case 'size':\n                result.parameters.size = value;\n                break;\n              case 'model hash':\n                result.parameters.modelHash = value;\n                break;\n              case 'model':\n                result.parameters.model = value;\n                break;\n              default:\n                result.parameters[key] = value;\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('AUTOMATIC1111元数据解析失败:', error);\n    }\n    return result;\n  }\n\n  /**\r\n   * 解析NovelAI元数据\r\n   */\n  static parseNovelAIMetadata(pngData) {\n    const result = {\n      positivePrompts: '',\n      negativePrompts: '',\n      parameters: {},\n      extractionSource: 'novelai'\n    };\n    try {\n      // NovelAI通常将数据存储在Description或Comment中\n      const data = pngData.Description || pngData.Comment;\n      if (data) {\n        const parsed = JSON.parse(data);\n        result.positivePrompts = parsed.prompt || '';\n        result.negativePrompts = parsed.uc || '';\n\n        // 提取参数\n        if (parsed.steps) result.parameters.steps = parsed.steps;\n        if (parsed.scale) result.parameters.cfgScale = parsed.scale;\n        if (parsed.seed) result.parameters.seed = parsed.seed;\n        if (parsed.sampler) result.parameters.sampler = parsed.sampler;\n        if (parsed.width && parsed.height) {\n          result.parameters.size = `${parsed.width}x${parsed.height}`;\n        }\n      }\n    } catch (error) {\n      console.warn('NovelAI元数据解析失败:', error);\n    }\n    return result;\n  }\n\n  /**\r\n   * 解析Stable Diffusion WebUI元数据\r\n   */\n  static parseSDWebUIMetadata(pngData) {\n    const result = {\n      positivePrompts: '',\n      negativePrompts: '',\n      parameters: {},\n      extractionSource: 'sd-webui'\n    };\n    try {\n      const metadata = JSON.parse(pngData['sd-metadata']);\n      result.positivePrompts = metadata.prompt || '';\n      result.negativePrompts = metadata.negativePrompt || '';\n\n      // 提取参数\n      Object.assign(result.parameters, metadata.parameters || {});\n    } catch (error) {\n      console.warn('SD WebUI元数据解析失败:', error);\n    }\n    return result;\n  }\n\n  /**\r\n   * 解析EXIF UserComment\r\n   */\n  static parseUserComment(userComment) {\n    const result = {\n      positivePrompts: '',\n      negativePrompts: '',\n      parameters: {},\n      extractionSource: 'exif_usercomment'\n    };\n    try {\n      // 尝试解析JSON格式\n      if (userComment.startsWith('{')) {\n        const data = JSON.parse(userComment);\n        result.positivePrompts = data.prompt || data.positive || '';\n        result.negativePrompts = data.negativePrompt || data.negative || '';\n        Object.assign(result.parameters, data.parameters || {});\n      } else {\n        // 作为纯文本处理\n        result.positivePrompts = userComment;\n      }\n    } catch (error) {\n      // 如果不是JSON，直接作为提示词\n      result.positivePrompts = userComment;\n    }\n    return result;\n  }\n\n  /**\r\n   * 判断文本是否像提示词\r\n   */\n  static looksLikePrompt(text) {\n    if (!text || typeof text !== 'string' || text.length < 10) {\n      return false;\n    }\n\n    // 检查是否包含常见的提示词特征\n    const promptKeywords = ['masterpiece', 'best quality', 'ultra detailed', 'high resolution', 'beautiful', 'detailed', 'realistic', 'anime', 'portrait', 'landscape', 'girl', 'boy', 'woman', 'man', 'character', 'face', 'eyes', 'hair'];\n    const lowerText = text.toLowerCase();\n    return promptKeywords.some(keyword => lowerText.includes(keyword)) || text.includes(',') && text.split(',').length > 3;\n  }\n}\nexport default ImageMetadataExtractor;","map":{"version":3,"names":["exifr","ImageMetadataExtractor","extractMetadata","file","results","positivePrompts","negativePrompts","parameters","metadata","software","version","createdAt","fileSize","size","toFixed","fileName","name","fileType","type","rawData","extractionSource","exifData","parse","userComment","imageDescription","dateTime","make","model","exif","Software","DateTime","Make","Model","pngData","extractPNGTextChunks","png","aiData","parseAIMetadata","Object","assign","UserComment","parseUserComment","error","console","Error","Promise","resolve","reject","reader","FileReader","onload","e","arrayBuffer","target","result","dataView","DataView","textChunks","pngSignature","i","getUint8","offset","byteLength","chunkLength","getUint32","chunkType","String","fromCharCode","chunkData","Uint8Array","textData","parseTextChunk","keyword","text","onerror","readAsArrayBuffer","data","nullIndex","indexOf","TextDecoder","decode","slice","nullIndices","length","push","warn","workflow","prompt","parseComfyUIMetadata","parseAutomatic1111Metadata","Description","Comment","parseNovelAIMetadata","parseSDWebUIMetadata","key","value","entries","looksLikePrompt","JSON","extractPromptsFromComfyWorkflow","extractPromptsFromComfyPrompt","node","nodes","_node$widgets_values","widgets_values","_node$title","title","toLowerCase","includes","nodeId","nodeData","class_type","_nodeData$inputs","inputs","seed","steps","cfgScale","cfg","sampler","sampler_name","scheduler","params","lines","split","trim","negativeIndex","findIndex","line","startsWith","replace","paramLine","paramPairs","pair","map","s","parseInt","parseFloat","modelHash","parsed","uc","scale","width","height","negativePrompt","positive","negative","promptKeywords","lowerText","some"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/utils/imageMetadataExtractor.js"],"sourcesContent":["import exifr from 'exifr';\r\n\r\n/**\r\n * 图像元数据提取器\r\n * 支持主流AI绘画工具的元数据格式\r\n */\r\nexport class ImageMetadataExtractor {\r\n  \r\n  /**\r\n   * 提取图像元数据\r\n   * @param {File} file - 图像文件\r\n   * @returns {Promise<Object>} 提取的元数据\r\n   */\r\n  static async extractMetadata(file) {\r\n    try {\r\n      const results = {\r\n        positivePrompts: '',\r\n        negativePrompts: '',\r\n        parameters: {},\r\n        metadata: {\r\n          software: 'Unknown',\r\n          version: '',\r\n          createdAt: '',\r\n          fileSize: (file.size / 1024 / 1024).toFixed(2) + \" MB\",\r\n          fileName: file.name,\r\n          fileType: file.type\r\n        },\r\n        rawData: {},\r\n        extractionSource: 'unknown'\r\n      };\r\n\r\n      // 读取基本EXIF数据\r\n      const exifData = await exifr.parse(file, {\r\n        userComment: true,\r\n        imageDescription: true,\r\n        software: true,\r\n        dateTime: true,\r\n        make: true,\r\n        model: true\r\n      });\r\n\r\n      if (exifData) {\r\n        results.rawData.exif = exifData;\r\n        \r\n        // 提取基本信息\r\n        if (exifData.Software) results.metadata.software = exifData.Software;\r\n        if (exifData.DateTime) results.metadata.createdAt = exifData.DateTime;\r\n        if (exifData.Make) results.metadata.make = exifData.Make;\r\n        if (exifData.Model) results.metadata.model = exifData.Model;\r\n      }\r\n\r\n      // 如果是PNG文件，尝试读取文本块\r\n      if (file.type === 'image/png') {\r\n        const pngData = await this.extractPNGTextChunks(file);\r\n        results.rawData.png = pngData;\r\n        \r\n        // 解析不同AI工具的格式\r\n        const aiData = this.parseAIMetadata(pngData, exifData);\r\n        Object.assign(results, aiData);\r\n      }\r\n\r\n      // 如果是JPEG文件，尝试从EXIF的UserComment中提取\r\n      if (file.type === 'image/jpeg' && exifData?.UserComment) {\r\n        const aiData = this.parseUserComment(exifData.UserComment);\r\n        Object.assign(results, aiData);\r\n      }\r\n\r\n      return results;\r\n    } catch (error) {\r\n      console.error('元数据提取失败:', error);\r\n      throw new Error('无法读取图像元数据，可能不是AI生成的图像或格式不支持');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 提取PNG文本块\r\n   * @param {File} file - PNG文件\r\n   * @returns {Promise<Object>} PNG文本块数据\r\n   */\r\n  static async extractPNGTextChunks(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = (e) => {\r\n        try {\r\n          const arrayBuffer = e.target.result;\r\n          const dataView = new DataView(arrayBuffer);\r\n          const textChunks = {};\r\n          \r\n          // 检查PNG签名\r\n          const pngSignature = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A];\r\n          for (let i = 0; i < 8; i++) {\r\n            if (dataView.getUint8(i) !== pngSignature[i]) {\r\n              throw new Error('不是有效的PNG文件');\r\n            }\r\n          }\r\n\r\n          let offset = 8; // 跳过PNG签名\r\n          \r\n          while (offset < arrayBuffer.byteLength - 8) {\r\n            // 读取块长度\r\n            const chunkLength = dataView.getUint32(offset);\r\n            offset += 4;\r\n            \r\n            // 读取块类型\r\n            const chunkType = String.fromCharCode(\r\n              dataView.getUint8(offset),\r\n              dataView.getUint8(offset + 1),\r\n              dataView.getUint8(offset + 2),\r\n              dataView.getUint8(offset + 3)\r\n            );\r\n            offset += 4;\r\n            \r\n            // 如果是文本块\r\n            if (chunkType === 'tEXt' || chunkType === 'iTXt' || chunkType === 'zTXt') {\r\n              const chunkData = new Uint8Array(arrayBuffer, offset, chunkLength);\r\n              const textData = this.parseTextChunk(chunkData, chunkType);\r\n              if (textData.keyword && textData.text) {\r\n                textChunks[textData.keyword] = textData.text;\r\n              }\r\n            }\r\n            \r\n            // 跳到下一个块\r\n            offset += chunkLength + 4; // +4 for CRC\r\n            \r\n            // 如果遇到IEND块，停止解析\r\n            if (chunkType === 'IEND') break;\r\n          }\r\n          \r\n          resolve(textChunks);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      reader.onerror = () => reject(new Error('文件读取失败'));\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 解析PNG文本块\r\n   * @param {Uint8Array} data - 文本块数据\r\n   * @param {string} type - 块类型\r\n   * @returns {Object} 解析后的文本数据\r\n   */\r\n  static parseTextChunk(data, type) {\r\n    try {\r\n      if (type === 'tEXt') {\r\n        // tEXt: keyword\\0text\r\n        const nullIndex = data.indexOf(0);\r\n        if (nullIndex === -1) return {};\r\n        \r\n        const keyword = new TextDecoder('latin1').decode(data.slice(0, nullIndex));\r\n        const text = new TextDecoder('latin1').decode(data.slice(nullIndex + 1));\r\n        \r\n        return { keyword, text };\r\n      } else if (type === 'iTXt') {\r\n        // iTXt: keyword\\0compression\\0language\\0translated_keyword\\0text\r\n        let offset = 0;\r\n        const nullIndices = [];\r\n        \r\n        for (let i = 0; i < data.length; i++) {\r\n          if (data[i] === 0) {\r\n            nullIndices.push(i);\r\n            if (nullIndices.length >= 4) break;\r\n          }\r\n        }\r\n        \r\n        if (nullIndices.length < 4) return {};\r\n        \r\n        const keyword = new TextDecoder('utf8').decode(data.slice(0, nullIndices[0]));\r\n        const text = new TextDecoder('utf8').decode(data.slice(nullIndices[3] + 1));\r\n        \r\n        return { keyword, text };\r\n      }\r\n      \r\n      return {};\r\n    } catch (error) {\r\n      console.warn('文本块解析失败:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析AI工具元数据\r\n   * @param {Object} pngData - PNG文本块数据\r\n   * @param {Object} exifData - EXIF数据\r\n   * @returns {Object} 解析后的AI元数据\r\n   */\r\n  static parseAIMetadata(pngData, exifData) {\r\n    const result = {\r\n      positivePrompts: '',\r\n      negativePrompts: '',\r\n      parameters: {},\r\n      extractionSource: 'unknown'\r\n    };\r\n\r\n    // ComfyUI格式检测\r\n    if (pngData.workflow || pngData.prompt) {\r\n      return this.parseComfyUIMetadata(pngData);\r\n    }\r\n\r\n    // AUTOMATIC1111格式检测\r\n    if (pngData.parameters) {\r\n      return this.parseAutomatic1111Metadata(pngData);\r\n    }\r\n\r\n    // NovelAI格式检测\r\n    if (pngData.Description || pngData.Comment) {\r\n      return this.parseNovelAIMetadata(pngData);\r\n    }\r\n\r\n    // Stable Diffusion WebUI格式\r\n    if (pngData['sd-metadata']) {\r\n      return this.parseSDWebUIMetadata(pngData);\r\n    }\r\n\r\n    // 尝试从其他字段解析\r\n    for (const [key, value] of Object.entries(pngData)) {\r\n      if (this.looksLikePrompt(value)) {\r\n        result.positivePrompts = value;\r\n        result.extractionSource = `png_${key}`;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 解析ComfyUI元数据\r\n   */\r\n  static parseComfyUIMetadata(pngData) {\r\n    const result = {\r\n      positivePrompts: '',\r\n      negativePrompts: '',\r\n      parameters: {},\r\n      extractionSource: 'comfyui'\r\n    };\r\n\r\n    try {\r\n      // 解析workflow\r\n      if (pngData.workflow) {\r\n        const workflow = JSON.parse(pngData.workflow);\r\n        result.parameters.workflow = workflow;\r\n        \r\n        // 从workflow中提取提示词\r\n        this.extractPromptsFromComfyWorkflow(workflow, result);\r\n      }\r\n\r\n      // 解析prompt\r\n      if (pngData.prompt) {\r\n        const prompt = JSON.parse(pngData.prompt);\r\n        result.parameters.prompt = prompt;\r\n        \r\n        // 从prompt中提取提示词\r\n        this.extractPromptsFromComfyPrompt(prompt, result);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.warn('ComfyUI元数据解析失败:', error);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 从ComfyUI workflow中提取提示词\r\n   */\r\n  static extractPromptsFromComfyWorkflow(workflow, result) {\r\n    try {\r\n      // 遍历workflow节点寻找文本输入\r\n      for (const node of workflow.nodes || []) {\r\n        if (node.type === 'CLIPTextEncode' || node.type === 'CLIPTextEncodeSDXL') {\r\n          const text = node.widgets_values?.[0];\r\n          if (text && this.looksLikePrompt(text)) {\r\n            if (node.title?.toLowerCase().includes('negative') || \r\n                text.toLowerCase().includes('worst quality')) {\r\n              result.negativePrompts = text;\r\n            } else {\r\n              result.positivePrompts = text;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('ComfyUI workflow提示词提取失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从ComfyUI prompt中提取提示词\r\n   */\r\n  static extractPromptsFromComfyPrompt(prompt, result) {\r\n    try {\r\n      // 遍历prompt节点\r\n      for (const [nodeId, nodeData] of Object.entries(prompt)) {\r\n        if (nodeData.class_type === 'CLIPTextEncode' || \r\n            nodeData.class_type === 'CLIPTextEncodeSDXL') {\r\n          const text = nodeData.inputs?.text;\r\n          if (text && this.looksLikePrompt(text)) {\r\n            // 简单判断正负提示词\r\n            if (text.toLowerCase().includes('worst quality') || \r\n                text.toLowerCase().includes('bad anatomy')) {\r\n              result.negativePrompts = text;\r\n            } else {\r\n              result.positivePrompts = text;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 提取其他参数\r\n        if (nodeData.class_type === 'KSampler') {\r\n          const inputs = nodeData.inputs || {};\r\n          result.parameters.seed = inputs.seed;\r\n          result.parameters.steps = inputs.steps;\r\n          result.parameters.cfgScale = inputs.cfg;\r\n          result.parameters.sampler = inputs.sampler_name;\r\n          result.parameters.scheduler = inputs.scheduler;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('ComfyUI prompt提示词提取失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析AUTOMATIC1111元数据\r\n   */\r\n  static parseAutomatic1111Metadata(pngData) {\r\n    const result = {\r\n      positivePrompts: '',\r\n      negativePrompts: '',\r\n      parameters: {},\r\n      extractionSource: 'automatic1111'\r\n    };\r\n\r\n    try {\r\n      const params = pngData.parameters;\r\n      \r\n      // 解析参数字符串\r\n      const lines = params.split('\\n');\r\n      \r\n      // 第一行通常是正向提示词\r\n      if (lines[0]) {\r\n        result.positivePrompts = lines[0].trim();\r\n      }\r\n      \r\n      // 查找负向提示词\r\n      const negativeIndex = lines.findIndex(line => \r\n        line.startsWith('Negative prompt:'));\r\n      if (negativeIndex !== -1) {\r\n        result.negativePrompts = lines[negativeIndex]\r\n          .replace('Negative prompt:', '').trim();\r\n      }\r\n      \r\n      // 解析其他参数\r\n      const paramLine = lines[lines.length - 1];\r\n      if (paramLine) {\r\n        const paramPairs = paramLine.split(',');\r\n        for (const pair of paramPairs) {\r\n          const [key, value] = pair.split(':').map(s => s.trim());\r\n          if (key && value) {\r\n            switch (key.toLowerCase()) {\r\n              case 'steps':\r\n                result.parameters.steps = parseInt(value);\r\n                break;\r\n              case 'sampler':\r\n                result.parameters.sampler = value;\r\n                break;\r\n              case 'cfg scale':\r\n                result.parameters.cfgScale = parseFloat(value);\r\n                break;\r\n              case 'seed':\r\n                result.parameters.seed = parseInt(value);\r\n                break;\r\n              case 'size':\r\n                result.parameters.size = value;\r\n                break;\r\n              case 'model hash':\r\n                result.parameters.modelHash = value;\r\n                break;\r\n              case 'model':\r\n                result.parameters.model = value;\r\n                break;\r\n              default:\r\n                result.parameters[key] = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.warn('AUTOMATIC1111元数据解析失败:', error);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 解析NovelAI元数据\r\n   */\r\n  static parseNovelAIMetadata(pngData) {\r\n    const result = {\r\n      positivePrompts: '',\r\n      negativePrompts: '',\r\n      parameters: {},\r\n      extractionSource: 'novelai'\r\n    };\r\n\r\n    try {\r\n      // NovelAI通常将数据存储在Description或Comment中\r\n      const data = pngData.Description || pngData.Comment;\r\n      if (data) {\r\n        const parsed = JSON.parse(data);\r\n        \r\n        result.positivePrompts = parsed.prompt || '';\r\n        result.negativePrompts = parsed.uc || '';\r\n        \r\n        // 提取参数\r\n        if (parsed.steps) result.parameters.steps = parsed.steps;\r\n        if (parsed.scale) result.parameters.cfgScale = parsed.scale;\r\n        if (parsed.seed) result.parameters.seed = parsed.seed;\r\n        if (parsed.sampler) result.parameters.sampler = parsed.sampler;\r\n        if (parsed.width && parsed.height) {\r\n          result.parameters.size = `${parsed.width}x${parsed.height}`;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('NovelAI元数据解析失败:', error);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 解析Stable Diffusion WebUI元数据\r\n   */\r\n  static parseSDWebUIMetadata(pngData) {\r\n    const result = {\r\n      positivePrompts: '',\r\n      negativePrompts: '',\r\n      parameters: {},\r\n      extractionSource: 'sd-webui'\r\n    };\r\n\r\n    try {\r\n      const metadata = JSON.parse(pngData['sd-metadata']);\r\n      \r\n      result.positivePrompts = metadata.prompt || '';\r\n      result.negativePrompts = metadata.negativePrompt || '';\r\n      \r\n      // 提取参数\r\n      Object.assign(result.parameters, metadata.parameters || {});\r\n      \r\n    } catch (error) {\r\n      console.warn('SD WebUI元数据解析失败:', error);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 解析EXIF UserComment\r\n   */\r\n  static parseUserComment(userComment) {\r\n    const result = {\r\n      positivePrompts: '',\r\n      negativePrompts: '',\r\n      parameters: {},\r\n      extractionSource: 'exif_usercomment'\r\n    };\r\n\r\n    try {\r\n      // 尝试解析JSON格式\r\n      if (userComment.startsWith('{')) {\r\n        const data = JSON.parse(userComment);\r\n        result.positivePrompts = data.prompt || data.positive || '';\r\n        result.negativePrompts = data.negativePrompt || data.negative || '';\r\n        Object.assign(result.parameters, data.parameters || {});\r\n      } else {\r\n        // 作为纯文本处理\r\n        result.positivePrompts = userComment;\r\n      }\r\n    } catch (error) {\r\n      // 如果不是JSON，直接作为提示词\r\n      result.positivePrompts = userComment;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 判断文本是否像提示词\r\n   */\r\n  static looksLikePrompt(text) {\r\n    if (!text || typeof text !== 'string' || text.length < 10) {\r\n      return false;\r\n    }\r\n    \r\n    // 检查是否包含常见的提示词特征\r\n    const promptKeywords = [\r\n      'masterpiece', 'best quality', 'ultra detailed', 'high resolution',\r\n      'beautiful', 'detailed', 'realistic', 'anime', 'portrait', 'landscape',\r\n      'girl', 'boy', 'woman', 'man', 'character', 'face', 'eyes', 'hair'\r\n    ];\r\n    \r\n    const lowerText = text.toLowerCase();\r\n    return promptKeywords.some(keyword => lowerText.includes(keyword)) ||\r\n           text.includes(',') && text.split(',').length > 3;\r\n  }\r\n}\r\n\r\nexport default ImageMetadataExtractor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}