{"ast":null,"code":"import { API_CONFIG } from '../constants/config';\n\n/**\r\n * AI智能提示词生成服务\r\n */\nclass AIService {\n  constructor() {\n    this.apiKey = API_CONFIG.SILICONFLOW_API_KEY;\n    this.baseUrl = API_CONFIG.BASE_URL;\n    this.defaultModel = API_CONFIG.DEFAULT_MODEL;\n  }\n\n  /**\r\n   * 构建系统提示词\r\n   */\n  buildSystemPrompt(userInput) {\n    return `You are an AI assistant specialized in generating detailed, comma-separated English tags for AI image generation platforms like Stable Diffusion. \n\nYour task:\n1. If the input is in Chinese, first understand the meaning and translate key concepts to English\n2. Expand the description into a rich list of descriptive English tags\n3. Add quality enhancers, lighting, composition, and style tags\n4. Output MUST be a single line of English tags, separated by commas\n5. Do not add any other text, sentences, or explanations\n\nExample Input: \"一个美丽的精灵法师在黑暗森林中\"\nExample Output: \"1girl, solo, elf, sorceress, beautiful, long_hair, pointy_ears, magical_staff, flowing_robe, dark_forest, ancient_trees, mystical_atmosphere, masterpiece, best quality, ultra detailed, cinematic lighting, dramatic shadows, perfect composition\"\n\nExample Input: \"a cyberpunk cityscape at night\"\nExample Output: \"cyberpunk, cityscape, night, neon_lights, skyscrapers, futuristic_architecture, flying_cars, holographic_advertisements, rain_effects, atmospheric_perspective, masterpiece, best quality, ultra detailed, moody_lighting, cinematic_composition\"\n\nUser Input: ${userInput}\n\nOutput Tags (comma-separated English tags only):`;\n  }\n\n  /**\r\n   * 生成智能提示词\r\n   */\n  async generatePrompt(input, style = '') {\n    // 构建完整的用户输入\n    let fullInput = input;\n    if (style) {\n      fullInput += `, ${style} style`;\n    }\n    const systemPrompt = this.buildSystemPrompt(fullInput);\n    try {\n      var _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      const response = await fetch(`${this.baseUrl}${API_CONFIG.ENDPOINTS.CHAT_COMPLETIONS}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: this.defaultModel,\n          messages: [{\n            role: 'user',\n            content: systemPrompt\n          }],\n          stream: false,\n          max_tokens: API_CONFIG.DEFAULT_PARAMS.max_tokens,\n          temperature: 0.6 + Math.random() * 0.4,\n          // 0.6-1.0 随机温度\n          top_p: API_CONFIG.DEFAULT_PARAMS.top_p\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      const generatedTags = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim();\n      if (generatedTags) {\n        return {\n          content: generatedTags,\n          source: 'ai'\n        };\n      } else {\n        throw new Error('API返回的内容为空');\n      }\n    } catch (error) {\n      console.error('AI生成失败:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * 检查API状态\r\n   */\n  async checkApiStatus() {\n    try {\n      const response = await fetch(`${this.baseUrl}${API_CONFIG.ENDPOINTS.CHAT_COMPLETIONS}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: this.defaultModel,\n          messages: [{\n            role: 'user',\n            content: 'test'\n          }],\n          max_tokens: 1\n        })\n      });\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}\nexport default new AIService();","map":{"version":3,"names":["API_CONFIG","AIService","constructor","apiKey","SILICONFLOW_API_KEY","baseUrl","BASE_URL","defaultModel","DEFAULT_MODEL","buildSystemPrompt","userInput","generatePrompt","input","style","fullInput","systemPrompt","_data$choices$","_data$choices$$messag","_data$choices$$messag2","response","fetch","ENDPOINTS","CHAT_COMPLETIONS","method","headers","body","JSON","stringify","model","messages","role","content","stream","max_tokens","DEFAULT_PARAMS","temperature","Math","random","top_p","ok","Error","status","statusText","data","json","generatedTags","choices","message","trim","source","error","console","checkApiStatus"],"sources":["C:/Users/wjx19/Documents/GitHub/AI-Art-Station/src/services/aiService.js"],"sourcesContent":["import { API_CONFIG } from '../constants/config';\r\n\r\n/**\r\n * AI智能提示词生成服务\r\n */\r\nclass AIService {\r\n  constructor() {\r\n    this.apiKey = API_CONFIG.SILICONFLOW_API_KEY;\r\n    this.baseUrl = API_CONFIG.BASE_URL;\r\n    this.defaultModel = API_CONFIG.DEFAULT_MODEL;\r\n  }\r\n\r\n  /**\r\n   * 构建系统提示词\r\n   */\r\n  buildSystemPrompt(userInput) {\r\n    return `You are an AI assistant specialized in generating detailed, comma-separated English tags for AI image generation platforms like Stable Diffusion. \r\n\r\nYour task:\r\n1. If the input is in Chinese, first understand the meaning and translate key concepts to English\r\n2. Expand the description into a rich list of descriptive English tags\r\n3. Add quality enhancers, lighting, composition, and style tags\r\n4. Output MUST be a single line of English tags, separated by commas\r\n5. Do not add any other text, sentences, or explanations\r\n\r\nExample Input: \"一个美丽的精灵法师在黑暗森林中\"\r\nExample Output: \"1girl, solo, elf, sorceress, beautiful, long_hair, pointy_ears, magical_staff, flowing_robe, dark_forest, ancient_trees, mystical_atmosphere, masterpiece, best quality, ultra detailed, cinematic lighting, dramatic shadows, perfect composition\"\r\n\r\nExample Input: \"a cyberpunk cityscape at night\"\r\nExample Output: \"cyberpunk, cityscape, night, neon_lights, skyscrapers, futuristic_architecture, flying_cars, holographic_advertisements, rain_effects, atmospheric_perspective, masterpiece, best quality, ultra detailed, moody_lighting, cinematic_composition\"\r\n\r\nUser Input: ${userInput}\r\n\r\nOutput Tags (comma-separated English tags only):`;\r\n  }\r\n\r\n  /**\r\n   * 生成智能提示词\r\n   */\r\n  async generatePrompt(input, style = '') {\r\n    // 构建完整的用户输入\r\n    let fullInput = input;\r\n    if (style) {\r\n      fullInput += `, ${style} style`;\r\n    }\r\n\r\n    const systemPrompt = this.buildSystemPrompt(fullInput);\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${API_CONFIG.ENDPOINTS.CHAT_COMPLETIONS}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.defaultModel,\r\n          messages: [\r\n            {\r\n              role: 'user',\r\n              content: systemPrompt\r\n            }\r\n          ],\r\n          stream: false,\r\n          max_tokens: API_CONFIG.DEFAULT_PARAMS.max_tokens,\r\n          temperature: 0.6 + (Math.random() * 0.4), // 0.6-1.0 随机温度\r\n          top_p: API_CONFIG.DEFAULT_PARAMS.top_p\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedTags = data.choices[0]?.message?.content?.trim();\r\n      \r\n      if (generatedTags) {\r\n        return { content: generatedTags, source: 'ai' };\r\n      } else {\r\n        throw new Error('API返回的内容为空');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('AI生成失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查API状态\r\n   */\r\n  async checkApiStatus() {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${API_CONFIG.ENDPOINTS.CHAT_COMPLETIONS}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.defaultModel,\r\n          messages: [{ role: 'user', content: 'test' }],\r\n          max_tokens: 1\r\n        })\r\n      });\r\n      \r\n      return response.ok;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AIService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}