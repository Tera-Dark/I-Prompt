{"ast":null,"code":"import { APP_CONFIG } from '../constants/config';\n\n/**\r\n * 验证输入文本\r\n * @param {string} text 输入文本\r\n * @returns {object} 验证结果\r\n */\nexport const validateInput = text => {\n  const result = {\n    isValid: true,\n    errors: [],\n    warnings: []\n  };\n\n  // 检查是否为空\n  if (!text || text.trim().length === 0) {\n    result.isValid = false;\n    result.errors.push('输入内容不能为空');\n    return result;\n  }\n\n  // 检查长度\n  if (text.length > APP_CONFIG.MAX_INPUT_LENGTH) {\n    result.isValid = false;\n    result.errors.push(`输入内容不能超过${APP_CONFIG.MAX_INPUT_LENGTH}个字符`);\n  }\n\n  // 检查是否包含敏感内容\n  const sensitiveWords = ['暴力', '血腥', 'violent', 'blood'];\n  const hasSensitiveContent = sensitiveWords.some(word => text.toLowerCase().includes(word.toLowerCase()));\n  if (hasSensitiveContent) {\n    result.warnings.push('检测到可能的敏感内容，建议修改描述');\n  }\n\n  // 检查是否太短\n  if (text.trim().length < 5) {\n    result.warnings.push('输入内容较短，建议添加更多描述以获得更好的效果');\n  }\n  return result;\n};\n\n/**\r\n * 验证图片文件\r\n * @param {File} file 图片文件\r\n * @returns {object} 验证结果\r\n */\nexport const validateImageFile = file => {\n  const result = {\n    isValid: true,\n    errors: []\n  };\n\n  // 检查文件类型\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  if (!allowedTypes.includes(file.type)) {\n    result.isValid = false;\n    result.errors.push('不支持的文件格式，请上传 JPG、PNG 或 WEBP 格式的图片');\n  }\n\n  // 检查文件大小 (10MB)\n  const maxSize = 10 * 1024 * 1024;\n  if (file.size > maxSize) {\n    result.isValid = false;\n    result.errors.push('文件大小不能超过 10MB');\n  }\n  return result;\n};\n\n/**\r\n * 验证邮箱格式\r\n * @param {string} email 邮箱地址\r\n * @returns {boolean} 是否有效\r\n */\nexport const validateEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\r\n * 清理和格式化提示词\r\n * @param {string} prompt 提示词\r\n * @returns {string} 清理后的提示词\r\n */\nexport const sanitizePrompt = prompt => {\n  return prompt.trim().replace(/\\s+/g, ' ') // 多个空格替换为单个空格\n  .replace(/,\\s*,/g, ',') // 多个逗号替换为单个逗号\n  .replace(/^,|,$/g, '') // 移除开头和结尾的逗号\n  .replace(/\\s*,\\s*/g, ', '); // 标准化逗号后的空格\n};","map":{"version":3,"names":["APP_CONFIG","validateInput","text","result","isValid","errors","warnings","trim","length","push","MAX_INPUT_LENGTH","sensitiveWords","hasSensitiveContent","some","word","toLowerCase","includes","validateImageFile","file","allowedTypes","type","maxSize","size","validateEmail","email","emailRegex","test","sanitizePrompt","prompt","replace"],"sources":["C:/Users/wjx19/Documents/GitHub/AI-Art-Station/src/utils/validation.js"],"sourcesContent":["import { APP_CONFIG } from '../constants/config';\r\n\r\n/**\r\n * 验证输入文本\r\n * @param {string} text 输入文本\r\n * @returns {object} 验证结果\r\n */\r\nexport const validateInput = (text) => {\r\n  const result = {\r\n    isValid: true,\r\n    errors: [],\r\n    warnings: []\r\n  };\r\n\r\n  // 检查是否为空\r\n  if (!text || text.trim().length === 0) {\r\n    result.isValid = false;\r\n    result.errors.push('输入内容不能为空');\r\n    return result;\r\n  }\r\n\r\n  // 检查长度\r\n  if (text.length > APP_CONFIG.MAX_INPUT_LENGTH) {\r\n    result.isValid = false;\r\n    result.errors.push(`输入内容不能超过${APP_CONFIG.MAX_INPUT_LENGTH}个字符`);\r\n  }\r\n\r\n  // 检查是否包含敏感内容\r\n  const sensitiveWords = ['暴力', '血腥', 'violent', 'blood'];\r\n  const hasSensitiveContent = sensitiveWords.some(word => \r\n    text.toLowerCase().includes(word.toLowerCase())\r\n  );\r\n  \r\n  if (hasSensitiveContent) {\r\n    result.warnings.push('检测到可能的敏感内容，建议修改描述');\r\n  }\r\n\r\n  // 检查是否太短\r\n  if (text.trim().length < 5) {\r\n    result.warnings.push('输入内容较短，建议添加更多描述以获得更好的效果');\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * 验证图片文件\r\n * @param {File} file 图片文件\r\n * @returns {object} 验证结果\r\n */\r\nexport const validateImageFile = (file) => {\r\n  const result = {\r\n    isValid: true,\r\n    errors: []\r\n  };\r\n\r\n  // 检查文件类型\r\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\n  if (!allowedTypes.includes(file.type)) {\r\n    result.isValid = false;\r\n    result.errors.push('不支持的文件格式，请上传 JPG、PNG 或 WEBP 格式的图片');\r\n  }\r\n\r\n  // 检查文件大小 (10MB)\r\n  const maxSize = 10 * 1024 * 1024;\r\n  if (file.size > maxSize) {\r\n    result.isValid = false;\r\n    result.errors.push('文件大小不能超过 10MB');\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * 验证邮箱格式\r\n * @param {string} email 邮箱地址\r\n * @returns {boolean} 是否有效\r\n */\r\nexport const validateEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * 清理和格式化提示词\r\n * @param {string} prompt 提示词\r\n * @returns {string} 清理后的提示词\r\n */\r\nexport const sanitizePrompt = (prompt) => {\r\n  return prompt\r\n    .trim()\r\n    .replace(/\\s+/g, ' ') // 多个空格替换为单个空格\r\n    .replace(/,\\s*,/g, ',') // 多个逗号替换为单个逗号\r\n    .replace(/^,|,$/g, '') // 移除开头和结尾的逗号\r\n    .replace(/\\s*,\\s*/g, ', '); // 标准化逗号后的空格\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}