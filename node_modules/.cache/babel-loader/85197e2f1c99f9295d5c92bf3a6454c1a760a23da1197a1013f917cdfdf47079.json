{"ast":null,"code":"/**\r\n * 翻译服务 - 集成多种翻译引擎\r\n * 基于Python translators库\r\n */\n\nconst TRANSLATION_API_BASE = 'http://localhost:5000/api';\n\n/**\r\n * 获取可用的翻译引擎列表\r\n */\nexport async function getAvailableTranslators() {\n  try {\n    const response = await fetch(`${TRANSLATION_API_BASE}/translators`);\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || '获取翻译引擎失败');\n    }\n  } catch (error) {\n    console.error('获取翻译引擎失败:', error);\n    // 返回默认的翻译引擎列表\n    return {\n      'google': {\n        name: 'Google翻译',\n        description: '支持134种语言，质量高',\n        status: 'stable'\n      },\n      'baidu': {\n        name: '百度翻译',\n        description: '支持201种语言，中文效果好',\n        status: 'stable'\n      },\n      'alibaba': {\n        name: '阿里翻译',\n        description: '支持221种语言，支持专业领域',\n        status: 'stable'\n      }\n    };\n  }\n}\n\n/**\r\n * 测试翻译引擎可用性\r\n */\nexport async function testTranslator(translator) {\n  try {\n    const response = await fetch(`${TRANSLATION_API_BASE}/test_translator`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        translator\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`测试翻译引擎 ${translator} 失败:`, error);\n    return {\n      success: false,\n      error: error.message,\n      data: {\n        translator,\n        status: 'unavailable'\n      }\n    };\n  }\n}\n\n/**\r\n * 翻译单个文本\r\n */\nexport async function translateText(text, options = {}) {\n  const {\n    translator = 'google',\n    targetLang = 'zh',\n    sourceLang = 'auto'\n  } = options;\n  try {\n    const response = await fetch(`${TRANSLATION_API_BASE}/translate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        translator,\n        target_lang: targetLang,\n        source_lang: sourceLang\n      })\n    });\n    const data = await response.json();\n    if (data.success) {\n      return data.data.translated_text;\n    } else {\n      throw new Error(data.error || '翻译失败');\n    }\n  } catch (error) {\n    console.error('翻译失败:', error);\n\n    // 降级到内置词典\n    return translateWithDictionary(text);\n  }\n}\n\n/**\r\n * 批量翻译\r\n */\nexport async function batchTranslate(texts, options = {}) {\n  const {\n    translator = 'google',\n    targetLang = 'zh',\n    sourceLang = 'auto'\n  } = options;\n  try {\n    const response = await fetch(`${TRANSLATION_API_BASE}/batch_translate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        texts,\n        translator,\n        target_lang: targetLang,\n        source_lang: sourceLang\n      })\n    });\n    const data = await response.json();\n    if (data.success) {\n      return data.data.results;\n    } else {\n      throw new Error(data.error || '批量翻译失败');\n    }\n  } catch (error) {\n    console.error('批量翻译失败:', error);\n\n    // 降级到逐个翻译\n    const results = [];\n    for (const text of texts) {\n      try {\n        const translated = await translateText(text, options);\n        results.push({\n          original: text,\n          translated,\n          success: true\n        });\n      } catch (e) {\n        results.push({\n          original: text,\n          translated: text,\n          success: false,\n          error: e.message\n        });\n      }\n    }\n    return results;\n  }\n}\n\n/**\r\n * 内置词典翻译（降级方案）\r\n */\nfunction translateWithDictionary(text) {\n  const dictionary = {\n    // 质量类\n    'masterpiece': '杰作',\n    'best quality': '最佳质量',\n    'ultra detailed': '超详细',\n    'high resolution': '高分辨率',\n    'professional': '专业级',\n    '8k wallpaper': '8K壁纸',\n    '4k': '4K',\n    'hdr': 'HDR',\n    // 人物类\n    'beautiful girl': '美丽女孩',\n    'cute girl': '可爱女孩',\n    'handsome boy': '英俊男孩',\n    'pretty woman': '漂亮女性',\n    'strong man': '强壮男性',\n    'elegant lady': '优雅女士',\n    'cute': '可爱',\n    'beautiful': '美丽',\n    'handsome': '英俊',\n    'pretty': '漂亮',\n    // 风格类\n    'anime style': '动漫风格',\n    'realistic': '写实',\n    'photorealistic': '照片级写实',\n    'oil painting': '油画',\n    'watercolor': '水彩',\n    'digital art': '数字艺术',\n    'sketch': '素描',\n    'cartoon': '卡通',\n    // 光照类\n    'cinematic lighting': '电影级光照',\n    'soft lighting': '柔和光照',\n    'dramatic lighting': '戏剧性光照',\n    'natural lighting': '自然光照',\n    'studio lighting': '摄影棚光照',\n    // 表情动作\n    'smile': '微笑',\n    'happy': '开心',\n    'sad': '悲伤',\n    'angry': '愤怒',\n    'surprised': '惊讶',\n    'standing': '站立',\n    'sitting': '坐着',\n    'walking': '行走',\n    'running': '奔跑'\n  };\n\n  // 提取纯文本（去除权重和括号）\n  const cleanText = text.replace(/^\\(+|\\)+$/g, '') // 移除外层括号\n  .replace(/^\\{+|\\}+$/g, '') // 移除外层花括号\n  .replace(/^\\[+|\\]+$/g, '') // 移除外层方括号\n  .replace(/:[\\d.]+$/, '') // 移除权重\n  .trim();\n  return dictionary[cleanText.toLowerCase()] || cleanText;\n}\n\n/**\r\n * 检测文本语言\r\n */\nexport function detectLanguage(text) {\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\n  return chineseRegex.test(text) ? 'zh' : 'en';\n}\n\n/**\r\n * 翻译标签（兼容原有API）\r\n */\nexport async function translateTag(tag, options = {}) {\n  return translateText(tag, options);\n}\nexport default {\n  getAvailableTranslators,\n  testTranslator,\n  translateText,\n  translateTag,\n  batchTranslate,\n  detectLanguage\n};","map":{"version":3,"names":["TRANSLATION_API_BASE","getAvailableTranslators","response","fetch","data","json","success","Error","error","console","name","description","status","testTranslator","translator","method","headers","body","JSON","stringify","message","translateText","text","options","targetLang","sourceLang","target_lang","source_lang","translated_text","translateWithDictionary","batchTranslate","texts","results","translated","push","original","e","dictionary","cleanText","replace","trim","toLowerCase","detectLanguage","chineseRegex","test","translateTag","tag"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/translationService.js"],"sourcesContent":["/**\r\n * 翻译服务 - 集成多种翻译引擎\r\n * 基于Python translators库\r\n */\r\n\r\nconst TRANSLATION_API_BASE = 'http://localhost:5000/api';\r\n\r\n/**\r\n * 获取可用的翻译引擎列表\r\n */\r\nexport async function getAvailableTranslators() {\r\n  try {\r\n    const response = await fetch(`${TRANSLATION_API_BASE}/translators`);\r\n    const data = await response.json();\r\n    \r\n    if (data.success) {\r\n      return data.data;\r\n    } else {\r\n      throw new Error(data.error || '获取翻译引擎失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取翻译引擎失败:', error);\r\n    // 返回默认的翻译引擎列表\r\n    return {\r\n      'google': {\r\n        name: 'Google翻译',\r\n        description: '支持134种语言，质量高',\r\n        status: 'stable'\r\n      },\r\n      'baidu': {\r\n        name: '百度翻译',\r\n        description: '支持201种语言，中文效果好',\r\n        status: 'stable'\r\n      },\r\n      'alibaba': {\r\n        name: '阿里翻译',\r\n        description: '支持221种语言，支持专业领域',\r\n        status: 'stable'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 测试翻译引擎可用性\r\n */\r\nexport async function testTranslator(translator) {\r\n  try {\r\n    const response = await fetch(`${TRANSLATION_API_BASE}/test_translator`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ translator }),\r\n    });\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`测试翻译引擎 ${translator} 失败:`, error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      data: {\r\n        translator,\r\n        status: 'unavailable'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 翻译单个文本\r\n */\r\nexport async function translateText(text, options = {}) {\r\n  const {\r\n    translator = 'google',\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto'\r\n  } = options;\r\n\r\n  try {\r\n    const response = await fetch(`${TRANSLATION_API_BASE}/translate`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        text,\r\n        translator,\r\n        target_lang: targetLang,\r\n        source_lang: sourceLang\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (data.success) {\r\n      return data.data.translated_text;\r\n    } else {\r\n      throw new Error(data.error || '翻译失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('翻译失败:', error);\r\n    \r\n    // 降级到内置词典\r\n    return translateWithDictionary(text);\r\n  }\r\n}\r\n\r\n/**\r\n * 批量翻译\r\n */\r\nexport async function batchTranslate(texts, options = {}) {\r\n  const {\r\n    translator = 'google',\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto'\r\n  } = options;\r\n\r\n  try {\r\n    const response = await fetch(`${TRANSLATION_API_BASE}/batch_translate`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        texts,\r\n        translator,\r\n        target_lang: targetLang,\r\n        source_lang: sourceLang\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (data.success) {\r\n      return data.data.results;\r\n    } else {\r\n      throw new Error(data.error || '批量翻译失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('批量翻译失败:', error);\r\n    \r\n    // 降级到逐个翻译\r\n    const results = [];\r\n    for (const text of texts) {\r\n      try {\r\n        const translated = await translateText(text, options);\r\n        results.push({\r\n          original: text,\r\n          translated,\r\n          success: true\r\n        });\r\n      } catch (e) {\r\n        results.push({\r\n          original: text,\r\n          translated: text,\r\n          success: false,\r\n          error: e.message\r\n        });\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n}\r\n\r\n/**\r\n * 内置词典翻译（降级方案）\r\n */\r\nfunction translateWithDictionary(text) {\r\n  const dictionary = {\r\n    // 质量类\r\n    'masterpiece': '杰作',\r\n    'best quality': '最佳质量',\r\n    'ultra detailed': '超详细',\r\n    'high resolution': '高分辨率',\r\n    'professional': '专业级',\r\n    '8k wallpaper': '8K壁纸',\r\n    '4k': '4K',\r\n    'hdr': 'HDR',\r\n    \r\n    // 人物类\r\n    'beautiful girl': '美丽女孩',\r\n    'cute girl': '可爱女孩',\r\n    'handsome boy': '英俊男孩',\r\n    'pretty woman': '漂亮女性',\r\n    'strong man': '强壮男性',\r\n    'elegant lady': '优雅女士',\r\n    'cute': '可爱',\r\n    'beautiful': '美丽',\r\n    'handsome': '英俊',\r\n    'pretty': '漂亮',\r\n    \r\n    // 风格类\r\n    'anime style': '动漫风格',\r\n    'realistic': '写实',\r\n    'photorealistic': '照片级写实',\r\n    'oil painting': '油画',\r\n    'watercolor': '水彩',\r\n    'digital art': '数字艺术',\r\n    'sketch': '素描',\r\n    'cartoon': '卡通',\r\n    \r\n    // 光照类\r\n    'cinematic lighting': '电影级光照',\r\n    'soft lighting': '柔和光照',\r\n    'dramatic lighting': '戏剧性光照',\r\n    'natural lighting': '自然光照',\r\n    'studio lighting': '摄影棚光照',\r\n    \r\n    // 表情动作\r\n    'smile': '微笑',\r\n    'happy': '开心',\r\n    'sad': '悲伤',\r\n    'angry': '愤怒',\r\n    'surprised': '惊讶',\r\n    'standing': '站立',\r\n    'sitting': '坐着',\r\n    'walking': '行走',\r\n    'running': '奔跑'\r\n  };\r\n\r\n  // 提取纯文本（去除权重和括号）\r\n  const cleanText = text\r\n    .replace(/^\\(+|\\)+$/g, '')  // 移除外层括号\r\n    .replace(/^\\{+|\\}+$/g, '')  // 移除外层花括号\r\n    .replace(/^\\[+|\\]+$/g, '')  // 移除外层方括号\r\n    .replace(/:[\\d.]+$/, '')    // 移除权重\r\n    .trim();\r\n\r\n  return dictionary[cleanText.toLowerCase()] || cleanText;\r\n}\r\n\r\n/**\r\n * 检测文本语言\r\n */\r\nexport function detectLanguage(text) {\r\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\r\n  return chineseRegex.test(text) ? 'zh' : 'en';\r\n}\r\n\r\n/**\r\n * 翻译标签（兼容原有API）\r\n */\r\nexport async function translateTag(tag, options = {}) {\r\n  return translateText(tag, options);\r\n}\r\n\r\nexport default {\r\n  getAvailableTranslators,\r\n  testTranslator,\r\n  translateText,\r\n  translateTag,\r\n  batchTranslate,\r\n  detectLanguage\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}