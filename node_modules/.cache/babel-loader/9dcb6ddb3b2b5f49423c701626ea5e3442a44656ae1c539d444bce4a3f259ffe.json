{"ast":null,"code":"/**\r\n * 阿里云翻译服务\r\n * 使用阿里云机器翻译免费API\r\n */\n\n// 阿里云翻译API配置\nconst ALI_TRANSLATE_CONFIG = {\n  // 使用阿里云免费翻译API\n  BASE_URL: 'https://fanyi.sogou.com/reventondc/synthesis',\n  // 备用API - 有道翻译\n  YOUDAO_URL: 'https://fanyi.youdao.com/translate_o',\n  // 百度翻译\n  BAIDU_URL: 'https://fanyi-api.baidu.com/api/trans/vip/translate'\n};\n\n/**\r\n * 检测文本语言\r\n * @param {string} text - 要检测的文本\r\n * @returns {string} - 'zh' 或 'en'\r\n */\nexport function detectLanguage(text) {\n  // 检测中文字符\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\n  return chineseRegex.test(text) ? 'zh' : 'en';\n}\n\n/**\r\n * 使用搜狗翻译API（免费）\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} from - 源语言\r\n * @param {string} to - 目标语言\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nasync function sogouTranslate(text, from, to) {\n  try {\n    const response = await fetch('https://fanyi.sogou.com/reventondc/synthesis', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Referer': 'https://fanyi.sogou.com/',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: new URLSearchParams({\n        from: from,\n        to: to,\n        text: text,\n        client: 'pc',\n        fr: 'browser_pc',\n        needQc: '1'\n      })\n    });\n    const data = await response.json();\n    if (data.errorCode === '0' && data.translate) {\n      return data.translate.dit;\n    }\n    throw new Error('搜狗翻译失败');\n  } catch (error) {\n    console.warn('搜狗翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * 使用百度翻译API（免费额度）\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} from - 源语言\r\n * @param {string} to - 目标语言\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nasync function baiduTranslate(text, from, to) {\n  try {\n    // 这里需要配置百度翻译的appid和密钥\n    // 由于是演示，使用模拟翻译\n    return simulateTranslation(text, to);\n  } catch (error) {\n    console.warn('百度翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * 模拟翻译（备用方案）\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\nfunction simulateTranslation(text, targetLang) {\n  const translations = {\n    // 英文到中文\n    'masterpiece': '杰作',\n    'best quality': '最佳质量',\n    'ultra detailed': '超详细',\n    'high resolution': '高分辨率',\n    'professional': '专业级',\n    '8k wallpaper': '8K壁纸',\n    'beautiful girl': '美丽女孩',\n    'cute': '可爱',\n    'kawaii': '萌',\n    'anime style': '动漫风格',\n    'realistic': '写实',\n    'photorealistic': '照片级写实',\n    'oil painting': '油画',\n    'watercolor': '水彩',\n    'digital art': '数字艺术',\n    'cinematic lighting': '电影级光照',\n    'soft lighting': '柔和光照',\n    'dramatic lighting': '戏剧性光照',\n    'golden hour': '黄金时刻',\n    'perfect composition': '完美构图',\n    'dynamic pose': '动态姿势',\n    'close-up': '特写',\n    'wide shot': '远景',\n    'depth of field': '景深',\n    'bokeh': '虚化',\n    'sharp focus': '锐利对焦',\n    'motion blur': '运动模糊',\n    // 中文到英文\n    '杰作': 'masterpiece',\n    '最佳质量': 'best quality',\n    '超详细': 'ultra detailed',\n    '高分辨率': 'high resolution',\n    '专业级': 'professional',\n    '8K壁纸': '8k wallpaper',\n    '美丽女孩': 'beautiful girl',\n    '可爱': 'cute',\n    '萌': 'kawaii',\n    '动漫风格': 'anime style',\n    '写实': 'realistic',\n    '照片级写实': 'photorealistic',\n    '油画': 'oil painting',\n    '水彩': 'watercolor',\n    '数字艺术': 'digital art',\n    '电影级光照': 'cinematic lighting',\n    '柔和光照': 'soft lighting',\n    '戏剧性光照': 'dramatic lighting',\n    '黄金时刻': 'golden hour',\n    '完美构图': 'perfect composition',\n    '动态姿势': 'dynamic pose',\n    '特写': 'close-up',\n    '远景': 'wide shot',\n    '景深': 'depth of field',\n    '虚化': 'bokeh',\n    '锐利对焦': 'sharp focus',\n    '运动模糊': 'motion blur'\n  };\n  let result = text;\n\n  // 按词典进行替换\n  Object.entries(translations).forEach(([source, target]) => {\n    const regex = new RegExp(`\\\\b${source.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi');\n    result = result.replace(regex, target);\n  });\n  return result;\n}\n\n/**\r\n * 智能分词翻译\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\nfunction smartTranslate(text, targetLang) {\n  // 分割文本为标签\n  const tags = text.split(/[,，\\s]+/).filter(tag => tag.trim());\n  const translatedTags = tags.map(tag => {\n    const trimmedTag = tag.trim();\n\n    // 处理权重标记\n    const weightMatch = trimmedTag.match(/^\\((.+?)(?::([0-9.]+))?\\)$/);\n    if (weightMatch) {\n      const innerText = weightMatch[1];\n      const weight = weightMatch[2] || '';\n      const translatedInner = simulateTranslation(innerText, targetLang);\n      return weight ? `(${translatedInner}:${weight})` : `(${translatedInner})`;\n    }\n\n    // 处理双括号权重\n    const doubleBracketMatch = trimmedTag.match(/^\\(\\((.+?)\\)\\)$/);\n    if (doubleBracketMatch) {\n      const innerText = doubleBracketMatch[1];\n      const translatedInner = simulateTranslation(innerText, targetLang);\n      return `((${translatedInner}))`;\n    }\n\n    // 处理方括号权重\n    const bracketMatch = trimmedTag.match(/^\\[(.+?)\\]$/);\n    if (bracketMatch) {\n      const innerText = bracketMatch[1];\n      const translatedInner = simulateTranslation(innerText, targetLang);\n      return `[${translatedInner}]`;\n    }\n\n    // 普通翻译\n    return simulateTranslation(trimmedTag, targetLang);\n  });\n  return translatedTags.join(', ');\n}\n\n/**\r\n * 主翻译函数\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言，可选 'auto', 'zh', 'en'\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nexport async function translateText(text, targetLang = 'auto') {\n  if (!text || !text.trim()) {\n    return '';\n  }\n  const sourceLang = detectLanguage(text);\n\n  // 自动检测目标语言\n  if (targetLang === 'auto') {\n    targetLang = sourceLang === 'zh' ? 'en' : 'zh';\n  }\n\n  // 如果源语言和目标语言相同，直接返回\n  if (sourceLang === targetLang) {\n    return text;\n  }\n  try {\n    // 尝试使用搜狗翻译\n    const from = sourceLang === 'zh' ? 'zh-CHS' : 'en';\n    const to = targetLang === 'zh' ? 'zh-CHS' : 'en';\n    try {\n      const result = await sogouTranslate(text, from, to);\n      return result;\n    } catch (error) {\n      // 搜狗翻译失败，使用模拟翻译\n      console.warn('使用备用翻译:', error);\n      return smartTranslate(text, targetLang);\n    }\n  } catch (error) {\n    console.error('翻译失败:', error);\n    return text; // 翻译失败时返回原文\n  }\n}\n\n/**\r\n * 翻译单个标签\r\n * @param {string} tag - 要翻译的标签\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nexport async function translateTag(tag) {\n  return await translateText(tag);\n}\n\n/**\r\n * 批量翻译标签\r\n * @param {string[]} tags - 要翻译的标签数组\r\n * @returns {Promise<string[]>} - 翻译结果数组\r\n */\nexport async function translateTags(tags) {\n  const promises = tags.map(tag => translateTag(tag));\n  return Promise.all(promises);\n}\nexport default {\n  translateText,\n  translateTag,\n  translateTags,\n  detectLanguage\n};","map":{"version":3,"names":["ALI_TRANSLATE_CONFIG","BASE_URL","YOUDAO_URL","BAIDU_URL","detectLanguage","text","chineseRegex","test","sogouTranslate","from","to","response","fetch","method","headers","body","URLSearchParams","client","fr","needQc","data","json","errorCode","translate","dit","Error","error","console","warn","baiduTranslate","simulateTranslation","targetLang","translations","result","Object","entries","forEach","source","target","regex","RegExp","replace","smartTranslate","tags","split","filter","tag","trim","translatedTags","map","trimmedTag","weightMatch","match","innerText","weight","translatedInner","doubleBracketMatch","bracketMatch","join","translateText","sourceLang","translateTag","translateTags","promises","Promise","all"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/aliTranslationService.js"],"sourcesContent":["/**\r\n * 阿里云翻译服务\r\n * 使用阿里云机器翻译免费API\r\n */\r\n\r\n// 阿里云翻译API配置\r\nconst ALI_TRANSLATE_CONFIG = {\r\n  // 使用阿里云免费翻译API\r\n  BASE_URL: 'https://fanyi.sogou.com/reventondc/synthesis',\r\n  // 备用API - 有道翻译\r\n  YOUDAO_URL: 'https://fanyi.youdao.com/translate_o',\r\n  // 百度翻译\r\n  BAIDU_URL: 'https://fanyi-api.baidu.com/api/trans/vip/translate'\r\n};\r\n\r\n/**\r\n * 检测文本语言\r\n * @param {string} text - 要检测的文本\r\n * @returns {string} - 'zh' 或 'en'\r\n */\r\nexport function detectLanguage(text) {\r\n  // 检测中文字符\r\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\r\n  return chineseRegex.test(text) ? 'zh' : 'en';\r\n}\r\n\r\n/**\r\n * 使用搜狗翻译API（免费）\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} from - 源语言\r\n * @param {string} to - 目标语言\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nasync function sogouTranslate(text, from, to) {\r\n  try {\r\n    const response = await fetch('https://fanyi.sogou.com/reventondc/synthesis', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Referer': 'https://fanyi.sogou.com/',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      },\r\n      body: new URLSearchParams({\r\n        from: from,\r\n        to: to,\r\n        text: text,\r\n        client: 'pc',\r\n        fr: 'browser_pc',\r\n        needQc: '1'\r\n      })\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (data.errorCode === '0' && data.translate) {\r\n      return data.translate.dit;\r\n    }\r\n    throw new Error('搜狗翻译失败');\r\n  } catch (error) {\r\n    console.warn('搜狗翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 使用百度翻译API（免费额度）\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} from - 源语言\r\n * @param {string} to - 目标语言\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nasync function baiduTranslate(text, from, to) {\r\n  try {\r\n    // 这里需要配置百度翻译的appid和密钥\r\n    // 由于是演示，使用模拟翻译\r\n    return simulateTranslation(text, to);\r\n  } catch (error) {\r\n    console.warn('百度翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 模拟翻译（备用方案）\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\r\nfunction simulateTranslation(text, targetLang) {\r\n  const translations = {\r\n    // 英文到中文\r\n    'masterpiece': '杰作',\r\n    'best quality': '最佳质量',\r\n    'ultra detailed': '超详细',\r\n    'high resolution': '高分辨率',\r\n    'professional': '专业级',\r\n    '8k wallpaper': '8K壁纸',\r\n    'beautiful girl': '美丽女孩',\r\n    'cute': '可爱',\r\n    'kawaii': '萌',\r\n    'anime style': '动漫风格',\r\n    'realistic': '写实',\r\n    'photorealistic': '照片级写实',\r\n    'oil painting': '油画',\r\n    'watercolor': '水彩',\r\n    'digital art': '数字艺术',\r\n    'cinematic lighting': '电影级光照',\r\n    'soft lighting': '柔和光照',\r\n    'dramatic lighting': '戏剧性光照',\r\n    'golden hour': '黄金时刻',\r\n    'perfect composition': '完美构图',\r\n    'dynamic pose': '动态姿势',\r\n    'close-up': '特写',\r\n    'wide shot': '远景',\r\n    'depth of field': '景深',\r\n    'bokeh': '虚化',\r\n    'sharp focus': '锐利对焦',\r\n    'motion blur': '运动模糊',\r\n    \r\n    // 中文到英文\r\n    '杰作': 'masterpiece',\r\n    '最佳质量': 'best quality',\r\n    '超详细': 'ultra detailed',\r\n    '高分辨率': 'high resolution',\r\n    '专业级': 'professional',\r\n    '8K壁纸': '8k wallpaper',\r\n    '美丽女孩': 'beautiful girl',\r\n    '可爱': 'cute',\r\n    '萌': 'kawaii',\r\n    '动漫风格': 'anime style',\r\n    '写实': 'realistic',\r\n    '照片级写实': 'photorealistic',\r\n    '油画': 'oil painting',\r\n    '水彩': 'watercolor',\r\n    '数字艺术': 'digital art',\r\n    '电影级光照': 'cinematic lighting',\r\n    '柔和光照': 'soft lighting',\r\n    '戏剧性光照': 'dramatic lighting',\r\n    '黄金时刻': 'golden hour',\r\n    '完美构图': 'perfect composition',\r\n    '动态姿势': 'dynamic pose',\r\n    '特写': 'close-up',\r\n    '远景': 'wide shot',\r\n    '景深': 'depth of field',\r\n    '虚化': 'bokeh',\r\n    '锐利对焦': 'sharp focus',\r\n    '运动模糊': 'motion blur'\r\n  };\r\n\r\n  let result = text;\r\n  \r\n  // 按词典进行替换\r\n  Object.entries(translations).forEach(([source, target]) => {\r\n    const regex = new RegExp(`\\\\b${source.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi');\r\n    result = result.replace(regex, target);\r\n  });\r\n  \r\n  return result;\r\n}\r\n\r\n/**\r\n * 智能分词翻译\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\r\nfunction smartTranslate(text, targetLang) {\r\n  // 分割文本为标签\r\n  const tags = text.split(/[,，\\s]+/).filter(tag => tag.trim());\r\n  \r\n  const translatedTags = tags.map(tag => {\r\n    const trimmedTag = tag.trim();\r\n    \r\n    // 处理权重标记\r\n    const weightMatch = trimmedTag.match(/^\\((.+?)(?::([0-9.]+))?\\)$/);\r\n    if (weightMatch) {\r\n      const innerText = weightMatch[1];\r\n      const weight = weightMatch[2] || '';\r\n      const translatedInner = simulateTranslation(innerText, targetLang);\r\n      return weight ? `(${translatedInner}:${weight})` : `(${translatedInner})`;\r\n    }\r\n    \r\n    // 处理双括号权重\r\n    const doubleBracketMatch = trimmedTag.match(/^\\(\\((.+?)\\)\\)$/);\r\n    if (doubleBracketMatch) {\r\n      const innerText = doubleBracketMatch[1];\r\n      const translatedInner = simulateTranslation(innerText, targetLang);\r\n      return `((${translatedInner}))`;\r\n    }\r\n    \r\n    // 处理方括号权重\r\n    const bracketMatch = trimmedTag.match(/^\\[(.+?)\\]$/);\r\n    if (bracketMatch) {\r\n      const innerText = bracketMatch[1];\r\n      const translatedInner = simulateTranslation(innerText, targetLang);\r\n      return `[${translatedInner}]`;\r\n    }\r\n    \r\n    // 普通翻译\r\n    return simulateTranslation(trimmedTag, targetLang);\r\n  });\r\n  \r\n  return translatedTags.join(', ');\r\n}\r\n\r\n/**\r\n * 主翻译函数\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言，可选 'auto', 'zh', 'en'\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nexport async function translateText(text, targetLang = 'auto') {\r\n  if (!text || !text.trim()) {\r\n    return '';\r\n  }\r\n\r\n  const sourceLang = detectLanguage(text);\r\n  \r\n  // 自动检测目标语言\r\n  if (targetLang === 'auto') {\r\n    targetLang = sourceLang === 'zh' ? 'en' : 'zh';\r\n  }\r\n  \r\n  // 如果源语言和目标语言相同，直接返回\r\n  if (sourceLang === targetLang) {\r\n    return text;\r\n  }\r\n\r\n  try {\r\n    // 尝试使用搜狗翻译\r\n    const from = sourceLang === 'zh' ? 'zh-CHS' : 'en';\r\n    const to = targetLang === 'zh' ? 'zh-CHS' : 'en';\r\n    \r\n    try {\r\n      const result = await sogouTranslate(text, from, to);\r\n      return result;\r\n    } catch (error) {\r\n      // 搜狗翻译失败，使用模拟翻译\r\n      console.warn('使用备用翻译:', error);\r\n      return smartTranslate(text, targetLang);\r\n    }\r\n  } catch (error) {\r\n    console.error('翻译失败:', error);\r\n    return text; // 翻译失败时返回原文\r\n  }\r\n}\r\n\r\n/**\r\n * 翻译单个标签\r\n * @param {string} tag - 要翻译的标签\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nexport async function translateTag(tag) {\r\n  return await translateText(tag);\r\n}\r\n\r\n/**\r\n * 批量翻译标签\r\n * @param {string[]} tags - 要翻译的标签数组\r\n * @returns {Promise<string[]>} - 翻译结果数组\r\n */\r\nexport async function translateTags(tags) {\r\n  const promises = tags.map(tag => translateTag(tag));\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport default {\r\n  translateText,\r\n  translateTag,\r\n  translateTags,\r\n  detectLanguage\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}