{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport aiService from '../services/aiService';\nimport localPromptService from '../services/localPromptService';\nimport { validateInput, sanitizePrompt } from '../utils/validation';\nimport { copyToClipboard } from '../utils/clipboard';\n\n/**\r\n * 提示词生成器Hook\r\n */\nexport const usePromptGenerator = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [selectedStyle, setSelectedStyle] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationSource, setGenerationSource] = useState('');\n  const [generationCount, setGenerationCount] = useState(0);\n  const [apiError, setApiError] = useState('');\n  const [validationErrors, setValidationErrors] = useState([]);\n\n  /**\r\n   * 生成智能提示词\r\n   */\n  const generatePrompt = useCallback(async () => {\n    // 验证输入\n    const validation = validateInput(inputText);\n    if (!validation.isValid) {\n      setValidationErrors(validation.errors);\n      return;\n    }\n    setValidationErrors([]);\n    setIsGenerating(true);\n    setApiError('');\n    try {\n      // 尝试使用AI服务\n      const result = await aiService.generatePrompt(inputText, selectedStyle);\n      const cleanedPrompt = sanitizePrompt(result.content);\n      setGeneratedPrompt(cleanedPrompt);\n      setGenerationSource(result.source);\n      setGenerationCount(prev => prev + 1);\n    } catch (error) {\n      console.warn('AI服务失败，降级到本地服务:', error);\n      try {\n        // 降级到本地服务\n        const result = localPromptService.generatePrompt(inputText, selectedStyle);\n        const cleanedPrompt = sanitizePrompt(result.content);\n        setGeneratedPrompt(cleanedPrompt);\n        setGenerationSource(result.source);\n        setGenerationCount(prev => prev + 1);\n        setApiError('AI服务暂时不可用，已使用本地增强算法生成');\n        setTimeout(() => setApiError(''), 5000);\n      } catch (localError) {\n        console.error('本地服务也失败:', localError);\n        setApiError('生成失败，请稍后重试');\n        setTimeout(() => setApiError(''), 5000);\n      }\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [inputText, selectedStyle]);\n\n  /**\r\n   * 复制提示词到剪贴板\r\n   */\n  const copyPrompt = useCallback(async (text = generatedPrompt) => {\n    const success = await copyToClipboard(text);\n    return success;\n  }, [generatedPrompt]);\n\n  /**\r\n   * 重置生成器状态\r\n   */\n  const resetGenerator = useCallback(() => {\n    setInputText('');\n    setGeneratedPrompt('');\n    setSelectedStyle('');\n    setGenerationSource('');\n    setGenerationCount(0);\n    setApiError('');\n    setValidationErrors([]);\n  }, []);\n\n  /**\r\n   * 插入标签到输入框\r\n   */\n  const insertTag = useCallback(tag => {\n    const tagText = typeof tag === 'object' ? tag.en : tag;\n    const newText = inputText ? `${inputText}, ${tagText}` : tagText;\n    setInputText(newText);\n  }, [inputText]);\n  return {\n    // 状态\n    inputText,\n    generatedPrompt,\n    selectedStyle,\n    isGenerating,\n    generationSource,\n    generationCount,\n    apiError,\n    validationErrors,\n    // 操作函数\n    setInputText,\n    setSelectedStyle,\n    generatePrompt,\n    copyPrompt,\n    resetGenerator,\n    insertTag\n  };\n};\n_s(usePromptGenerator, \"uoam017sjzB3hA9KdlkaRBKgWL4=\");","map":{"version":3,"names":["useState","useCallback","aiService","localPromptService","validateInput","sanitizePrompt","copyToClipboard","usePromptGenerator","_s","inputText","setInputText","generatedPrompt","setGeneratedPrompt","selectedStyle","setSelectedStyle","isGenerating","setIsGenerating","generationSource","setGenerationSource","generationCount","setGenerationCount","apiError","setApiError","validationErrors","setValidationErrors","generatePrompt","validation","isValid","errors","result","cleanedPrompt","content","source","prev","error","console","warn","setTimeout","localError","copyPrompt","text","success","resetGenerator","insertTag","tag","tagText","en","newText"],"sources":["C:/Users/wjx19/Documents/GitHub/AI-Art-Station/src/hooks/usePromptGenerator.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport aiService from '../services/aiService';\r\nimport localPromptService from '../services/localPromptService';\r\nimport { validateInput, sanitizePrompt } from '../utils/validation';\r\nimport { copyToClipboard } from '../utils/clipboard';\r\n\r\n/**\r\n * 提示词生成器Hook\r\n */\r\nexport const usePromptGenerator = () => {\r\n  const [inputText, setInputText] = useState('');\r\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\r\n  const [selectedStyle, setSelectedStyle] = useState('');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [generationSource, setGenerationSource] = useState('');\r\n  const [generationCount, setGenerationCount] = useState(0);\r\n  const [apiError, setApiError] = useState('');\r\n  const [validationErrors, setValidationErrors] = useState([]);\r\n\r\n  /**\r\n   * 生成智能提示词\r\n   */\r\n  const generatePrompt = useCallback(async () => {\r\n    // 验证输入\r\n    const validation = validateInput(inputText);\r\n    if (!validation.isValid) {\r\n      setValidationErrors(validation.errors);\r\n      return;\r\n    }\r\n    \r\n    setValidationErrors([]);\r\n    setIsGenerating(true);\r\n    setApiError('');\r\n\r\n    try {\r\n      // 尝试使用AI服务\r\n      const result = await aiService.generatePrompt(inputText, selectedStyle);\r\n      const cleanedPrompt = sanitizePrompt(result.content);\r\n      \r\n      setGeneratedPrompt(cleanedPrompt);\r\n      setGenerationSource(result.source);\r\n      setGenerationCount(prev => prev + 1);\r\n      \r\n    } catch (error) {\r\n      console.warn('AI服务失败，降级到本地服务:', error);\r\n      \r\n      try {\r\n        // 降级到本地服务\r\n        const result = localPromptService.generatePrompt(inputText, selectedStyle);\r\n        const cleanedPrompt = sanitizePrompt(result.content);\r\n        \r\n        setGeneratedPrompt(cleanedPrompt);\r\n        setGenerationSource(result.source);\r\n        setGenerationCount(prev => prev + 1);\r\n        setApiError('AI服务暂时不可用，已使用本地增强算法生成');\r\n        \r\n        setTimeout(() => setApiError(''), 5000);\r\n        \r\n      } catch (localError) {\r\n        console.error('本地服务也失败:', localError);\r\n        setApiError('生成失败，请稍后重试');\r\n        setTimeout(() => setApiError(''), 5000);\r\n      }\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  }, [inputText, selectedStyle]);\r\n\r\n  /**\r\n   * 复制提示词到剪贴板\r\n   */\r\n  const copyPrompt = useCallback(async (text = generatedPrompt) => {\r\n    const success = await copyToClipboard(text);\r\n    return success;\r\n  }, [generatedPrompt]);\r\n\r\n  /**\r\n   * 重置生成器状态\r\n   */\r\n  const resetGenerator = useCallback(() => {\r\n    setInputText('');\r\n    setGeneratedPrompt('');\r\n    setSelectedStyle('');\r\n    setGenerationSource('');\r\n    setGenerationCount(0);\r\n    setApiError('');\r\n    setValidationErrors([]);\r\n  }, []);\r\n\r\n  /**\r\n   * 插入标签到输入框\r\n   */\r\n  const insertTag = useCallback((tag) => {\r\n    const tagText = typeof tag === 'object' ? tag.en : tag;\r\n    const newText = inputText ? `${inputText}, ${tagText}` : tagText;\r\n    setInputText(newText);\r\n  }, [inputText]);\r\n\r\n  return {\r\n    // 状态\r\n    inputText,\r\n    generatedPrompt,\r\n    selectedStyle,\r\n    isGenerating,\r\n    generationSource,\r\n    generationCount,\r\n    apiError,\r\n    validationErrors,\r\n    \r\n    // 操作函数\r\n    setInputText,\r\n    setSelectedStyle,\r\n    generatePrompt,\r\n    copyPrompt,\r\n    resetGenerator,\r\n    insertTag\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}