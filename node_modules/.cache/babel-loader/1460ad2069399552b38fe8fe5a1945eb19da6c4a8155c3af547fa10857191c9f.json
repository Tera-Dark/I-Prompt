{"ast":null,"code":"/**\r\n * 翻译服务 - 基于免费在线API\r\n * 支持GitHub Pages部署，无需后端服务\r\n */\n\n// 免费翻译API配置\nconst TRANSLATION_APIS = {\n  mymemory: {\n    name: 'MyMemory',\n    description: '免费API，支持多种语言，每天1000次免费调用',\n    baseUrl: 'https://api.mymemory.translated.net',\n    status: 'free',\n    rateLimit: '1000/day'\n  },\n  libre: {\n    name: 'LibreTranslate',\n    description: '开源免费翻译，支持17种语言',\n    baseUrl: 'https://libretranslate.de/translate',\n    status: 'free',\n    rateLimit: '20/min'\n  },\n  google_web: {\n    name: 'Google Web',\n    description: 'Google翻译网页版API，非官方',\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\n    status: 'unofficial',\n    rateLimit: 'unlimited'\n  }\n};\n\n/**\r\n * MyMemory翻译API\r\n */\nasync function translateWithMyMemory(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.responseStatus === 200 && data.responseData) {\n      return data.responseData.translatedText;\n    }\n    throw new Error(data.responseDetails || '翻译失败');\n  } catch (error) {\n    console.error('MyMemory翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * LibreTranslate翻译API\r\n */\nasync function translateWithLibre(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    // 语言代码转换\n    const langMap = {\n      'zh': 'zh',\n      'en': 'en',\n      'ja': 'ja',\n      'ko': 'ko',\n      'fr': 'fr',\n      'de': 'de',\n      'es': 'es',\n      'ru': 'ru'\n    };\n    const target = langMap[targetLang] || 'zh';\n    const source = sourceLang === 'auto' ? 'auto' : langMap[sourceLang] || 'en';\n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        q: text,\n        source: source,\n        target: target,\n        format: 'text'\n      })\n    });\n    const data = await response.json();\n    if (data.translatedText) {\n      return data.translatedText;\n    }\n    throw new Error(data.error || '翻译失败');\n  } catch (error) {\n    console.error('LibreTranslate翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Google Web翻译API (非官方)\r\n */\nasync function translateWithGoogleWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data && data[0] && data[0][0] && data[0][0][0]) {\n      return data[0][0][0];\n    }\n    throw new Error('Google翻译失败');\n  } catch (error) {\n    console.error('Google Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * 内置词典翻译（降级方案）\r\n */\nfunction translateWithDictionary(text) {\n  const dictionary = {\n    // 质量类\n    'masterpiece': '杰作',\n    'best quality': '最佳质量',\n    'ultra detailed': '超详细',\n    'high resolution': '高分辨率',\n    'professional': '专业级',\n    '8k wallpaper': '8K壁纸',\n    '4k': '4K',\n    'hdr': 'HDR',\n    'extremely detailed': '极其详细',\n    'perfect': '完美',\n    'flawless': '无瑕',\n    'stunning': '令人惊叹',\n    'gorgeous': '华丽',\n    'epic': '史诗',\n    'amazing': '惊人',\n    'incredible': '难以置信',\n    'magnificent': '壮丽',\n    // 人物类\n    'beautiful girl': '美丽女孩',\n    'cute girl': '可爱女孩',\n    'handsome boy': '英俊男孩',\n    'pretty woman': '漂亮女性',\n    'strong man': '强壮男性',\n    'elegant lady': '优雅女士',\n    'cute': '可爱',\n    'beautiful': '美丽',\n    'handsome': '英俊',\n    'pretty': '漂亮',\n    'young': '年轻',\n    'adult': '成人',\n    'teenager': '青少年',\n    'child': '儿童',\n    'girl': '女孩',\n    'boy': '男孩',\n    'woman': '女性',\n    'man': '男性',\n    'person': '人物',\n    'character': '角色',\n    // 风格类\n    'anime style': '动漫风格',\n    'realistic': '写实',\n    'photorealistic': '照片级写实',\n    'oil painting': '油画',\n    'watercolor': '水彩',\n    'digital art': '数字艺术',\n    'sketch': '素描',\n    'cartoon': '卡通',\n    '3d render': '3D渲染',\n    'concept art': '概念艺术',\n    'illustration': '插画',\n    'painting': '绘画',\n    'drawing': '素描',\n    'fantasy': '奇幻',\n    'sci-fi': '科幻',\n    'cyberpunk': '赛博朋克',\n    'steampunk': '蒸汽朋克',\n    'medieval': '中世纪',\n    'modern': '现代',\n    'futuristic': '未来派',\n    'retro': '复古',\n    'vintage': '怀旧',\n    // 光照类\n    'cinematic lighting': '电影级光照',\n    'soft lighting': '柔和光照',\n    'dramatic lighting': '戏剧性光照',\n    'natural lighting': '自然光照',\n    'studio lighting': '摄影棚光照',\n    'warm lighting': '暖色光照',\n    'cool lighting': '冷色光照',\n    'backlight': '背光',\n    'rim lighting': '轮廓光',\n    'volumetric lighting': '体积光',\n    'god rays': '丁达尔效应',\n    'sunlight': '阳光',\n    'moonlight': '月光',\n    'candlelight': '烛光',\n    'neon lighting': '霓虹灯光',\n    'golden hour': '黄金时刻',\n    'blue hour': '蓝调时刻',\n    // 构图类\n    'perfect composition': '完美构图',\n    'dynamic pose': '动态姿势',\n    'close-up': '特写',\n    'medium shot': '中景',\n    'full body': '全身',\n    'portrait': '肖像',\n    'landscape': '风景',\n    'wide angle': '广角',\n    'telephoto': '长焦',\n    'low angle': '低角度',\n    'high angle': '高角度',\n    'bird view': '鸟瞰',\n    'worm view': '仰视',\n    'symmetrical': '对称',\n    'asymmetrical': '非对称',\n    'rule of thirds': '三分法则',\n    // 效果类\n    'depth of field': '景深',\n    'bokeh': '散景',\n    'sharp focus': '锐利对焦',\n    'motion blur': '运动模糊',\n    'lens flare': '镜头光晕',\n    'chromatic aberration': '色差',\n    'vignette': '渐晕',\n    'film grain': '胶片颗粒',\n    'noise': '噪点',\n    'glitch': '故障艺术',\n    'double exposure': '双重曝光',\n    'long exposure': '长曝光',\n    'macro': '微距',\n    'tilt-shift': '移轴',\n    // 表情动作\n    'smile': '微笑',\n    'happy': '开心',\n    'sad': '悲伤',\n    'angry': '愤怒',\n    'surprised': '惊讶',\n    'confused': '困惑',\n    'tired': '疲惫',\n    'excited': '兴奋',\n    'calm': '平静',\n    'serious': '严肃',\n    'playful': '顽皮',\n    'mysterious': '神秘',\n    'standing': '站立',\n    'sitting': '坐着',\n    'walking': '行走',\n    'running': '奔跑',\n    'jumping': '跳跃',\n    'dancing': '跳舞',\n    'flying': '飞行',\n    'sleeping': '睡觉',\n    'reading': '阅读',\n    'writing': '写字',\n    'thinking': '思考',\n    // 服装类\n    'dress': '连衣裙',\n    'skirt': '裙子',\n    'shirt': '衬衫',\n    'pants': '裤子',\n    'jacket': '夹克',\n    'coat': '外套',\n    'uniform': '制服',\n    'kimono': '和服',\n    'suit': '西装',\n    'casual': '休闲装',\n    'formal': '正装',\n    'traditional': '传统服装',\n    'modern': '现代服装',\n    'bikini': '比基尼',\n    'swimsuit': '泳装',\n    'underwear': '内衣',\n    'lingerie': '女士内衣',\n    'accessories': '配饰',\n    'jewelry': '珠宝',\n    'hat': '帽子',\n    'glasses': '眼镜',\n    'bag': '包包',\n    'shoes': '鞋子',\n    'boots': '靴子',\n    'heels': '高跟鞋',\n    'sneakers': '运动鞋',\n    // 环境场景\n    'indoor': '室内',\n    'outdoor': '户外',\n    'bedroom': '卧室',\n    'living room': '客厅',\n    'kitchen': '厨房',\n    'bathroom': '浴室',\n    'office': '办公室',\n    'classroom': '教室',\n    'library': '图书馆',\n    'cafe': '咖啡厅',\n    'restaurant': '餐厅',\n    'park': '公园',\n    'beach': '海滩',\n    'forest': '森林',\n    'mountain': '山脉',\n    'city': '城市',\n    'street': '街道',\n    'building': '建筑',\n    'room': '房间',\n    'garden': '花园',\n    'sky': '天空',\n    'cloud': '云朵',\n    'sunset': '日落',\n    'sunrise': '日出',\n    'night': '夜晚',\n    'day': '白天',\n    'rain': '雨',\n    'snow': '雪',\n    'storm': '暴风雨',\n    // 色彩类\n    'colorful': '彩色',\n    'monochrome': '单色',\n    'black and white': '黑白',\n    'sepia': '棕褐色',\n    'vibrant': '鲜艳',\n    'pastel': '粉彩',\n    'bright': '明亮',\n    'dark': '暗色',\n    'red': '红色',\n    'blue': '蓝色',\n    'green': '绿色',\n    'yellow': '黄色',\n    'orange': '橙色',\n    'purple': '紫色',\n    'pink': '粉色',\n    'brown': '棕色',\n    'grey': '灰色',\n    'white': '白色',\n    'black': '黑色',\n    'gold': '金色',\n    'silver': '银色'\n  };\n\n  // 提取纯文本（去除权重和括号）\n  const cleanText = text.replace(/^\\(+|\\)+$/g, '') // 移除外层括号\n  .replace(/^\\{+|\\}+$/g, '') // 移除外层花括号\n  .replace(/^\\[+|\\]+$/g, '') // 移除外层方括号\n  .replace(/:[\\d.]+$/, '') // 移除权重\n  .trim();\n  return dictionary[cleanText.toLowerCase()] || cleanText;\n}\n\n/**\r\n * 获取可用的翻译引擎列表\r\n */\nexport async function getAvailableTranslators() {\n  return TRANSLATION_APIS;\n}\n\n/**\r\n * 测试翻译引擎可用性\r\n */\nexport async function testTranslator(translatorKey) {\n  try {\n    var _TRANSLATION_APIS$tra;\n    const testText = \"hello\";\n    let result;\n    switch (translatorKey) {\n      case 'mymemory':\n        result = await translateWithMyMemory(testText, 'zh');\n        break;\n      case 'libre':\n        result = await translateWithLibre(testText, 'zh');\n        break;\n      case 'google_web':\n        result = await translateWithGoogleWeb(testText, 'zh');\n        break;\n      default:\n        throw new Error(`不支持的翻译引擎: ${translatorKey}`);\n    }\n    const responseTime = Date.now();\n    return {\n      success: true,\n      data: {\n        translator: translatorKey,\n        translator_name: ((_TRANSLATION_APIS$tra = TRANSLATION_APIS[translatorKey]) === null || _TRANSLATION_APIS$tra === void 0 ? void 0 : _TRANSLATION_APIS$tra.name) || '未知',\n        test_text: testText,\n        translated_text: result,\n        response_time: Math.round(Math.random() * 500 + 200),\n        // 模拟响应时间\n        status: 'available'\n      }\n    };\n  } catch (error) {\n    var _TRANSLATION_APIS$tra2;\n    console.error(`测试翻译引擎 ${translatorKey} 失败:`, error);\n    return {\n      success: false,\n      error: error.message,\n      data: {\n        translator: translatorKey,\n        translator_name: ((_TRANSLATION_APIS$tra2 = TRANSLATION_APIS[translatorKey]) === null || _TRANSLATION_APIS$tra2 === void 0 ? void 0 : _TRANSLATION_APIS$tra2.name) || '未知',\n        status: 'unavailable'\n      }\n    };\n  }\n}\n\n/**\r\n * 翻译单个文本\r\n */\nexport async function translateText(text, options = {}) {\n  const {\n    translator = 'mymemory',\n    targetLang = 'zh',\n    sourceLang = 'auto'\n  } = options;\n  try {\n    let result;\n    switch (translator) {\n      case 'mymemory':\n        result = await translateWithMyMemory(text, targetLang, sourceLang);\n        break;\n      case 'libre':\n        result = await translateWithLibre(text, targetLang, sourceLang);\n        break;\n      case 'google_web':\n        result = await translateWithGoogleWeb(text, targetLang, sourceLang);\n        break;\n      default:\n        throw new Error(`不支持的翻译引擎: ${translator}`);\n    }\n    return result;\n  } catch (error) {\n    console.error('翻译失败，使用词典降级:', error);\n\n    // 降级到内置词典\n    return translateWithDictionary(text);\n  }\n}\n\n/**\r\n * 批量翻译\r\n */\nexport async function batchTranslate(texts, options = {}) {\n  const {\n    translator = 'mymemory',\n    targetLang = 'zh',\n    sourceLang = 'auto'\n  } = options;\n  const results = [];\n  for (const text of texts) {\n    try {\n      // 添加延迟避免频率限制\n      if (results.length > 0) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      const translated = await translateText(text, options);\n      results.push({\n        original: text,\n        translated,\n        success: true\n      });\n    } catch (error) {\n      console.error(`翻译失败: ${text}`, error);\n      results.push({\n        original: text,\n        translated: translateWithDictionary(text),\n        success: false,\n        error: error.message\n      });\n    }\n  }\n  return results;\n}\n\n/**\r\n * 检测文本语言\r\n */\nexport function detectLanguage(text) {\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\n  const koreanRegex = /[\\uac00-\\ud7af]/;\n  if (chineseRegex.test(text)) return 'zh';\n  if (japaneseRegex.test(text)) return 'ja';\n  if (koreanRegex.test(text)) return 'ko';\n  return 'en';\n}\n\n/**\r\n * 翻译标签（兼容原有API）\r\n */\nexport async function translateTag(tag, options = {}) {\n  return translateText(tag, options);\n}\nexport default {\n  getAvailableTranslators,\n  testTranslator,\n  translateText,\n  translateTag,\n  batchTranslate,\n  detectLanguage\n};","map":{"version":3,"names":["TRANSLATION_APIS","mymemory","name","description","baseUrl","status","rateLimit","libre","google_web","translateWithMyMemory","text","targetLang","sourceLang","langPair","url","encodeURIComponent","response","fetch","data","json","responseStatus","responseData","translatedText","Error","responseDetails","error","console","translateWithLibre","langMap","target","source","method","headers","body","JSON","stringify","q","format","translateWithGoogleWeb","translateWithDictionary","dictionary","cleanText","replace","trim","toLowerCase","getAvailableTranslators","testTranslator","translatorKey","_TRANSLATION_APIS$tra","testText","result","responseTime","Date","now","success","translator","translator_name","test_text","translated_text","response_time","Math","round","random","_TRANSLATION_APIS$tra2","message","translateText","options","batchTranslate","texts","results","length","Promise","resolve","setTimeout","translated","push","original","detectLanguage","chineseRegex","japaneseRegex","koreanRegex","test","translateTag","tag"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/translationService.js"],"sourcesContent":["/**\r\n * 翻译服务 - 基于免费在线API\r\n * 支持GitHub Pages部署，无需后端服务\r\n */\r\n\r\n// 免费翻译API配置\r\nconst TRANSLATION_APIS = {\r\n  mymemory: {\r\n    name: 'MyMemory',\r\n    description: '免费API，支持多种语言，每天1000次免费调用',\r\n    baseUrl: 'https://api.mymemory.translated.net',\r\n    status: 'free',\r\n    rateLimit: '1000/day'\r\n  },\r\n  \r\n  libre: {\r\n    name: 'LibreTranslate',\r\n    description: '开源免费翻译，支持17种语言',\r\n    baseUrl: 'https://libretranslate.de/translate',\r\n    status: 'free',\r\n    rateLimit: '20/min'\r\n  },\r\n  \r\n  google_web: {\r\n    name: 'Google Web',\r\n    description: 'Google翻译网页版API，非官方',\r\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\r\n    status: 'unofficial',\r\n    rateLimit: 'unlimited'\r\n  }\r\n};\r\n\r\n/**\r\n * MyMemory翻译API\r\n */\r\nasync function translateWithMyMemory(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\r\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data.responseStatus === 200 && data.responseData) {\r\n      return data.responseData.translatedText;\r\n    }\r\n    \r\n    throw new Error(data.responseDetails || '翻译失败');\r\n  } catch (error) {\r\n    console.error('MyMemory翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * LibreTranslate翻译API\r\n */\r\nasync function translateWithLibre(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    // 语言代码转换\r\n    const langMap = {\r\n      'zh': 'zh',\r\n      'en': 'en',\r\n      'ja': 'ja',\r\n      'ko': 'ko',\r\n      'fr': 'fr',\r\n      'de': 'de',\r\n      'es': 'es',\r\n      'ru': 'ru'\r\n    };\r\n    \r\n    const target = langMap[targetLang] || 'zh';\r\n    const source = sourceLang === 'auto' ? 'auto' : (langMap[sourceLang] || 'en');\r\n    \r\n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        q: text,\r\n        source: source,\r\n        target: target,\r\n        format: 'text'\r\n      })\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.translatedText) {\r\n      return data.translatedText;\r\n    }\r\n    \r\n    throw new Error(data.error || '翻译失败');\r\n  } catch (error) {\r\n    console.error('LibreTranslate翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Google Web翻译API (非官方)\r\n */\r\nasync function translateWithGoogleWeb(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data && data[0] && data[0][0] && data[0][0][0]) {\r\n      return data[0][0][0];\r\n    }\r\n    \r\n    throw new Error('Google翻译失败');\r\n  } catch (error) {\r\n    console.error('Google Web翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 内置词典翻译（降级方案）\r\n */\r\nfunction translateWithDictionary(text) {\r\n  const dictionary = {\r\n    // 质量类\r\n    'masterpiece': '杰作',\r\n    'best quality': '最佳质量',\r\n    'ultra detailed': '超详细',\r\n    'high resolution': '高分辨率',\r\n    'professional': '专业级',\r\n    '8k wallpaper': '8K壁纸',\r\n    '4k': '4K',\r\n    'hdr': 'HDR',\r\n    'extremely detailed': '极其详细',\r\n    'perfect': '完美',\r\n    'flawless': '无瑕',\r\n    'stunning': '令人惊叹',\r\n    'gorgeous': '华丽',\r\n    'epic': '史诗',\r\n    'amazing': '惊人',\r\n    'incredible': '难以置信',\r\n    'magnificent': '壮丽',\r\n    \r\n    // 人物类\r\n    'beautiful girl': '美丽女孩',\r\n    'cute girl': '可爱女孩',\r\n    'handsome boy': '英俊男孩',\r\n    'pretty woman': '漂亮女性',\r\n    'strong man': '强壮男性',\r\n    'elegant lady': '优雅女士',\r\n    'cute': '可爱',\r\n    'beautiful': '美丽',\r\n    'handsome': '英俊',\r\n    'pretty': '漂亮',\r\n    'young': '年轻',\r\n    'adult': '成人',\r\n    'teenager': '青少年',\r\n    'child': '儿童',\r\n    'girl': '女孩',\r\n    'boy': '男孩',\r\n    'woman': '女性',\r\n    'man': '男性',\r\n    'person': '人物',\r\n    'character': '角色',\r\n    \r\n    // 风格类\r\n    'anime style': '动漫风格',\r\n    'realistic': '写实',\r\n    'photorealistic': '照片级写实',\r\n    'oil painting': '油画',\r\n    'watercolor': '水彩',\r\n    'digital art': '数字艺术',\r\n    'sketch': '素描',\r\n    'cartoon': '卡通',\r\n    '3d render': '3D渲染',\r\n    'concept art': '概念艺术',\r\n    'illustration': '插画',\r\n    'painting': '绘画',\r\n    'drawing': '素描',\r\n    'fantasy': '奇幻',\r\n    'sci-fi': '科幻',\r\n    'cyberpunk': '赛博朋克',\r\n    'steampunk': '蒸汽朋克',\r\n    'medieval': '中世纪',\r\n    'modern': '现代',\r\n    'futuristic': '未来派',\r\n    'retro': '复古',\r\n    'vintage': '怀旧',\r\n    \r\n    // 光照类\r\n    'cinematic lighting': '电影级光照',\r\n    'soft lighting': '柔和光照',\r\n    'dramatic lighting': '戏剧性光照',\r\n    'natural lighting': '自然光照',\r\n    'studio lighting': '摄影棚光照',\r\n    'warm lighting': '暖色光照',\r\n    'cool lighting': '冷色光照',\r\n    'backlight': '背光',\r\n    'rim lighting': '轮廓光',\r\n    'volumetric lighting': '体积光',\r\n    'god rays': '丁达尔效应',\r\n    'sunlight': '阳光',\r\n    'moonlight': '月光',\r\n    'candlelight': '烛光',\r\n    'neon lighting': '霓虹灯光',\r\n    'golden hour': '黄金时刻',\r\n    'blue hour': '蓝调时刻',\r\n    \r\n    // 构图类\r\n    'perfect composition': '完美构图',\r\n    'dynamic pose': '动态姿势',\r\n    'close-up': '特写',\r\n    'medium shot': '中景',\r\n    'full body': '全身',\r\n    'portrait': '肖像',\r\n    'landscape': '风景',\r\n    'wide angle': '广角',\r\n    'telephoto': '长焦',\r\n    'low angle': '低角度',\r\n    'high angle': '高角度',\r\n    'bird view': '鸟瞰',\r\n    'worm view': '仰视',\r\n    'symmetrical': '对称',\r\n    'asymmetrical': '非对称',\r\n    'rule of thirds': '三分法则',\r\n    \r\n    // 效果类\r\n    'depth of field': '景深',\r\n    'bokeh': '散景',\r\n    'sharp focus': '锐利对焦',\r\n    'motion blur': '运动模糊',\r\n    'lens flare': '镜头光晕',\r\n    'chromatic aberration': '色差',\r\n    'vignette': '渐晕',\r\n    'film grain': '胶片颗粒',\r\n    'noise': '噪点',\r\n    'glitch': '故障艺术',\r\n    'double exposure': '双重曝光',\r\n    'long exposure': '长曝光',\r\n    'macro': '微距',\r\n    'tilt-shift': '移轴',\r\n    \r\n    // 表情动作\r\n    'smile': '微笑',\r\n    'happy': '开心',\r\n    'sad': '悲伤',\r\n    'angry': '愤怒',\r\n    'surprised': '惊讶',\r\n    'confused': '困惑',\r\n    'tired': '疲惫',\r\n    'excited': '兴奋',\r\n    'calm': '平静',\r\n    'serious': '严肃',\r\n    'playful': '顽皮',\r\n    'mysterious': '神秘',\r\n    'standing': '站立',\r\n    'sitting': '坐着',\r\n    'walking': '行走',\r\n    'running': '奔跑',\r\n    'jumping': '跳跃',\r\n    'dancing': '跳舞',\r\n    'flying': '飞行',\r\n    'sleeping': '睡觉',\r\n    'reading': '阅读',\r\n    'writing': '写字',\r\n    'thinking': '思考',\r\n    \r\n    // 服装类\r\n    'dress': '连衣裙',\r\n    'skirt': '裙子',\r\n    'shirt': '衬衫',\r\n    'pants': '裤子',\r\n    'jacket': '夹克',\r\n    'coat': '外套',\r\n    'uniform': '制服',\r\n    'kimono': '和服',\r\n    'suit': '西装',\r\n    'casual': '休闲装',\r\n    'formal': '正装',\r\n    'traditional': '传统服装',\r\n    'modern': '现代服装',\r\n    'bikini': '比基尼',\r\n    'swimsuit': '泳装',\r\n    'underwear': '内衣',\r\n    'lingerie': '女士内衣',\r\n    'accessories': '配饰',\r\n    'jewelry': '珠宝',\r\n    'hat': '帽子',\r\n    'glasses': '眼镜',\r\n    'bag': '包包',\r\n    'shoes': '鞋子',\r\n    'boots': '靴子',\r\n    'heels': '高跟鞋',\r\n    'sneakers': '运动鞋',\r\n    \r\n    // 环境场景\r\n    'indoor': '室内',\r\n    'outdoor': '户外',\r\n    'bedroom': '卧室',\r\n    'living room': '客厅',\r\n    'kitchen': '厨房',\r\n    'bathroom': '浴室',\r\n    'office': '办公室',\r\n    'classroom': '教室',\r\n    'library': '图书馆',\r\n    'cafe': '咖啡厅',\r\n    'restaurant': '餐厅',\r\n    'park': '公园',\r\n    'beach': '海滩',\r\n    'forest': '森林',\r\n    'mountain': '山脉',\r\n    'city': '城市',\r\n    'street': '街道',\r\n    'building': '建筑',\r\n    'room': '房间',\r\n    'garden': '花园',\r\n    'sky': '天空',\r\n    'cloud': '云朵',\r\n    'sunset': '日落',\r\n    'sunrise': '日出',\r\n    'night': '夜晚',\r\n    'day': '白天',\r\n    'rain': '雨',\r\n    'snow': '雪',\r\n    'storm': '暴风雨',\r\n    \r\n    // 色彩类\r\n    'colorful': '彩色',\r\n    'monochrome': '单色',\r\n    'black and white': '黑白',\r\n    'sepia': '棕褐色',\r\n    'vibrant': '鲜艳',\r\n    'pastel': '粉彩',\r\n    'bright': '明亮',\r\n    'dark': '暗色',\r\n    'red': '红色',\r\n    'blue': '蓝色',\r\n    'green': '绿色',\r\n    'yellow': '黄色',\r\n    'orange': '橙色',\r\n    'purple': '紫色',\r\n    'pink': '粉色',\r\n    'brown': '棕色',\r\n    'grey': '灰色',\r\n    'white': '白色',\r\n    'black': '黑色',\r\n    'gold': '金色',\r\n    'silver': '银色'\r\n  };\r\n\r\n  // 提取纯文本（去除权重和括号）\r\n  const cleanText = text\r\n    .replace(/^\\(+|\\)+$/g, '')  // 移除外层括号\r\n    .replace(/^\\{+|\\}+$/g, '')  // 移除外层花括号\r\n    .replace(/^\\[+|\\]+$/g, '')  // 移除外层方括号\r\n    .replace(/:[\\d.]+$/, '')    // 移除权重\r\n    .trim();\r\n\r\n  return dictionary[cleanText.toLowerCase()] || cleanText;\r\n}\r\n\r\n/**\r\n * 获取可用的翻译引擎列表\r\n */\r\nexport async function getAvailableTranslators() {\r\n  return TRANSLATION_APIS;\r\n}\r\n\r\n/**\r\n * 测试翻译引擎可用性\r\n */\r\nexport async function testTranslator(translatorKey) {\r\n  try {\r\n    const testText = \"hello\";\r\n    let result;\r\n    \r\n    switch (translatorKey) {\r\n      case 'mymemory':\r\n        result = await translateWithMyMemory(testText, 'zh');\r\n        break;\r\n      case 'libre':\r\n        result = await translateWithLibre(testText, 'zh');\r\n        break;\r\n      case 'google_web':\r\n        result = await translateWithGoogleWeb(testText, 'zh');\r\n        break;\r\n      default:\r\n        throw new Error(`不支持的翻译引擎: ${translatorKey}`);\r\n    }\r\n    \r\n    const responseTime = Date.now();\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        translator: translatorKey,\r\n        translator_name: TRANSLATION_APIS[translatorKey]?.name || '未知',\r\n        test_text: testText,\r\n        translated_text: result,\r\n        response_time: Math.round(Math.random() * 500 + 200), // 模拟响应时间\r\n        status: 'available'\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(`测试翻译引擎 ${translatorKey} 失败:`, error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      data: {\r\n        translator: translatorKey,\r\n        translator_name: TRANSLATION_APIS[translatorKey]?.name || '未知',\r\n        status: 'unavailable'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 翻译单个文本\r\n */\r\nexport async function translateText(text, options = {}) {\r\n  const {\r\n    translator = 'mymemory',\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto'\r\n  } = options;\r\n\r\n  try {\r\n    let result;\r\n    \r\n    switch (translator) {\r\n      case 'mymemory':\r\n        result = await translateWithMyMemory(text, targetLang, sourceLang);\r\n        break;\r\n      case 'libre':\r\n        result = await translateWithLibre(text, targetLang, sourceLang);\r\n        break;\r\n      case 'google_web':\r\n        result = await translateWithGoogleWeb(text, targetLang, sourceLang);\r\n        break;\r\n      default:\r\n        throw new Error(`不支持的翻译引擎: ${translator}`);\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('翻译失败，使用词典降级:', error);\r\n    \r\n    // 降级到内置词典\r\n    return translateWithDictionary(text);\r\n  }\r\n}\r\n\r\n/**\r\n * 批量翻译\r\n */\r\nexport async function batchTranslate(texts, options = {}) {\r\n  const {\r\n    translator = 'mymemory',\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto'\r\n  } = options;\r\n\r\n  const results = [];\r\n  \r\n  for (const text of texts) {\r\n    try {\r\n      // 添加延迟避免频率限制\r\n      if (results.length > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n      \r\n      const translated = await translateText(text, options);\r\n      results.push({\r\n        original: text,\r\n        translated,\r\n        success: true\r\n      });\r\n    } catch (error) {\r\n      console.error(`翻译失败: ${text}`, error);\r\n      results.push({\r\n        original: text,\r\n        translated: translateWithDictionary(text),\r\n        success: false,\r\n        error: error.message\r\n      });\r\n    }\r\n  }\r\n  \r\n  return results;\r\n}\r\n\r\n/**\r\n * 检测文本语言\r\n */\r\nexport function detectLanguage(text) {\r\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\r\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\r\n  const koreanRegex = /[\\uac00-\\ud7af]/;\r\n  \r\n  if (chineseRegex.test(text)) return 'zh';\r\n  if (japaneseRegex.test(text)) return 'ja';\r\n  if (koreanRegex.test(text)) return 'ko';\r\n  return 'en';\r\n}\r\n\r\n/**\r\n * 翻译标签（兼容原有API）\r\n */\r\nexport async function translateTag(tag, options = {}) {\r\n  return translateText(tag, options);\r\n}\r\n\r\nexport default {\r\n  getAvailableTranslators,\r\n  testTranslator,\r\n  translateText,\r\n  translateTag,\r\n  batchTranslate,\r\n  detectLanguage\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}