{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { validateInput, cleanPrompt } from '../utils/validation';\nimport { copyToClipboard } from '../utils/clipboard';\nimport { APP_CONFIG, ERROR_MESSAGES, SUCCESS_MESSAGES } from '../constants/config';\n\n/**\n * 提示词生成器 Hook\n */\nexport const usePromptGenerator = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [selectedStyle, setSelectedStyle] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationSource, setGenerationSource] = useState('local'); // 'local' 或 'api'\n  const [generationCount, setGenerationCount] = useState(0);\n  const [apiError, setApiError] = useState(null);\n  const [validationErrors, setValidationErrors] = useState([]);\n\n  /**\n   * 验证输入\n   */\n  const validatePromptInput = useCallback(text => {\n    const validation = validateInput(text);\n    setValidationErrors(validation.errors);\n    return validation.isValid;\n  }, []);\n\n  /**\n   * 生成提示词 - 本地规则\n   */\n  const generateLocalPrompt = useCallback((text, style) => {\n    // 清理输入\n    const cleanedText = cleanPrompt(text);\n\n    // 基础质量标签\n    const qualityTags = 'masterpiece, best quality, ultra detailed';\n\n    // 风格相关标签\n    const styleMap = {\n      'realistic': 'photorealistic, hyperrealistic, detailed',\n      'anime': 'anime style, cel shading, vibrant colors',\n      'oil': 'oil painting, classical art, painterly',\n      'watercolor': 'watercolor, soft colors, flowing',\n      'sketch': 'pencil sketch, charcoal drawing, artistic'\n    };\n    const styleTag = styleMap[style] || '';\n\n    // 组合提示词\n    const parts = [qualityTags, cleanedText, styleTag].filter(part => part.trim());\n    return parts.join(', ');\n  }, []);\n\n  /**\n   * 生成提示词 - API调用\n   */\n  const generateApiPrompt = useCallback(async (text, style) => {\n    const requestBody = {\n      model: APP_CONFIG.API.MODEL,\n      messages: [{\n        role: 'system',\n        content: `你是一个专业的AI绘画提示词生成助手。请根据用户的描述，生成高质量的英文提示词。\n\n要求：\n1. 输出纯英文提示词，用逗号分隔\n2. 包含质量控制词如 masterpiece, best quality\n3. 根据风格要求添加对应的风格描述词\n4. 确保语法正确，词汇专业\n5. 长度控制在100-200个词汇之间\n6. 不要包含任何解释文字，只输出提示词\n\n风格要求：${style || '通用风格'}`\n      }, {\n        role: 'user',\n        content: `请为以下描述生成AI绘画提示词：${text}`\n      }],\n      max_tokens: APP_CONFIG.API.MAX_TOKENS,\n      temperature: 0.7,\n      top_p: APP_CONFIG.API.TOP_P\n    };\n    const response = await fetch(APP_CONFIG.API.BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${APP_CONFIG.API.SILICONFLOW_API_KEY}`\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n      throw new Error(ERROR_MESSAGES.API.INVALID_RESPONSE);\n    }\n    return cleanPrompt(data.choices[0].message.content);\n  }, []);\n\n  /**\n   * 主生成函数\n   */\n  const generatePrompt = useCallback(async (useApi = false) => {\n    // 验证输入\n    if (!validatePromptInput(inputText)) {\n      return false;\n    }\n    setIsGenerating(true);\n    setApiError(null);\n    try {\n      let result;\n      if (useApi && APP_CONFIG.FEATURES.AI_GENERATION) {\n        setGenerationSource('api');\n        result = await generateApiPrompt(inputText, selectedStyle);\n      } else {\n        setGenerationSource('local');\n        result = generateLocalPrompt(inputText, selectedStyle);\n      }\n      setGeneratedPrompt(result);\n      setGenerationCount(prev => prev + 1);\n      return true;\n    } catch (error) {\n      console.error('生成提示词失败:', error);\n      setApiError(error.message || ERROR_MESSAGES.API.UNKNOWN_ERROR);\n\n      // API失败时回退到本地生成\n      if (useApi) {\n        setGenerationSource('local');\n        const fallbackResult = generateLocalPrompt(inputText, selectedStyle);\n        setGeneratedPrompt(fallbackResult);\n        setGenerationCount(prev => prev + 1);\n        return true;\n      }\n      return false;\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [inputText, selectedStyle, validatePromptInput, generateLocalPrompt, generateApiPrompt]);\n\n  /**\n   * 复制提示词\n   */\n  const copyPrompt = useCallback(async (text = generatedPrompt) => {\n    const success = await copyToClipboard(text);\n    return success;\n  }, [generatedPrompt]);\n\n  /**\n   * 插入标签到输入框\n   */\n  const insertTag = useCallback(tag => {\n    const tagText = typeof tag === 'object' ? tag.en : tag;\n    const currentText = inputText.trim();\n    if (currentText) {\n      setInputText(prev => `${prev}, ${tagText}`);\n    } else {\n      setInputText(tagText);\n    }\n  }, [inputText]);\n\n  /**\n   * 重置所有状态\n   */\n  const reset = useCallback(() => {\n    setInputText('');\n    setGeneratedPrompt('');\n    setSelectedStyle('');\n    setApiError(null);\n    setValidationErrors([]);\n    setGenerationCount(0);\n  }, []);\n\n  /**\n   * 从提示词中提取风格\n   */\n  const extractStyleFromPrompt = useCallback(prompt => {\n    const styleKeywords = {\n      'realistic': ['photorealistic', 'hyperrealistic', 'realistic', 'photograph'],\n      'anime': ['anime', 'manga', 'cel shading', 'cartoon'],\n      'oil': ['oil painting', 'classical', 'renaissance'],\n      'watercolor': ['watercolor', 'aquarelle'],\n      'sketch': ['sketch', 'pencil', 'charcoal', 'drawing']\n    };\n    const lowerPrompt = prompt.toLowerCase();\n    for (const [style, keywords] of Object.entries(styleKeywords)) {\n      if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n        return style;\n      }\n    }\n    return '';\n  }, []);\n  return {\n    // 状态\n    inputText,\n    generatedPrompt,\n    selectedStyle,\n    isGenerating,\n    generationSource,\n    generationCount,\n    apiError,\n    validationErrors,\n    // 设置函数\n    setInputText,\n    setSelectedStyle,\n    setGeneratedPrompt,\n    // 操作函数\n    generatePrompt,\n    copyPrompt,\n    insertTag,\n    reset,\n    extractStyleFromPrompt,\n    validatePromptInput\n  };\n};\n_s(usePromptGenerator, \"1p6s/IBJxLWdCrgcsvpuVmtYI7U=\");","map":{"version":3,"names":["useState","useCallback","validateInput","cleanPrompt","copyToClipboard","APP_CONFIG","ERROR_MESSAGES","SUCCESS_MESSAGES","usePromptGenerator","_s","inputText","setInputText","generatedPrompt","setGeneratedPrompt","selectedStyle","setSelectedStyle","isGenerating","setIsGenerating","generationSource","setGenerationSource","generationCount","setGenerationCount","apiError","setApiError","validationErrors","setValidationErrors","validatePromptInput","text","validation","errors","isValid","generateLocalPrompt","style","cleanedText","qualityTags","styleMap","styleTag","parts","filter","part","trim","join","generateApiPrompt","requestBody","model","API","MODEL","messages","role","content","max_tokens","MAX_TOKENS","temperature","top_p","TOP_P","response","fetch","BASE_URL","method","headers","SILICONFLOW_API_KEY","body","JSON","stringify","ok","Error","status","statusText","data","json","choices","message","INVALID_RESPONSE","generatePrompt","useApi","result","FEATURES","AI_GENERATION","prev","error","console","UNKNOWN_ERROR","fallbackResult","copyPrompt","success","insertTag","tag","tagText","en","currentText","reset","extractStyleFromPrompt","prompt","styleKeywords","lowerPrompt","toLowerCase","keywords","Object","entries","some","keyword","includes"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/hooks/usePromptGenerator.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { validateInput, cleanPrompt } from '../utils/validation';\nimport { copyToClipboard } from '../utils/clipboard';\nimport { APP_CONFIG, ERROR_MESSAGES, SUCCESS_MESSAGES } from '../constants/config';\n\n/**\n * 提示词生成器 Hook\n */\nexport const usePromptGenerator = () => {\n  const [inputText, setInputText] = useState('');\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [selectedStyle, setSelectedStyle] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationSource, setGenerationSource] = useState('local'); // 'local' 或 'api'\n  const [generationCount, setGenerationCount] = useState(0);\n  const [apiError, setApiError] = useState(null);\n  const [validationErrors, setValidationErrors] = useState([]);\n\n  /**\n   * 验证输入\n   */\n  const validatePromptInput = useCallback((text) => {\n    const validation = validateInput(text);\n    setValidationErrors(validation.errors);\n    return validation.isValid;\n  }, []);\n\n  /**\n   * 生成提示词 - 本地规则\n   */\n  const generateLocalPrompt = useCallback((text, style) => {\n    // 清理输入\n    const cleanedText = cleanPrompt(text);\n    \n    // 基础质量标签\n    const qualityTags = 'masterpiece, best quality, ultra detailed';\n    \n    // 风格相关标签\n    const styleMap = {\n      'realistic': 'photorealistic, hyperrealistic, detailed',\n      'anime': 'anime style, cel shading, vibrant colors',\n      'oil': 'oil painting, classical art, painterly',\n      'watercolor': 'watercolor, soft colors, flowing',\n      'sketch': 'pencil sketch, charcoal drawing, artistic'\n    };\n    \n    const styleTag = styleMap[style] || '';\n    \n    // 组合提示词\n    const parts = [qualityTags, cleanedText, styleTag].filter(part => part.trim());\n    return parts.join(', ');\n  }, []);\n\n  /**\n   * 生成提示词 - API调用\n   */\n  const generateApiPrompt = useCallback(async (text, style) => {\n    const requestBody = {\n      model: APP_CONFIG.API.MODEL,\n      messages: [\n        {\n          role: 'system',\n          content: `你是一个专业的AI绘画提示词生成助手。请根据用户的描述，生成高质量的英文提示词。\n\n要求：\n1. 输出纯英文提示词，用逗号分隔\n2. 包含质量控制词如 masterpiece, best quality\n3. 根据风格要求添加对应的风格描述词\n4. 确保语法正确，词汇专业\n5. 长度控制在100-200个词汇之间\n6. 不要包含任何解释文字，只输出提示词\n\n风格要求：${style || '通用风格'}`\n        },\n        {\n          role: 'user',\n          content: `请为以下描述生成AI绘画提示词：${text}`\n        }\n      ],\n      max_tokens: APP_CONFIG.API.MAX_TOKENS,\n      temperature: 0.7,\n      top_p: APP_CONFIG.API.TOP_P\n    };\n\n    const response = await fetch(APP_CONFIG.API.BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${APP_CONFIG.API.SILICONFLOW_API_KEY}`\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n      throw new Error(ERROR_MESSAGES.API.INVALID_RESPONSE);\n    }\n\n    return cleanPrompt(data.choices[0].message.content);\n  }, []);\n\n  /**\n   * 主生成函数\n   */\n  const generatePrompt = useCallback(async (useApi = false) => {\n    // 验证输入\n    if (!validatePromptInput(inputText)) {\n      return false;\n    }\n\n    setIsGenerating(true);\n    setApiError(null);\n\n    try {\n      let result;\n      \n      if (useApi && APP_CONFIG.FEATURES.AI_GENERATION) {\n        setGenerationSource('api');\n        result = await generateApiPrompt(inputText, selectedStyle);\n      } else {\n        setGenerationSource('local');\n        result = generateLocalPrompt(inputText, selectedStyle);\n      }\n\n      setGeneratedPrompt(result);\n      setGenerationCount(prev => prev + 1);\n      return true;\n    } catch (error) {\n      console.error('生成提示词失败:', error);\n      setApiError(error.message || ERROR_MESSAGES.API.UNKNOWN_ERROR);\n      \n      // API失败时回退到本地生成\n      if (useApi) {\n        setGenerationSource('local');\n        const fallbackResult = generateLocalPrompt(inputText, selectedStyle);\n        setGeneratedPrompt(fallbackResult);\n        setGenerationCount(prev => prev + 1);\n        return true;\n      }\n      return false;\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [inputText, selectedStyle, validatePromptInput, generateLocalPrompt, generateApiPrompt]);\n\n  /**\n   * 复制提示词\n   */\n  const copyPrompt = useCallback(async (text = generatedPrompt) => {\n    const success = await copyToClipboard(text);\n    return success;\n  }, [generatedPrompt]);\n\n  /**\n   * 插入标签到输入框\n   */\n  const insertTag = useCallback((tag) => {\n    const tagText = typeof tag === 'object' ? tag.en : tag;\n    const currentText = inputText.trim();\n    \n    if (currentText) {\n      setInputText(prev => `${prev}, ${tagText}`);\n    } else {\n      setInputText(tagText);\n    }\n  }, [inputText]);\n\n  /**\n   * 重置所有状态\n   */\n  const reset = useCallback(() => {\n    setInputText('');\n    setGeneratedPrompt('');\n    setSelectedStyle('');\n    setApiError(null);\n    setValidationErrors([]);\n    setGenerationCount(0);\n  }, []);\n\n  /**\n   * 从提示词中提取风格\n   */\n  const extractStyleFromPrompt = useCallback((prompt) => {\n    const styleKeywords = {\n      'realistic': ['photorealistic', 'hyperrealistic', 'realistic', 'photograph'],\n      'anime': ['anime', 'manga', 'cel shading', 'cartoon'],\n      'oil': ['oil painting', 'classical', 'renaissance'],\n      'watercolor': ['watercolor', 'aquarelle'],\n      'sketch': ['sketch', 'pencil', 'charcoal', 'drawing']\n    };\n\n    const lowerPrompt = prompt.toLowerCase();\n    \n    for (const [style, keywords] of Object.entries(styleKeywords)) {\n      if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n        return style;\n      }\n    }\n    \n    return '';\n  }, []);\n\n  return {\n    // 状态\n    inputText,\n    generatedPrompt,\n    selectedStyle,\n    isGenerating,\n    generationSource,\n    generationCount,\n    apiError,\n    validationErrors,\n    \n    // 设置函数\n    setInputText,\n    setSelectedStyle,\n    setGeneratedPrompt,\n    \n    // 操作函数\n    generatePrompt,\n    copyPrompt,\n    insertTag,\n    reset,\n    extractStyleFromPrompt,\n    validatePromptInput\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}