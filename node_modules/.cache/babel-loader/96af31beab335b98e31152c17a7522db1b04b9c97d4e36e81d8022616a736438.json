{"ast":null,"code":"/**\r\n * 高级翻译服务 - 基于多个免费在线API\r\n * 参考translators库理念，支持多种免费翻译引擎\r\n * 支持GitHub Pages部署，无需后端服务\r\n */\n\n// 免费翻译API配置 - 基于translators库的引擎列表\nconst TRANSLATION_APIS = {\n  mymemory: {\n    name: 'MyMemory',\n    description: '免费API，支持330种语言，每天1000次免费调用',\n    baseUrl: 'https://api.mymemory.translated.net',\n    status: 'stable',\n    rateLimit: '1000/day',\n    languages: 330\n  },\n  libre: {\n    name: 'LibreTranslate',\n    description: '开源免费翻译，支持20种语言，每分钟20次',\n    baseUrl: 'https://libretranslate.de/translate',\n    status: 'stable',\n    rateLimit: '20/min',\n    languages: 20\n  },\n  google_web: {\n    name: 'Google Web',\n    description: 'Google翻译网页版API，支持134种语言',\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 134\n  },\n  bing_web: {\n    name: 'Bing Web',\n    description: 'Bing翻译网页版API，支持128种语言',\n    baseUrl: 'https://www.bing.com/ttranslatev3',\n    status: 'experimental',\n    rateLimit: 'unlimited',\n    languages: 128\n  },\n  yandex_web: {\n    name: 'Yandex Web',\n    description: 'Yandex翻译网页版API，支持102种语言',\n    baseUrl: 'https://translate.yandex.net/api/v1/tr.json/translate',\n    status: 'experimental',\n    rateLimit: 'unlimited',\n    languages: 102\n  },\n  deepl_web: {\n    name: 'DeepL Web',\n    description: 'DeepL翻译网页版API，支持33种语言，质量极高',\n    baseUrl: 'https://www2.deepl.com/jsonrpc',\n    status: 'experimental',\n    rateLimit: 'limited',\n    languages: 33\n  }\n};\n\n/**\r\n * MyMemory翻译API - 最稳定的免费API\r\n */\nasync function translateWithMyMemory(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}&de=support@i-prompt.com`;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'I-Prompt/3.0 Translation Service'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.responseStatus === 200 && data.responseData) {\n      return {\n        translatedText: data.responseData.translatedText,\n        confidence: data.responseData.match,\n        source: 'mymemory'\n      };\n    }\n    throw new Error(data.responseDetails || '翻译失败');\n  } catch (error) {\n    console.error('MyMemory翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * LibreTranslate翻译API - 开源免费\r\n */\nasync function translateWithLibre(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    // 语言代码转换\n    const langMap = {\n      'zh': 'zh',\n      'zh-cn': 'zh',\n      'en': 'en',\n      'ja': 'ja',\n      'ko': 'ko',\n      'fr': 'fr',\n      'de': 'de',\n      'es': 'es',\n      'ru': 'ru',\n      'it': 'it',\n      'pt': 'pt',\n      'nl': 'nl',\n      'pl': 'pl',\n      'tr': 'tr',\n      'cs': 'cs',\n      'sv': 'sv',\n      'da': 'da',\n      'no': 'no',\n      'fi': 'fi',\n      'hu': 'hu'\n    };\n    const target = langMap[targetLang.toLowerCase()] || 'zh';\n    const source = sourceLang === 'auto' ? 'auto' : langMap[sourceLang.toLowerCase()] || 'en';\n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        q: text,\n        source: source,\n        target: target,\n        format: 'text',\n        api_key: '' // 使用免费版本\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.translatedText) {\n      return {\n        translatedText: data.translatedText,\n        confidence: 'high',\n        source: 'libretranslate'\n      };\n    }\n    throw new Error(data.error || '翻译失败');\n  } catch (error) {\n    console.error('LibreTranslate翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Google Web翻译API - 非官方但稳定\r\n */\nasync function translateWithGoogleWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const params = new URLSearchParams({\n      client: 'gtx',\n      sl: sourceLang,\n      tl: targetLang,\n      dt: 't',\n      q: text\n    });\n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?${params}`;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data && data[0] && data[0][0] && data[0][0][0]) {\n      return {\n        translatedText: data[0][0][0],\n        confidence: 'high',\n        source: 'google_web'\n      };\n    }\n    throw new Error('Google翻译响应格式错误');\n  } catch (error) {\n    console.error('Google Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Bing Web翻译API - 实验性\r\n */\nasync function translateWithBingWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    // 由于CORS限制，这个API在浏览器中可能无法直接使用\n    // 这里提供基本框架，实际使用需要代理\n    throw new Error('Bing Web API需要代理服务器支持');\n  } catch (error) {\n    console.error('Bing Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * 内置AI绘画专业词典翻译（降级方案）\r\n */\nfunction translateWithDictionary(text) {\n  const aiArtDictionary = {\n    // 质量和技术类\n    'masterpiece': '杰作',\n    'best quality': '最佳质量',\n    'ultra detailed': '超详细',\n    'high resolution': '高分辨率',\n    'professional': '专业级',\n    '8k wallpaper': '8K壁纸',\n    '4k': '4K',\n    'hdr': 'HDR',\n    'extremely detailed': '极其详细',\n    'perfect': '完美',\n    'flawless': '无瑕',\n    'stunning': '令人惊叹',\n    'gorgeous': '华丽',\n    'epic': '史诗',\n    'amazing': '惊人',\n    'incredible': '难以置信',\n    'magnificent': '壮丽',\n    'sharp focus': '锐利焦点',\n    'photorealistic': '照片级写实',\n    'hyperrealistic': '超写实',\n    'detailed face': '精细面部',\n    'perfect anatomy': '完美解剖',\n    // 人物类\n    'beautiful girl': '美丽女孩',\n    'cute girl': '可爱女孩',\n    'handsome boy': '英俊男孩',\n    'pretty woman': '漂亮女性',\n    'strong man': '强壮男性',\n    'elegant lady': '优雅女士',\n    'beautiful': '美丽',\n    'cute': '可爱',\n    'handsome': '英俊',\n    'pretty': '漂亮',\n    'young': '年轻',\n    'adult': '成人',\n    'teenager': '青少年',\n    'child': '儿童',\n    'girl': '女孩',\n    'boy': '男孩',\n    'woman': '女性',\n    'man': '男性',\n    'person': '人物',\n    'character': '角色',\n    'portrait': '肖像',\n    'face': '脸部',\n    'eyes': '眼睛',\n    'hair': '头发',\n    'smile': '微笑',\n    'looking at viewer': '看向观众',\n    // 风格类\n    'anime style': '动漫风格',\n    'anime': '动漫',\n    'realistic': '写实',\n    'oil painting': '油画',\n    'watercolor': '水彩',\n    'digital art': '数字艺术',\n    'sketch': '素描',\n    'cartoon': '卡通',\n    '3d render': '3D渲染',\n    'concept art': '概念艺术',\n    'illustration': '插画',\n    'painting': '绘画',\n    'drawing': '素描',\n    'fantasy': '奇幻',\n    'sci-fi': '科幻',\n    'cyberpunk': '赛博朋克',\n    'steampunk': '蒸汽朋克',\n    'medieval': '中世纪',\n    'modern': '现代',\n    'futuristic': '未来派',\n    'retro': '复古',\n    'vintage': '怀旧',\n    'pixiv': 'Pixiv风格',\n    'artstation': 'ArtStation风格',\n    // 光照和环境类\n    'cinematic lighting': '电影级光照',\n    'soft lighting': '柔和光照',\n    'dramatic lighting': '戏剧性光照',\n    'natural lighting': '自然光照',\n    'studio lighting': '摄影棚光照',\n    'warm lighting': '暖色光照',\n    'cool lighting': '冷色光照',\n    'backlight': '背光',\n    'rim light': '轮廓光',\n    'sunlight': '阳光',\n    'moonlight': '月光',\n    'golden hour': '黄金时刻',\n    'blue hour': '蓝调时刻',\n    'outdoors': '户外',\n    'indoors': '室内',\n    'nature': '自然',\n    'forest': '森林',\n    'beach': '海滩',\n    'city': '城市',\n    'sky': '天空',\n    'clouds': '云朵',\n    'sunset': '日落',\n    'sunrise': '日出',\n    // 构图和姿势类\n    'full body': '全身',\n    'upper body': '上半身',\n    'close-up': '特写',\n    'wide shot': '远景',\n    'medium shot': '中景',\n    'cowboy shot': '牛仔镜头',\n    'standing': '站立',\n    'sitting': '坐着',\n    'lying': '躺着',\n    'walking': '行走',\n    'running': '奔跑',\n    'dancing': '舞蹈',\n    'from above': '俯视',\n    'from below': '仰视',\n    'side view': '侧视',\n    'back view': '背视',\n    // 服装和配饰类\n    'school uniform': '校服',\n    'dress': '连衣裙',\n    'kimono': '和服',\n    'casual clothes': '便装',\n    'formal wear': '正装',\n    'bikini': '比基尼',\n    'glasses': '眼镜',\n    'hat': '帽子',\n    'jewelry': '珠宝',\n    'earrings': '耳环',\n    'necklace': '项链',\n    // 情感和表情类\n    'happy': '开心',\n    'sad': '悲伤',\n    'angry': '愤怒',\n    'surprised': '惊讶',\n    'peaceful': '平静',\n    'excited': '兴奋',\n    'shy': '害羞',\n    'confident': '自信',\n    'mysterious': '神秘',\n    'playful': '顽皮',\n    // 颜色类\n    'colorful': '多彩',\n    'monochrome': '单色',\n    'vibrant': '鲜艳',\n    'pastel': '粉彩',\n    'red': '红色',\n    'blue': '蓝色',\n    'green': '绿色',\n    'yellow': '黄色',\n    'purple': '紫色',\n    'pink': '粉色',\n    'black': '黑色',\n    'white': '白色',\n    'rainbow': '彩虹色',\n    // 特殊效果类\n    'glowing': '发光',\n    'sparkling': '闪闪发光',\n    'shiny': '有光泽',\n    'transparent': '透明',\n    'reflection': '反射',\n    'shadow': '阴影',\n    'motion blur': '动态模糊',\n    'depth of field': '景深',\n    'bokeh': '散景',\n    'lens flare': '镜头光晕',\n    // 负面提示词\n    'blurry': '模糊',\n    'low quality': '低质量',\n    'bad anatomy': '错误解剖',\n    'extra fingers': '多余手指',\n    'bad hands': '错误手部',\n    'deformed': '变形',\n    'ugly': '丑陋',\n    'duplicate': '重复',\n    'morbid': '病态',\n    'mutilated': '残缺',\n    'extra limbs': '多余肢体',\n    'disfigured': '毁容',\n    'malformed': '畸形',\n    'missing arms': '缺少手臂',\n    'missing legs': '缺少腿部',\n    'extra arms': '多余手臂',\n    'extra legs': '多余腿部',\n    'fused fingers': '融合手指',\n    'too many fingers': '手指过多',\n    'long neck': '脖子过长',\n    'cropped': '裁剪',\n    'worst quality': '最差质量',\n    'jpeg artifacts': 'JPEG伪影',\n    'signature': '签名',\n    'watermark': '水印',\n    'username': '用户名',\n    'text': '文字',\n    'logo': '标志',\n    'lowres': '低分辨率',\n    'error': '错误',\n    'out of frame': '超出画面',\n    'bad proportions': '比例错误',\n    'poorly drawn': '绘制差劣'\n  };\n\n  // 分词翻译\n  const words = text.toLowerCase().split(/[,，\\s]+/).filter(word => word.trim());\n  const translatedWords = words.map(word => {\n    const cleanWord = word.trim();\n    return aiArtDictionary[cleanWord] || cleanWord;\n  });\n  const translatedText = translatedWords.join(', ');\n  return {\n    translatedText,\n    confidence: 'dictionary',\n    source: 'ai_art_dictionary',\n    coverage: words.filter(word => aiArtDictionary[word.trim()]).length / words.length\n  };\n}\n\n/**\r\n * 智能翻译引擎选择器\r\n */\nasync function smartTranslate(text, options = {}) {\n  const {\n    targetLang = 'zh',\n    sourceLang = 'auto',\n    preferredEngines = ['mymemory', 'libre', 'google_web'],\n    maxRetries = 2\n  } = options;\n  let lastError = null;\n\n  // 按优先级尝试不同的翻译引擎\n  for (const engine of preferredEngines) {\n    for (let retry = 0; retry <= maxRetries; retry++) {\n      try {\n        let result;\n        switch (engine) {\n          case 'mymemory':\n            result = await translateWithMyMemory(text, targetLang, sourceLang);\n            break;\n          case 'libre':\n            result = await translateWithLibre(text, targetLang, sourceLang);\n            break;\n          case 'google_web':\n            result = await translateWithGoogleWeb(text, targetLang, sourceLang);\n            break;\n          default:\n            continue;\n        }\n        if (result && result.translatedText) {\n          return result;\n        }\n      } catch (error) {\n        lastError = error;\n        console.warn(`翻译引擎 ${engine} 第 ${retry + 1} 次尝试失败:`, error.message);\n\n        // 如果不是最后一次重试，等待一段时间\n        if (retry < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * (retry + 1)));\n        }\n      }\n    }\n  }\n\n  // 所有在线翻译都失败，使用词典翻译作为降级方案\n  console.warn('所有在线翻译引擎都失败，使用内置AI绘画词典');\n  const dictionaryResult = translateWithDictionary(text);\n  if (dictionaryResult.coverage > 0.3) {\n    // 如果词典覆盖率超过30%\n    return dictionaryResult;\n  }\n\n  // 如果词典覆盖率也很低，返回原文\n  throw lastError || new Error('所有翻译方法都失败');\n}\n\n/**\r\n * 获取可用的翻译引擎列表\r\n */\nexport async function getAvailableTranslators() {\n  return TRANSLATION_APIS;\n}\n\n/**\r\n * 测试翻译引擎可用性\r\n */\nexport async function testTranslator(translatorKey) {\n  try {\n    const testText = 'beautiful girl';\n    let result;\n    switch (translatorKey) {\n      case 'mymemory':\n        result = await translateWithMyMemory(testText, 'zh', 'en');\n        break;\n      case 'libre':\n        result = await translateWithLibre(testText, 'zh', 'en');\n        break;\n      case 'google_web':\n        result = await translateWithGoogleWeb(testText, 'zh', 'en');\n        break;\n      case 'dictionary':\n        result = translateWithDictionary(testText);\n        break;\n      default:\n        throw new Error('未知的翻译引擎');\n    }\n    return {\n      success: true,\n      result: result.translatedText,\n      confidence: result.confidence,\n      message: '测试成功'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: '测试失败'\n    };\n  }\n}\n\n/**\r\n * 主要翻译接口\r\n */\nexport async function translateText(text, options = {}) {\n  if (!text || !text.trim()) {\n    throw new Error('翻译文本不能为空');\n  }\n  try {\n    const result = await smartTranslate(text, options);\n    return result;\n  } catch (error) {\n    console.error('翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\r\n * 批量翻译\r\n */\nexport async function batchTranslate(texts, options = {}) {\n  const {\n    maxConcurrent = 3,\n    delayBetweenRequests = 500\n  } = options;\n  const results = [];\n\n  // 分批处理，避免API限制\n  for (let i = 0; i < texts.length; i += maxConcurrent) {\n    const batch = texts.slice(i, i + maxConcurrent);\n    const batchPromises = batch.map(async (text, index) => {\n      try {\n        // 添加延迟避免触发限流\n        if (index > 0) {\n          await new Promise(resolve => setTimeout(resolve, delayBetweenRequests));\n        }\n        const result = await translateText(text, options);\n        return {\n          success: true,\n          text,\n          result\n        };\n      } catch (error) {\n        return {\n          success: false,\n          text,\n          error: error.message\n        };\n      }\n    });\n    const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n\n    // 批次间延迟\n    if (i + maxConcurrent < texts.length) {\n      await new Promise(resolve => setTimeout(resolve, delayBetweenRequests * 2));\n    }\n  }\n  return results;\n}\n\n/**\r\n * 检测文本语言\r\n */\nexport function detectLanguage(text) {\n  if (!text) return 'unknown';\n\n  // 简单的语言检测\n  const chineseRegex = /[\\u4e00-\\u9fff]/;\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\n  const koreanRegex = /[\\uac00-\\ud7af]/;\n  if (chineseRegex.test(text)) return 'zh';\n  if (japaneseRegex.test(text)) return 'ja';\n  if (koreanRegex.test(text)) return 'ko';\n  return 'en'; // 默认为英文\n}\n\n/**\r\n * 专门用于标签翻译的优化接口\r\n */\nexport async function translateTag(tag, options = {}) {\n  try {\n    // 清理标签（去除权重标记等）\n    const cleanTag = tag.replace(/[(){}[\\]:0-9.]/g, '').trim();\n    if (!cleanTag) {\n      throw new Error('标签为空');\n    }\n    const result = await translateText(cleanTag, {\n      ...options,\n      preferredEngines: ['mymemory', 'google_web', 'libre'] // 标签翻译优化顺序\n    });\n    return result;\n  } catch (error) {\n    console.error(`标签翻译失败 \"${tag}\":`, error);\n    throw error;\n  }\n}\n\n/**\r\n * 翻译提示词中的所有标签\r\n */\nexport async function translatePrompt(prompt, options = {}) {\n  if (!prompt || !prompt.trim()) {\n    throw new Error('提示词不能为空');\n  }\n  try {\n    // 分割标签\n    const tags = prompt.split(',').map(tag => tag.trim()).filter(tag => tag);\n    if (tags.length === 0) {\n      throw new Error('没有找到有效的标签');\n    }\n\n    // 批量翻译标签\n    const translationResults = await batchTranslate(tags, {\n      ...options,\n      maxConcurrent: 2,\n      // 降低并发数避免限流\n      delayBetweenRequests: 800\n    });\n\n    // 组装翻译结果\n    const translatedTags = [];\n    const errors = [];\n    translationResults.forEach((result, index) => {\n      if (result.success) {\n        translatedTags.push(result.result.translatedText);\n      } else {\n        translatedTags.push(tags[index]); // 翻译失败时保留原文\n        errors.push(`标签 \"${tags[index]}\" 翻译失败: ${result.error}`);\n      }\n    });\n    return {\n      translatedText: translatedTags.join(', '),\n      originalText: prompt,\n      successCount: translationResults.filter(r => r.success).length,\n      totalCount: tags.length,\n      errors: errors,\n      coverage: translationResults.filter(r => r.success).length / tags.length\n    };\n  } catch (error) {\n    console.error('提示词翻译失败:', error);\n    throw error;\n  }\n}\nexport default {\n  getAvailableTranslators,\n  testTranslator,\n  translateText,\n  translateTag,\n  batchTranslate,\n  detectLanguage\n};","map":{"version":3,"names":["TRANSLATION_APIS","mymemory","name","description","baseUrl","status","rateLimit","languages","libre","google_web","bing_web","yandex_web","deepl_web","translateWithMyMemory","text","targetLang","sourceLang","langPair","url","encodeURIComponent","response","fetch","method","headers","ok","Error","statusText","data","json","responseStatus","responseData","translatedText","confidence","match","source","responseDetails","error","console","translateWithLibre","langMap","target","toLowerCase","body","JSON","stringify","q","format","api_key","translateWithGoogleWeb","params","URLSearchParams","client","sl","tl","dt","translateWithBingWeb","translateWithDictionary","aiArtDictionary","words","split","filter","word","trim","translatedWords","map","cleanWord","join","coverage","length","smartTranslate","options","preferredEngines","maxRetries","lastError","engine","retry","result","warn","message","Promise","resolve","setTimeout","dictionaryResult","getAvailableTranslators","testTranslator","translatorKey","testText","success","translateText","batchTranslate","texts","maxConcurrent","delayBetweenRequests","results","i","batch","slice","batchPromises","index","batchResults","all","push","detectLanguage","chineseRegex","japaneseRegex","koreanRegex","test","translateTag","tag","cleanTag","replace","translatePrompt","prompt","tags","translationResults","translatedTags","errors","forEach","originalText","successCount","r","totalCount"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/translationService.js"],"sourcesContent":["/**\r\n * 高级翻译服务 - 基于多个免费在线API\r\n * 参考translators库理念，支持多种免费翻译引擎\r\n * 支持GitHub Pages部署，无需后端服务\r\n */\r\n\r\n// 免费翻译API配置 - 基于translators库的引擎列表\r\nconst TRANSLATION_APIS = {\r\n  mymemory: {\r\n    name: 'MyMemory',\r\n    description: '免费API，支持330种语言，每天1000次免费调用',\r\n    baseUrl: 'https://api.mymemory.translated.net',\r\n    status: 'stable',\r\n    rateLimit: '1000/day',\r\n    languages: 330\r\n  },\r\n  \r\n  libre: {\r\n    name: 'LibreTranslate',\r\n    description: '开源免费翻译，支持20种语言，每分钟20次',\r\n    baseUrl: 'https://libretranslate.de/translate',\r\n    status: 'stable',\r\n    rateLimit: '20/min',\r\n    languages: 20\r\n  },\r\n  \r\n  google_web: {\r\n    name: 'Google Web',\r\n    description: 'Google翻译网页版API，支持134种语言',\r\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\r\n    status: 'stable',\r\n    rateLimit: 'unlimited',\r\n    languages: 134\r\n  },\r\n\r\n  bing_web: {\r\n    name: 'Bing Web',\r\n    description: 'Bing翻译网页版API，支持128种语言',\r\n    baseUrl: 'https://www.bing.com/ttranslatev3',\r\n    status: 'experimental',\r\n    rateLimit: 'unlimited',\r\n    languages: 128\r\n  },\r\n\r\n  yandex_web: {\r\n    name: 'Yandex Web',\r\n    description: 'Yandex翻译网页版API，支持102种语言',\r\n    baseUrl: 'https://translate.yandex.net/api/v1/tr.json/translate',\r\n    status: 'experimental',\r\n    rateLimit: 'unlimited',\r\n    languages: 102\r\n  },\r\n\r\n  deepl_web: {\r\n    name: 'DeepL Web',\r\n    description: 'DeepL翻译网页版API，支持33种语言，质量极高',\r\n    baseUrl: 'https://www2.deepl.com/jsonrpc',\r\n    status: 'experimental',\r\n    rateLimit: 'limited',\r\n    languages: 33\r\n  }\r\n};\r\n\r\n/**\r\n * MyMemory翻译API - 最稳定的免费API\r\n */\r\nasync function translateWithMyMemory(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\r\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}&de=support@i-prompt.com`;\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'User-Agent': 'I-Prompt/3.0 Translation Service'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.responseStatus === 200 && data.responseData) {\r\n      return {\r\n        translatedText: data.responseData.translatedText,\r\n        confidence: data.responseData.match,\r\n        source: 'mymemory'\r\n      };\r\n    }\r\n    \r\n    throw new Error(data.responseDetails || '翻译失败');\r\n  } catch (error) {\r\n    console.error('MyMemory翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * LibreTranslate翻译API - 开源免费\r\n */\r\nasync function translateWithLibre(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    // 语言代码转换\r\n    const langMap = {\r\n      'zh': 'zh',\r\n      'zh-cn': 'zh',\r\n      'en': 'en',\r\n      'ja': 'ja',\r\n      'ko': 'ko',\r\n      'fr': 'fr',\r\n      'de': 'de',\r\n      'es': 'es',\r\n      'ru': 'ru',\r\n      'it': 'it',\r\n      'pt': 'pt',\r\n      'nl': 'nl',\r\n      'pl': 'pl',\r\n      'tr': 'tr',\r\n      'cs': 'cs',\r\n      'sv': 'sv',\r\n      'da': 'da',\r\n      'no': 'no',\r\n      'fi': 'fi',\r\n      'hu': 'hu'\r\n    };\r\n    \r\n    const target = langMap[targetLang.toLowerCase()] || 'zh';\r\n    const source = sourceLang === 'auto' ? 'auto' : (langMap[sourceLang.toLowerCase()] || 'en');\r\n    \r\n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        q: text,\r\n        source: source,\r\n        target: target,\r\n        format: 'text',\r\n        api_key: '' // 使用免费版本\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.translatedText) {\r\n      return {\r\n        translatedText: data.translatedText,\r\n        confidence: 'high',\r\n        source: 'libretranslate'\r\n      };\r\n    }\r\n    \r\n    throw new Error(data.error || '翻译失败');\r\n  } catch (error) {\r\n    console.error('LibreTranslate翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Google Web翻译API - 非官方但稳定\r\n */\r\nasync function translateWithGoogleWeb(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    const params = new URLSearchParams({\r\n      client: 'gtx',\r\n      sl: sourceLang,\r\n      tl: targetLang,\r\n      dt: 't',\r\n      q: text\r\n    });\r\n    \r\n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?${params}`;\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data && data[0] && data[0][0] && data[0][0][0]) {\r\n      return {\r\n        translatedText: data[0][0][0],\r\n        confidence: 'high',\r\n        source: 'google_web'\r\n      };\r\n    }\r\n    \r\n    throw new Error('Google翻译响应格式错误');\r\n  } catch (error) {\r\n    console.error('Google Web翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Bing Web翻译API - 实验性\r\n */\r\nasync function translateWithBingWeb(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    // 由于CORS限制，这个API在浏览器中可能无法直接使用\r\n    // 这里提供基本框架，实际使用需要代理\r\n    throw new Error('Bing Web API需要代理服务器支持');\r\n  } catch (error) {\r\n    console.error('Bing Web翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 内置AI绘画专业词典翻译（降级方案）\r\n */\r\nfunction translateWithDictionary(text) {\r\n  const aiArtDictionary = {\r\n    // 质量和技术类\r\n    'masterpiece': '杰作',\r\n    'best quality': '最佳质量',\r\n    'ultra detailed': '超详细',\r\n    'high resolution': '高分辨率',\r\n    'professional': '专业级',\r\n    '8k wallpaper': '8K壁纸',\r\n    '4k': '4K',\r\n    'hdr': 'HDR',\r\n    'extremely detailed': '极其详细',\r\n    'perfect': '完美',\r\n    'flawless': '无瑕',\r\n    'stunning': '令人惊叹',\r\n    'gorgeous': '华丽',\r\n    'epic': '史诗',\r\n    'amazing': '惊人',\r\n    'incredible': '难以置信',\r\n    'magnificent': '壮丽',\r\n    'sharp focus': '锐利焦点',\r\n    'photorealistic': '照片级写实',\r\n    'hyperrealistic': '超写实',\r\n    'detailed face': '精细面部',\r\n    'perfect anatomy': '完美解剖',\r\n    \r\n    // 人物类\r\n    'beautiful girl': '美丽女孩',\r\n    'cute girl': '可爱女孩',\r\n    'handsome boy': '英俊男孩',\r\n    'pretty woman': '漂亮女性',\r\n    'strong man': '强壮男性',\r\n    'elegant lady': '优雅女士',\r\n    'beautiful': '美丽',\r\n    'cute': '可爱',\r\n    'handsome': '英俊',\r\n    'pretty': '漂亮',\r\n    'young': '年轻',\r\n    'adult': '成人',\r\n    'teenager': '青少年',\r\n    'child': '儿童',\r\n    'girl': '女孩',\r\n    'boy': '男孩',\r\n    'woman': '女性',\r\n    'man': '男性',\r\n    'person': '人物',\r\n    'character': '角色',\r\n    'portrait': '肖像',\r\n    'face': '脸部',\r\n    'eyes': '眼睛',\r\n    'hair': '头发',\r\n    'smile': '微笑',\r\n    'looking at viewer': '看向观众',\r\n    \r\n    // 风格类\r\n    'anime style': '动漫风格',\r\n    'anime': '动漫',\r\n    'realistic': '写实',\r\n    'oil painting': '油画',\r\n    'watercolor': '水彩',\r\n    'digital art': '数字艺术',\r\n    'sketch': '素描',\r\n    'cartoon': '卡通',\r\n    '3d render': '3D渲染',\r\n    'concept art': '概念艺术',\r\n    'illustration': '插画',\r\n    'painting': '绘画',\r\n    'drawing': '素描',\r\n    'fantasy': '奇幻',\r\n    'sci-fi': '科幻',\r\n    'cyberpunk': '赛博朋克',\r\n    'steampunk': '蒸汽朋克',\r\n    'medieval': '中世纪',\r\n    'modern': '现代',\r\n    'futuristic': '未来派',\r\n    'retro': '复古',\r\n    'vintage': '怀旧',\r\n    'pixiv': 'Pixiv风格',\r\n    'artstation': 'ArtStation风格',\r\n    \r\n    // 光照和环境类\r\n    'cinematic lighting': '电影级光照',\r\n    'soft lighting': '柔和光照',\r\n    'dramatic lighting': '戏剧性光照',\r\n    'natural lighting': '自然光照',\r\n    'studio lighting': '摄影棚光照',\r\n    'warm lighting': '暖色光照',\r\n    'cool lighting': '冷色光照',\r\n    'backlight': '背光',\r\n    'rim light': '轮廓光',\r\n    'sunlight': '阳光',\r\n    'moonlight': '月光',\r\n    'golden hour': '黄金时刻',\r\n    'blue hour': '蓝调时刻',\r\n    'outdoors': '户外',\r\n    'indoors': '室内',\r\n    'nature': '自然',\r\n    'forest': '森林',\r\n    'beach': '海滩',\r\n    'city': '城市',\r\n    'sky': '天空',\r\n    'clouds': '云朵',\r\n    'sunset': '日落',\r\n    'sunrise': '日出',\r\n    \r\n    // 构图和姿势类\r\n    'full body': '全身',\r\n    'upper body': '上半身',\r\n    'close-up': '特写',\r\n    'wide shot': '远景',\r\n    'medium shot': '中景',\r\n    'cowboy shot': '牛仔镜头',\r\n    'standing': '站立',\r\n    'sitting': '坐着',\r\n    'lying': '躺着',\r\n    'walking': '行走',\r\n    'running': '奔跑',\r\n    'dancing': '舞蹈',\r\n    'from above': '俯视',\r\n    'from below': '仰视',\r\n    'side view': '侧视',\r\n    'back view': '背视',\r\n    \r\n    // 服装和配饰类\r\n    'school uniform': '校服',\r\n    'dress': '连衣裙',\r\n    'kimono': '和服',\r\n    'casual clothes': '便装',\r\n    'formal wear': '正装',\r\n    'bikini': '比基尼',\r\n    'glasses': '眼镜',\r\n    'hat': '帽子',\r\n    'jewelry': '珠宝',\r\n    'earrings': '耳环',\r\n    'necklace': '项链',\r\n    \r\n    // 情感和表情类\r\n    'happy': '开心',\r\n    'sad': '悲伤',\r\n    'angry': '愤怒',\r\n    'surprised': '惊讶',\r\n    'peaceful': '平静',\r\n    'excited': '兴奋',\r\n    'shy': '害羞',\r\n    'confident': '自信',\r\n    'mysterious': '神秘',\r\n    'playful': '顽皮',\r\n    \r\n    // 颜色类\r\n    'colorful': '多彩',\r\n    'monochrome': '单色',\r\n    'vibrant': '鲜艳',\r\n    'pastel': '粉彩',\r\n    'red': '红色',\r\n    'blue': '蓝色',\r\n    'green': '绿色',\r\n    'yellow': '黄色',\r\n    'purple': '紫色',\r\n    'pink': '粉色',\r\n    'black': '黑色',\r\n    'white': '白色',\r\n    'rainbow': '彩虹色',\r\n    \r\n    // 特殊效果类\r\n    'glowing': '发光',\r\n    'sparkling': '闪闪发光',\r\n    'shiny': '有光泽',\r\n    'transparent': '透明',\r\n    'reflection': '反射',\r\n    'shadow': '阴影',\r\n    'motion blur': '动态模糊',\r\n    'depth of field': '景深',\r\n    'bokeh': '散景',\r\n    'lens flare': '镜头光晕',\r\n    \r\n    // 负面提示词\r\n    'blurry': '模糊',\r\n    'low quality': '低质量',\r\n    'bad anatomy': '错误解剖',\r\n    'extra fingers': '多余手指',\r\n    'bad hands': '错误手部',\r\n    'deformed': '变形',\r\n    'ugly': '丑陋',\r\n    'duplicate': '重复',\r\n    'morbid': '病态',\r\n    'mutilated': '残缺',\r\n    'extra limbs': '多余肢体',\r\n    'disfigured': '毁容',\r\n    'malformed': '畸形',\r\n    'missing arms': '缺少手臂',\r\n    'missing legs': '缺少腿部',\r\n    'extra arms': '多余手臂',\r\n    'extra legs': '多余腿部',\r\n    'fused fingers': '融合手指',\r\n    'too many fingers': '手指过多',\r\n    'long neck': '脖子过长',\r\n    'cropped': '裁剪',\r\n    'worst quality': '最差质量',\r\n    'jpeg artifacts': 'JPEG伪影',\r\n    'signature': '签名',\r\n    'watermark': '水印',\r\n    'username': '用户名',\r\n    'text': '文字',\r\n    'logo': '标志',\r\n    'lowres': '低分辨率',\r\n    'error': '错误',\r\n    'out of frame': '超出画面',\r\n    'bad proportions': '比例错误',\r\n    'poorly drawn': '绘制差劣'\r\n  };\r\n\r\n  // 分词翻译\r\n  const words = text.toLowerCase().split(/[,，\\s]+/).filter(word => word.trim());\r\n  const translatedWords = words.map(word => {\r\n    const cleanWord = word.trim();\r\n    return aiArtDictionary[cleanWord] || cleanWord;\r\n  });\r\n  \r\n  const translatedText = translatedWords.join(', ');\r\n  \r\n  return {\r\n    translatedText,\r\n    confidence: 'dictionary',\r\n    source: 'ai_art_dictionary',\r\n    coverage: words.filter(word => aiArtDictionary[word.trim()]).length / words.length\r\n  };\r\n}\r\n\r\n/**\r\n * 智能翻译引擎选择器\r\n */\r\nasync function smartTranslate(text, options = {}) {\r\n  const {\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto',\r\n    preferredEngines = ['mymemory', 'libre', 'google_web'],\r\n    maxRetries = 2\r\n  } = options;\r\n\r\n  let lastError = null;\r\n  \r\n  // 按优先级尝试不同的翻译引擎\r\n  for (const engine of preferredEngines) {\r\n    for (let retry = 0; retry <= maxRetries; retry++) {\r\n      try {\r\n        let result;\r\n        \r\n        switch (engine) {\r\n          case 'mymemory':\r\n            result = await translateWithMyMemory(text, targetLang, sourceLang);\r\n            break;\r\n          case 'libre':\r\n            result = await translateWithLibre(text, targetLang, sourceLang);\r\n            break;\r\n          case 'google_web':\r\n            result = await translateWithGoogleWeb(text, targetLang, sourceLang);\r\n            break;\r\n          default:\r\n            continue;\r\n        }\r\n        \r\n        if (result && result.translatedText) {\r\n          return result;\r\n        }\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.warn(`翻译引擎 ${engine} 第 ${retry + 1} 次尝试失败:`, error.message);\r\n        \r\n        // 如果不是最后一次重试，等待一段时间\r\n        if (retry < maxRetries) {\r\n          await new Promise(resolve => setTimeout(resolve, 1000 * (retry + 1)));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 所有在线翻译都失败，使用词典翻译作为降级方案\r\n  console.warn('所有在线翻译引擎都失败，使用内置AI绘画词典');\r\n  const dictionaryResult = translateWithDictionary(text);\r\n  \r\n  if (dictionaryResult.coverage > 0.3) { // 如果词典覆盖率超过30%\r\n    return dictionaryResult;\r\n  }\r\n  \r\n  // 如果词典覆盖率也很低，返回原文\r\n  throw lastError || new Error('所有翻译方法都失败');\r\n}\r\n\r\n/**\r\n * 获取可用的翻译引擎列表\r\n */\r\nexport async function getAvailableTranslators() {\r\n  return TRANSLATION_APIS;\r\n}\r\n\r\n/**\r\n * 测试翻译引擎可用性\r\n */\r\nexport async function testTranslator(translatorKey) {\r\n  try {\r\n    const testText = 'beautiful girl';\r\n    let result;\r\n    \r\n    switch (translatorKey) {\r\n      case 'mymemory':\r\n        result = await translateWithMyMemory(testText, 'zh', 'en');\r\n        break;\r\n      case 'libre':\r\n        result = await translateWithLibre(testText, 'zh', 'en');\r\n        break;\r\n      case 'google_web':\r\n        result = await translateWithGoogleWeb(testText, 'zh', 'en');\r\n        break;\r\n      case 'dictionary':\r\n        result = translateWithDictionary(testText);\r\n        break;\r\n      default:\r\n        throw new Error('未知的翻译引擎');\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      result: result.translatedText,\r\n      confidence: result.confidence,\r\n      message: '测试成功'\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      message: '测试失败'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 主要翻译接口\r\n */\r\nexport async function translateText(text, options = {}) {\r\n  if (!text || !text.trim()) {\r\n    throw new Error('翻译文本不能为空');\r\n  }\r\n  \r\n  try {\r\n    const result = await smartTranslate(text, options);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 批量翻译\r\n */\r\nexport async function batchTranslate(texts, options = {}) {\r\n  const { maxConcurrent = 3, delayBetweenRequests = 500 } = options;\r\n  const results = [];\r\n  \r\n  // 分批处理，避免API限制\r\n  for (let i = 0; i < texts.length; i += maxConcurrent) {\r\n    const batch = texts.slice(i, i + maxConcurrent);\r\n    \r\n    const batchPromises = batch.map(async (text, index) => {\r\n      try {\r\n        // 添加延迟避免触发限流\r\n        if (index > 0) {\r\n          await new Promise(resolve => setTimeout(resolve, delayBetweenRequests));\r\n        }\r\n        \r\n        const result = await translateText(text, options);\r\n        return { success: true, text, result };\r\n      } catch (error) {\r\n        return { success: false, text, error: error.message };\r\n      }\r\n    });\r\n    \r\n    const batchResults = await Promise.all(batchPromises);\r\n    results.push(...batchResults);\r\n    \r\n    // 批次间延迟\r\n    if (i + maxConcurrent < texts.length) {\r\n      await new Promise(resolve => setTimeout(resolve, delayBetweenRequests * 2));\r\n    }\r\n  }\r\n  \r\n  return results;\r\n}\r\n\r\n/**\r\n * 检测文本语言\r\n */\r\nexport function detectLanguage(text) {\r\n  if (!text) return 'unknown';\r\n  \r\n  // 简单的语言检测\r\n  const chineseRegex = /[\\u4e00-\\u9fff]/;\r\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\r\n  const koreanRegex = /[\\uac00-\\ud7af]/;\r\n  \r\n  if (chineseRegex.test(text)) return 'zh';\r\n  if (japaneseRegex.test(text)) return 'ja';\r\n  if (koreanRegex.test(text)) return 'ko';\r\n  \r\n  return 'en'; // 默认为英文\r\n}\r\n\r\n/**\r\n * 专门用于标签翻译的优化接口\r\n */\r\nexport async function translateTag(tag, options = {}) {\r\n  try {\r\n    // 清理标签（去除权重标记等）\r\n    const cleanTag = tag.replace(/[(){}[\\]:0-9.]/g, '').trim();\r\n    \r\n    if (!cleanTag) {\r\n      throw new Error('标签为空');\r\n    }\r\n    \r\n    const result = await translateText(cleanTag, {\r\n      ...options,\r\n      preferredEngines: ['mymemory', 'google_web', 'libre'] // 标签翻译优化顺序\r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error(`标签翻译失败 \"${tag}\":`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 翻译提示词中的所有标签\r\n */\r\nexport async function translatePrompt(prompt, options = {}) {\r\n  if (!prompt || !prompt.trim()) {\r\n    throw new Error('提示词不能为空');\r\n  }\r\n  \r\n  try {\r\n    // 分割标签\r\n    const tags = prompt.split(',').map(tag => tag.trim()).filter(tag => tag);\r\n    \r\n    if (tags.length === 0) {\r\n      throw new Error('没有找到有效的标签');\r\n    }\r\n    \r\n    // 批量翻译标签\r\n    const translationResults = await batchTranslate(tags, {\r\n      ...options,\r\n      maxConcurrent: 2, // 降低并发数避免限流\r\n      delayBetweenRequests: 800\r\n    });\r\n    \r\n    // 组装翻译结果\r\n    const translatedTags = [];\r\n    const errors = [];\r\n    \r\n    translationResults.forEach((result, index) => {\r\n      if (result.success) {\r\n        translatedTags.push(result.result.translatedText);\r\n      } else {\r\n        translatedTags.push(tags[index]); // 翻译失败时保留原文\r\n        errors.push(`标签 \"${tags[index]}\" 翻译失败: ${result.error}`);\r\n      }\r\n    });\r\n    \r\n    return {\r\n      translatedText: translatedTags.join(', '),\r\n      originalText: prompt,\r\n      successCount: translationResults.filter(r => r.success).length,\r\n      totalCount: tags.length,\r\n      errors: errors,\r\n      coverage: translationResults.filter(r => r.success).length / tags.length\r\n    };\r\n  } catch (error) {\r\n    console.error('提示词翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default {\r\n  getAvailableTranslators,\r\n  testTranslator,\r\n  translateText,\r\n  translateTag,\r\n  batchTranslate,\r\n  detectLanguage\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}