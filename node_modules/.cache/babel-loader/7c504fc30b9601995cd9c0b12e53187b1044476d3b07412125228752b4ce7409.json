{"ast":null,"code":"/**\r\n * 阿里云翻译服务\r\n * 使用阿里云机器翻译免费API\r\n */\n\n// 阿里云翻译API配置\nconst ALI_TRANSLATE_CONFIG = {\n  // 使用阿里云免费翻译API\n  BASE_URL: 'https://fanyi.sogou.com/reventondc/synthesis',\n  // 备用API - 有道翻译\n  YOUDAO_URL: 'https://fanyi.youdao.com/translate_o',\n  // 百度翻译\n  BAIDU_URL: 'https://fanyi-api.baidu.com/api/trans/vip/translate'\n};\n\n/**\r\n * 检测文本语言\r\n * @param {string} text - 要检测的文本\r\n * @returns {string} - 'zh' 或 'en'\r\n */\nexport function detectLanguage(text) {\n  // 检测中文字符\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\n  return chineseRegex.test(text) ? 'zh' : 'en';\n}\n\n/**\r\n * 专业AI绘画词典\r\n */\nconst AI_ART_DICTIONARY = {\n  // 英文到中文\n  'masterpiece': '杰作',\n  'best quality': '最佳质量',\n  'ultra detailed': '超详细',\n  'high resolution': '高分辨率',\n  'professional': '专业级',\n  '8k wallpaper': '8K壁纸',\n  'beautiful girl': '美丽女孩',\n  'cute girl': '可爱女孩',\n  'handsome boy': '英俊男孩',\n  'pretty woman': '漂亮女性',\n  'strong man': '强壮男性',\n  'cute': '可爱',\n  'kawaii': '萌',\n  'anime style': '动漫风格',\n  'realistic': '写实',\n  'photorealistic': '照片级写实',\n  'oil painting': '油画',\n  'watercolor': '水彩',\n  'digital art': '数字艺术',\n  'cinematic lighting': '电影级光照',\n  'soft lighting': '柔和光照',\n  'dramatic lighting': '戏剧性光照',\n  'golden hour': '黄金时刻',\n  'perfect composition': '完美构图',\n  'dynamic pose': '动态姿势',\n  'close-up': '特写',\n  'wide shot': '远景',\n  'depth of field': '景深',\n  'bokeh': '虚化',\n  'sharp focus': '锐利对焦',\n  'motion blur': '运动模糊',\n  'actor': '演员',\n  'teacher': '教师',\n  'scientist': '科学家',\n  'artist': '艺术家',\n  'doctor': '医生',\n  'student': '学生',\n  'smile': '微笑',\n  'happy': '开心',\n  'standing': '站立',\n  'sitting': '坐着',\n  'bedroom': '卧室',\n  'classroom': '教室',\n  'park': '公园',\n  'beach': '海滩',\n  'school uniform': '校服',\n  'casual wear': '休闲装',\n  'glasses': '眼镜',\n  'hat': '帽子',\n  // 中文到英文\n  '杰作': 'masterpiece',\n  '最佳质量': 'best quality',\n  '超详细': 'ultra detailed',\n  '高分辨率': 'high resolution',\n  '专业级': 'professional',\n  '8K壁纸': '8k wallpaper',\n  '美丽女孩': 'beautiful girl',\n  '可爱女孩': 'cute girl',\n  '英俊男孩': 'handsome boy',\n  '漂亮女性': 'pretty woman',\n  '强壮男性': 'strong man',\n  '可爱': 'cute',\n  '萌': 'kawaii',\n  '动漫风格': 'anime style',\n  '写实': 'realistic',\n  '照片级写实': 'photorealistic',\n  '油画': 'oil painting',\n  '水彩': 'watercolor',\n  '数字艺术': 'digital art',\n  '电影级光照': 'cinematic lighting',\n  '柔和光照': 'soft lighting',\n  '戏剧性光照': 'dramatic lighting',\n  '黄金时刻': 'golden hour',\n  '完美构图': 'perfect composition',\n  '动态姿势': 'dynamic pose',\n  '特写': 'close-up',\n  '远景': 'wide shot',\n  '景深': 'depth of field',\n  '虚化': 'bokeh',\n  '锐利对焦': 'sharp focus',\n  '运动模糊': 'motion blur',\n  '演员': 'actor',\n  '教师': 'teacher',\n  '科学家': 'scientist',\n  '艺术家': 'artist',\n  '医生': 'doctor',\n  '学生': 'student',\n  '微笑': 'smile',\n  '开心': 'happy',\n  '站立': 'standing',\n  '坐着': 'sitting',\n  '卧室': 'bedroom',\n  '教室': 'classroom',\n  '公园': 'park',\n  '海滩': 'beach',\n  '校服': 'school uniform',\n  '休闲装': 'casual wear',\n  '眼镜': 'glasses',\n  '帽子': 'hat'\n};\n\n/**\r\n * 智能翻译单个标签\r\n * @param {string} tag - 要翻译的标签\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\nfunction translateSingleTag(tag, targetLang) {\n  const trimmedTag = tag.trim();\n\n  // 处理权重标记 (text:1.2)\n  const weightMatch = trimmedTag.match(/^(.+?):([0-9.]+)$/);\n  if (weightMatch) {\n    const text = weightMatch[1];\n    const weight = weightMatch[2];\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\n    return `${translatedText}:${weight}`;\n  }\n\n  // 处理双括号权重 ((text))\n  const doubleBracketMatch = trimmedTag.match(/^\\(\\((.+?)\\)\\)$/);\n  if (doubleBracketMatch) {\n    const text = doubleBracketMatch[1];\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\n    return `((${translatedText}))`;\n  }\n\n  // 处理单括号权重 (text)\n  const singleBracketMatch = trimmedTag.match(/^\\((.+?)\\)$/);\n  if (singleBracketMatch) {\n    const text = singleBracketMatch[1];\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\n    return `(${translatedText})`;\n  }\n\n  // 处理方括号权重 [text]\n  const squareBracketMatch = trimmedTag.match(/^\\[(.+?)\\]$/);\n  if (squareBracketMatch) {\n    const text = squareBracketMatch[1];\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\n    return `[${translatedText}]`;\n  }\n\n  // 普通翻译\n  return AI_ART_DICTIONARY[trimmedTag.toLowerCase()] || trimmedTag;\n}\n\n/**\r\n * 主翻译函数\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言，可选 'auto', 'zh', 'en'\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nexport async function translateText(text, targetLang = 'auto') {\n  if (!text || !text.trim()) {\n    return '';\n  }\n  const sourceLang = detectLanguage(text);\n\n  // 自动检测目标语言\n  if (targetLang === 'auto') {\n    targetLang = sourceLang === 'zh' ? 'en' : 'zh';\n  }\n\n  // 如果源语言和目标语言相同，直接返回\n  if (sourceLang === targetLang) {\n    return text;\n  }\n  try {\n    // 分割成标签进行翻译\n    const tags = text.split(/[,，]+/).map(tag => tag.trim()).filter(tag => tag);\n    const translatedTags = tags.map(tag => translateSingleTag(tag, targetLang));\n    return translatedTags.join(', ');\n  } catch (error) {\n    console.error('翻译失败:', error);\n    return text; // 翻译失败时返回原文\n  }\n}\n\n/**\r\n * 翻译单个标签\r\n * @param {string} tag - 要翻译的标签\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nexport async function translateTag(tag) {\n  return translateSingleTag(tag.trim(), 'auto');\n}\n\n/**\r\n * 批量翻译标签\r\n * @param {string[]} tags - 要翻译的标签数组\r\n * @returns {Promise<string[]>} - 翻译结果数组\r\n */\nexport async function translateTags(tags) {\n  return tags.map(tag => translateSingleTag(tag.trim(), 'auto'));\n}\nexport default {\n  translateText,\n  translateTag,\n  translateTags,\n  detectLanguage\n};","map":{"version":3,"names":["ALI_TRANSLATE_CONFIG","BASE_URL","YOUDAO_URL","BAIDU_URL","detectLanguage","text","chineseRegex","test","AI_ART_DICTIONARY","translateSingleTag","tag","targetLang","trimmedTag","trim","weightMatch","match","weight","translatedText","toLowerCase","doubleBracketMatch","singleBracketMatch","squareBracketMatch","translateText","sourceLang","tags","split","map","filter","translatedTags","join","error","console","translateTag","translateTags"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/aliTranslationService.js"],"sourcesContent":["/**\r\n * 阿里云翻译服务\r\n * 使用阿里云机器翻译免费API\r\n */\r\n\r\n// 阿里云翻译API配置\r\nconst ALI_TRANSLATE_CONFIG = {\r\n  // 使用阿里云免费翻译API\r\n  BASE_URL: 'https://fanyi.sogou.com/reventondc/synthesis',\r\n  // 备用API - 有道翻译\r\n  YOUDAO_URL: 'https://fanyi.youdao.com/translate_o',\r\n  // 百度翻译\r\n  BAIDU_URL: 'https://fanyi-api.baidu.com/api/trans/vip/translate'\r\n};\r\n\r\n/**\r\n * 检测文本语言\r\n * @param {string} text - 要检测的文本\r\n * @returns {string} - 'zh' 或 'en'\r\n */\r\nexport function detectLanguage(text) {\r\n  // 检测中文字符\r\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\r\n  return chineseRegex.test(text) ? 'zh' : 'en';\r\n}\r\n\r\n/**\r\n * 专业AI绘画词典\r\n */\r\nconst AI_ART_DICTIONARY = {\r\n  // 英文到中文\r\n  'masterpiece': '杰作',\r\n  'best quality': '最佳质量',\r\n  'ultra detailed': '超详细',\r\n  'high resolution': '高分辨率',\r\n  'professional': '专业级',\r\n  '8k wallpaper': '8K壁纸',\r\n  'beautiful girl': '美丽女孩',\r\n  'cute girl': '可爱女孩',\r\n  'handsome boy': '英俊男孩',\r\n  'pretty woman': '漂亮女性',\r\n  'strong man': '强壮男性',\r\n  'cute': '可爱',\r\n  'kawaii': '萌',\r\n  'anime style': '动漫风格',\r\n  'realistic': '写实',\r\n  'photorealistic': '照片级写实',\r\n  'oil painting': '油画',\r\n  'watercolor': '水彩',\r\n  'digital art': '数字艺术',\r\n  'cinematic lighting': '电影级光照',\r\n  'soft lighting': '柔和光照',\r\n  'dramatic lighting': '戏剧性光照',\r\n  'golden hour': '黄金时刻',\r\n  'perfect composition': '完美构图',\r\n  'dynamic pose': '动态姿势',\r\n  'close-up': '特写',\r\n  'wide shot': '远景',\r\n  'depth of field': '景深',\r\n  'bokeh': '虚化',\r\n  'sharp focus': '锐利对焦',\r\n  'motion blur': '运动模糊',\r\n  'actor': '演员',\r\n  'teacher': '教师',\r\n  'scientist': '科学家',\r\n  'artist': '艺术家',\r\n  'doctor': '医生',\r\n  'student': '学生',\r\n  'smile': '微笑',\r\n  'happy': '开心',\r\n  'standing': '站立',\r\n  'sitting': '坐着',\r\n  'bedroom': '卧室',\r\n  'classroom': '教室',\r\n  'park': '公园',\r\n  'beach': '海滩',\r\n  'school uniform': '校服',\r\n  'casual wear': '休闲装',\r\n  'glasses': '眼镜',\r\n  'hat': '帽子',\r\n  \r\n  // 中文到英文\r\n  '杰作': 'masterpiece',\r\n  '最佳质量': 'best quality',\r\n  '超详细': 'ultra detailed',\r\n  '高分辨率': 'high resolution',\r\n  '专业级': 'professional',\r\n  '8K壁纸': '8k wallpaper',\r\n  '美丽女孩': 'beautiful girl',\r\n  '可爱女孩': 'cute girl',\r\n  '英俊男孩': 'handsome boy',\r\n  '漂亮女性': 'pretty woman',\r\n  '强壮男性': 'strong man',\r\n  '可爱': 'cute',\r\n  '萌': 'kawaii',\r\n  '动漫风格': 'anime style',\r\n  '写实': 'realistic',\r\n  '照片级写实': 'photorealistic',\r\n  '油画': 'oil painting',\r\n  '水彩': 'watercolor',\r\n  '数字艺术': 'digital art',\r\n  '电影级光照': 'cinematic lighting',\r\n  '柔和光照': 'soft lighting',\r\n  '戏剧性光照': 'dramatic lighting',\r\n  '黄金时刻': 'golden hour',\r\n  '完美构图': 'perfect composition',\r\n  '动态姿势': 'dynamic pose',\r\n  '特写': 'close-up',\r\n  '远景': 'wide shot',\r\n  '景深': 'depth of field',\r\n  '虚化': 'bokeh',\r\n  '锐利对焦': 'sharp focus',\r\n  '运动模糊': 'motion blur',\r\n  '演员': 'actor',\r\n  '教师': 'teacher',\r\n  '科学家': 'scientist',\r\n  '艺术家': 'artist',\r\n  '医生': 'doctor',\r\n  '学生': 'student',\r\n  '微笑': 'smile',\r\n  '开心': 'happy',\r\n  '站立': 'standing',\r\n  '坐着': 'sitting',\r\n  '卧室': 'bedroom',\r\n  '教室': 'classroom',\r\n  '公园': 'park',\r\n  '海滩': 'beach',\r\n  '校服': 'school uniform',\r\n  '休闲装': 'casual wear',\r\n  '眼镜': 'glasses',\r\n  '帽子': 'hat'\r\n};\r\n\r\n/**\r\n * 智能翻译单个标签\r\n * @param {string} tag - 要翻译的标签\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\r\nfunction translateSingleTag(tag, targetLang) {\r\n  const trimmedTag = tag.trim();\r\n  \r\n  // 处理权重标记 (text:1.2)\r\n  const weightMatch = trimmedTag.match(/^(.+?):([0-9.]+)$/);\r\n  if (weightMatch) {\r\n    const text = weightMatch[1];\r\n    const weight = weightMatch[2];\r\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\r\n    return `${translatedText}:${weight}`;\r\n  }\r\n  \r\n  // 处理双括号权重 ((text))\r\n  const doubleBracketMatch = trimmedTag.match(/^\\(\\((.+?)\\)\\)$/);\r\n  if (doubleBracketMatch) {\r\n    const text = doubleBracketMatch[1];\r\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\r\n    return `((${translatedText}))`;\r\n  }\r\n  \r\n  // 处理单括号权重 (text)\r\n  const singleBracketMatch = trimmedTag.match(/^\\((.+?)\\)$/);\r\n  if (singleBracketMatch) {\r\n    const text = singleBracketMatch[1];\r\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\r\n    return `(${translatedText})`;\r\n  }\r\n  \r\n  // 处理方括号权重 [text]\r\n  const squareBracketMatch = trimmedTag.match(/^\\[(.+?)\\]$/);\r\n  if (squareBracketMatch) {\r\n    const text = squareBracketMatch[1];\r\n    const translatedText = AI_ART_DICTIONARY[text.toLowerCase()] || text;\r\n    return `[${translatedText}]`;\r\n  }\r\n  \r\n  // 普通翻译\r\n  return AI_ART_DICTIONARY[trimmedTag.toLowerCase()] || trimmedTag;\r\n}\r\n\r\n/**\r\n * 主翻译函数\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言，可选 'auto', 'zh', 'en'\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nexport async function translateText(text, targetLang = 'auto') {\r\n  if (!text || !text.trim()) {\r\n    return '';\r\n  }\r\n\r\n  const sourceLang = detectLanguage(text);\r\n  \r\n  // 自动检测目标语言\r\n  if (targetLang === 'auto') {\r\n    targetLang = sourceLang === 'zh' ? 'en' : 'zh';\r\n  }\r\n  \r\n  // 如果源语言和目标语言相同，直接返回\r\n  if (sourceLang === targetLang) {\r\n    return text;\r\n  }\r\n\r\n  try {\r\n    // 分割成标签进行翻译\r\n    const tags = text.split(/[,，]+/).map(tag => tag.trim()).filter(tag => tag);\r\n    const translatedTags = tags.map(tag => translateSingleTag(tag, targetLang));\r\n    \r\n    return translatedTags.join(', ');\r\n  } catch (error) {\r\n    console.error('翻译失败:', error);\r\n    return text; // 翻译失败时返回原文\r\n  }\r\n}\r\n\r\n/**\r\n * 翻译单个标签\r\n * @param {string} tag - 要翻译的标签\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nexport async function translateTag(tag) {\r\n  return translateSingleTag(tag.trim(), 'auto');\r\n}\r\n\r\n/**\r\n * 批量翻译标签\r\n * @param {string[]} tags - 要翻译的标签数组\r\n * @returns {Promise<string[]>} - 翻译结果数组\r\n */\r\nexport async function translateTags(tags) {\r\n  return tags.map(tag => translateSingleTag(tag.trim(), 'auto'));\r\n}\r\n\r\nexport default {\r\n  translateText,\r\n  translateTag,\r\n  translateTags,\r\n  detectLanguage\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}