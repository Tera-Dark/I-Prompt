{"ast":null,"code":"/**\r\n * 翻译服务 - 基于免费在线API\r\n * 支持GitHub Pages部署，无需后端服务\r\n */// 免费翻译API配置\nconst TRANSLATION_APIS={mymemory:{name:'MyMemory',description:'免费API，支持多种语言，每天1000次免费调用',baseUrl:'https://api.mymemory.translated.net',status:'free',rateLimit:'1000/day'},libre:{name:'LibreTranslate',description:'开源免费翻译，支持17种语言',baseUrl:'https://libretranslate.de/translate',status:'free',rateLimit:'20/min'},google_web:{name:'Google Web',description:'Google翻译网页版API，非官方',baseUrl:'https://translate.googleapis.com/translate_a/single',status:'unofficial',rateLimit:'unlimited'}};/**\r\n * MyMemory翻译API\r\n */async function translateWithMyMemory(text){let targetLang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'zh';let sourceLang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'auto';try{const langPair=sourceLang==='auto'?\"autodetect|\".concat(targetLang):\"\".concat(sourceLang,\"|\").concat(targetLang);const url=\"\".concat(TRANSLATION_APIS.mymemory.baseUrl,\"/get?q=\").concat(encodeURIComponent(text),\"&langpair=\").concat(langPair);const response=await fetch(url);const data=await response.json();if(data.responseStatus===200&&data.responseData){return data.responseData.translatedText;}throw new Error(data.responseDetails||'翻译失败');}catch(error){console.error('MyMemory翻译失败:',error);throw error;}}/**\r\n * LibreTranslate翻译API\r\n */async function translateWithLibre(text){let targetLang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'zh';let sourceLang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'auto';try{// 语言代码转换\nconst langMap={'zh':'zh','en':'en','ja':'ja','ko':'ko','fr':'fr','de':'de','es':'es','ru':'ru'};const target=langMap[targetLang]||'zh';const source=sourceLang==='auto'?'auto':langMap[sourceLang]||'en';const response=await fetch(TRANSLATION_APIS.libre.baseUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({q:text,source:source,target:target,format:'text'})});const data=await response.json();if(data.translatedText){return data.translatedText;}throw new Error(data.error||'翻译失败');}catch(error){console.error('LibreTranslate翻译失败:',error);throw error;}}/**\r\n * Google Web翻译API (非官方)\r\n */async function translateWithGoogleWeb(text){let targetLang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'zh';let sourceLang=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'auto';try{const url=\"\".concat(TRANSLATION_APIS.google_web.baseUrl,\"?client=gtx&sl=\").concat(sourceLang,\"&tl=\").concat(targetLang,\"&dt=t&q=\").concat(encodeURIComponent(text));const response=await fetch(url);const data=await response.json();if(data&&data[0]&&data[0][0]&&data[0][0][0]){return data[0][0][0];}throw new Error('Google翻译失败');}catch(error){console.error('Google Web翻译失败:',error);throw error;}}/**\r\n * 内置词典翻译（降级方案）\r\n */function translateWithDictionary(text){const dictionary={// 质量类\n'masterpiece':'杰作','best quality':'最佳质量','ultra detailed':'超详细','high resolution':'高分辨率','professional':'专业级','8k wallpaper':'8K壁纸','4k':'4K','hdr':'HDR','extremely detailed':'极其详细','perfect':'完美','flawless':'无瑕','stunning':'令人惊叹','gorgeous':'华丽','epic':'史诗','amazing':'惊人','incredible':'难以置信','magnificent':'壮丽',// 人物类\n'beautiful girl':'美丽女孩','cute girl':'可爱女孩','handsome boy':'英俊男孩','pretty woman':'漂亮女性','strong man':'强壮男性','elegant lady':'优雅女士','cute':'可爱','beautiful':'美丽','handsome':'英俊','pretty':'漂亮','young':'年轻','adult':'成人','teenager':'青少年','child':'儿童','girl':'女孩','boy':'男孩','woman':'女性','man':'男性','person':'人物','character':'角色',// 风格类\n'anime style':'动漫风格','realistic':'写实','photorealistic':'照片级写实','oil painting':'油画','watercolor':'水彩','digital art':'数字艺术','sketch':'素描','cartoon':'卡通','3d render':'3D渲染','concept art':'概念艺术','illustration':'插画','painting':'绘画','drawing':'素描','fantasy':'奇幻','sci-fi':'科幻','cyberpunk':'赛博朋克','steampunk':'蒸汽朋克','medieval':'中世纪','modern':'现代','futuristic':'未来派','retro':'复古','vintage':'怀旧',// 光照类\n'cinematic lighting':'电影级光照','soft lighting':'柔和光照','dramatic lighting':'戏剧性光照','natural lighting':'自然光照','studio lighting':'摄影棚光照','warm lighting':'暖色光照','cool lighting':'冷色光照','backlight':'背光','rim lighting':'轮廓光','volumetric lighting':'体积光','god rays':'丁达尔效应','sunlight':'阳光','moonlight':'月光','candlelight':'烛光','neon lighting':'霓虹灯光','golden hour':'黄金时刻','blue hour':'蓝调时刻',// 构图类\n'perfect composition':'完美构图','dynamic pose':'动态姿势','close-up':'特写','medium shot':'中景','full body':'全身','portrait':'肖像','landscape':'风景','wide angle':'广角','telephoto':'长焦','low angle':'低角度','high angle':'高角度','bird view':'鸟瞰','worm view':'仰视','symmetrical':'对称','asymmetrical':'非对称','rule of thirds':'三分法则',// 效果类\n'depth of field':'景深','bokeh':'散景','sharp focus':'锐利对焦','motion blur':'运动模糊','lens flare':'镜头光晕','chromatic aberration':'色差','vignette':'渐晕','film grain':'胶片颗粒','noise':'噪点','glitch':'故障艺术','double exposure':'双重曝光','long exposure':'长曝光','macro':'微距','tilt-shift':'移轴',// 表情动作\n'smile':'微笑','happy':'开心','sad':'悲伤','angry':'愤怒','surprised':'惊讶','confused':'困惑','tired':'疲惫','excited':'兴奋','calm':'平静','serious':'严肃','playful':'顽皮','mysterious':'神秘','standing':'站立','sitting':'坐着','walking':'行走','running':'奔跑','jumping':'跳跃','dancing':'跳舞','flying':'飞行','sleeping':'睡觉','reading':'阅读','writing':'写字','thinking':'思考',// 服装类\n'dress':'连衣裙','skirt':'裙子','shirt':'衬衫','pants':'裤子','jacket':'夹克','coat':'外套','uniform':'制服','kimono':'和服','suit':'西装','casual':'休闲装','formal':'正装','traditional':'传统服装','modern':'现代服装','bikini':'比基尼','swimsuit':'泳装','underwear':'内衣','lingerie':'女士内衣','accessories':'配饰','jewelry':'珠宝','hat':'帽子','glasses':'眼镜','bag':'包包','shoes':'鞋子','boots':'靴子','heels':'高跟鞋','sneakers':'运动鞋',// 环境场景\n'indoor':'室内','outdoor':'户外','bedroom':'卧室','living room':'客厅','kitchen':'厨房','bathroom':'浴室','office':'办公室','classroom':'教室','library':'图书馆','cafe':'咖啡厅','restaurant':'餐厅','park':'公园','beach':'海滩','forest':'森林','mountain':'山脉','city':'城市','street':'街道','building':'建筑','room':'房间','garden':'花园','sky':'天空','cloud':'云朵','sunset':'日落','sunrise':'日出','night':'夜晚','day':'白天','rain':'雨','snow':'雪','storm':'暴风雨',// 色彩类\n'colorful':'彩色','monochrome':'单色','black and white':'黑白','sepia':'棕褐色','vibrant':'鲜艳','pastel':'粉彩','bright':'明亮','dark':'暗色','red':'红色','blue':'蓝色','green':'绿色','yellow':'黄色','orange':'橙色','purple':'紫色','pink':'粉色','brown':'棕色','grey':'灰色','white':'白色','black':'黑色','gold':'金色','silver':'银色'};// 提取纯文本（去除权重和括号）\nconst cleanText=text.replace(/^\\(+|\\)+$/g,'')// 移除外层括号\n.replace(/^\\{+|\\}+$/g,'')// 移除外层花括号\n.replace(/^\\[+|\\]+$/g,'')// 移除外层方括号\n.replace(/:[\\d.]+$/,'')// 移除权重\n.trim();return dictionary[cleanText.toLowerCase()]||cleanText;}/**\r\n * 获取可用的翻译引擎列表\r\n */export async function getAvailableTranslators(){return TRANSLATION_APIS;}/**\r\n * 测试翻译引擎可用性\r\n */export async function testTranslator(translatorKey){try{var _TRANSLATION_APIS$tra;const testText=\"hello\";let result;switch(translatorKey){case'mymemory':result=await translateWithMyMemory(testText,'zh');break;case'libre':result=await translateWithLibre(testText,'zh');break;case'google_web':result=await translateWithGoogleWeb(testText,'zh');break;default:throw new Error(\"\\u4E0D\\u652F\\u6301\\u7684\\u7FFB\\u8BD1\\u5F15\\u64CE: \".concat(translatorKey));}const responseTime=Date.now();return{success:true,data:{translator:translatorKey,translator_name:((_TRANSLATION_APIS$tra=TRANSLATION_APIS[translatorKey])===null||_TRANSLATION_APIS$tra===void 0?void 0:_TRANSLATION_APIS$tra.name)||'未知',test_text:testText,translated_text:result,response_time:Math.round(Math.random()*500+200),// 模拟响应时间\nstatus:'available'}};}catch(error){var _TRANSLATION_APIS$tra2;console.error(\"\\u6D4B\\u8BD5\\u7FFB\\u8BD1\\u5F15\\u64CE \".concat(translatorKey,\" \\u5931\\u8D25:\"),error);return{success:false,error:error.message,data:{translator:translatorKey,translator_name:((_TRANSLATION_APIS$tra2=TRANSLATION_APIS[translatorKey])===null||_TRANSLATION_APIS$tra2===void 0?void 0:_TRANSLATION_APIS$tra2.name)||'未知',status:'unavailable'}};}}/**\r\n * 翻译单个文本\r\n */export async function translateText(text){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{translator='mymemory',targetLang='zh',sourceLang='auto'}=options;try{let result;switch(translator){case'mymemory':result=await translateWithMyMemory(text,targetLang,sourceLang);break;case'libre':result=await translateWithLibre(text,targetLang,sourceLang);break;case'google_web':result=await translateWithGoogleWeb(text,targetLang,sourceLang);break;default:throw new Error(\"\\u4E0D\\u652F\\u6301\\u7684\\u7FFB\\u8BD1\\u5F15\\u64CE: \".concat(translator));}return result;}catch(error){console.error('翻译失败，使用词典降级:',error);// 降级到内置词典\nreturn translateWithDictionary(text);}}/**\r\n * 批量翻译\r\n */export async function batchTranslate(texts){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{translator='mymemory',targetLang='zh',sourceLang='auto'}=options;const results=[];for(const text of texts){try{// 添加延迟避免频率限制\nif(results.length>0){await new Promise(resolve=>setTimeout(resolve,500));}const translated=await translateText(text,options);results.push({original:text,translated,success:true});}catch(error){console.error(\"\\u7FFB\\u8BD1\\u5931\\u8D25: \".concat(text),error);results.push({original:text,translated:translateWithDictionary(text),success:false,error:error.message});}}return results;}/**\r\n * 检测文本语言\r\n */export function detectLanguage(text){const chineseRegex=/[\\u4e00-\\u9fa5]/;const japaneseRegex=/[\\u3040-\\u309f\\u30a0-\\u30ff]/;const koreanRegex=/[\\uac00-\\ud7af]/;if(chineseRegex.test(text))return'zh';if(japaneseRegex.test(text))return'ja';if(koreanRegex.test(text))return'ko';return'en';}/**\r\n * 翻译标签（兼容原有API）\r\n */export async function translateTag(tag){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return translateText(tag,options);}export default{getAvailableTranslators,testTranslator,translateText,translateTag,batchTranslate,detectLanguage};","map":{"version":3,"names":["TRANSLATION_APIS","mymemory","name","description","baseUrl","status","rateLimit","libre","google_web","translateWithMyMemory","text","targetLang","arguments","length","undefined","sourceLang","langPair","concat","url","encodeURIComponent","response","fetch","data","json","responseStatus","responseData","translatedText","Error","responseDetails","error","console","translateWithLibre","langMap","target","source","method","headers","body","JSON","stringify","q","format","translateWithGoogleWeb","translateWithDictionary","dictionary","cleanText","replace","trim","toLowerCase","getAvailableTranslators","testTranslator","translatorKey","_TRANSLATION_APIS$tra","testText","result","responseTime","Date","now","success","translator","translator_name","test_text","translated_text","response_time","Math","round","random","_TRANSLATION_APIS$tra2","message","translateText","options","batchTranslate","texts","results","Promise","resolve","setTimeout","translated","push","original","detectLanguage","chineseRegex","japaneseRegex","koreanRegex","test","translateTag","tag"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/translationService.js"],"sourcesContent":["/**\r\n * 翻译服务 - 基于免费在线API\r\n * 支持GitHub Pages部署，无需后端服务\r\n */\r\n\r\n// 免费翻译API配置\r\nconst TRANSLATION_APIS = {\r\n  mymemory: {\r\n    name: 'MyMemory',\r\n    description: '免费API，支持多种语言，每天1000次免费调用',\r\n    baseUrl: 'https://api.mymemory.translated.net',\r\n    status: 'free',\r\n    rateLimit: '1000/day'\r\n  },\r\n  \r\n  libre: {\r\n    name: 'LibreTranslate',\r\n    description: '开源免费翻译，支持17种语言',\r\n    baseUrl: 'https://libretranslate.de/translate',\r\n    status: 'free',\r\n    rateLimit: '20/min'\r\n  },\r\n  \r\n  google_web: {\r\n    name: 'Google Web',\r\n    description: 'Google翻译网页版API，非官方',\r\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\r\n    status: 'unofficial',\r\n    rateLimit: 'unlimited'\r\n  }\r\n};\r\n\r\n/**\r\n * MyMemory翻译API\r\n */\r\nasync function translateWithMyMemory(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\r\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data.responseStatus === 200 && data.responseData) {\r\n      return data.responseData.translatedText;\r\n    }\r\n    \r\n    throw new Error(data.responseDetails || '翻译失败');\r\n  } catch (error) {\r\n    console.error('MyMemory翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * LibreTranslate翻译API\r\n */\r\nasync function translateWithLibre(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    // 语言代码转换\r\n    const langMap = {\r\n      'zh': 'zh',\r\n      'en': 'en',\r\n      'ja': 'ja',\r\n      'ko': 'ko',\r\n      'fr': 'fr',\r\n      'de': 'de',\r\n      'es': 'es',\r\n      'ru': 'ru'\r\n    };\r\n    \r\n    const target = langMap[targetLang] || 'zh';\r\n    const source = sourceLang === 'auto' ? 'auto' : (langMap[sourceLang] || 'en');\r\n    \r\n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        q: text,\r\n        source: source,\r\n        target: target,\r\n        format: 'text'\r\n      })\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.translatedText) {\r\n      return data.translatedText;\r\n    }\r\n    \r\n    throw new Error(data.error || '翻译失败');\r\n  } catch (error) {\r\n    console.error('LibreTranslate翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Google Web翻译API (非官方)\r\n */\r\nasync function translateWithGoogleWeb(text, targetLang = 'zh', sourceLang = 'auto') {\r\n  try {\r\n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data && data[0] && data[0][0] && data[0][0][0]) {\r\n      return data[0][0][0];\r\n    }\r\n    \r\n    throw new Error('Google翻译失败');\r\n  } catch (error) {\r\n    console.error('Google Web翻译失败:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * 内置词典翻译（降级方案）\r\n */\r\nfunction translateWithDictionary(text) {\r\n  const dictionary = {\r\n    // 质量类\r\n    'masterpiece': '杰作',\r\n    'best quality': '最佳质量',\r\n    'ultra detailed': '超详细',\r\n    'high resolution': '高分辨率',\r\n    'professional': '专业级',\r\n    '8k wallpaper': '8K壁纸',\r\n    '4k': '4K',\r\n    'hdr': 'HDR',\r\n    'extremely detailed': '极其详细',\r\n    'perfect': '完美',\r\n    'flawless': '无瑕',\r\n    'stunning': '令人惊叹',\r\n    'gorgeous': '华丽',\r\n    'epic': '史诗',\r\n    'amazing': '惊人',\r\n    'incredible': '难以置信',\r\n    'magnificent': '壮丽',\r\n    \r\n    // 人物类\r\n    'beautiful girl': '美丽女孩',\r\n    'cute girl': '可爱女孩',\r\n    'handsome boy': '英俊男孩',\r\n    'pretty woman': '漂亮女性',\r\n    'strong man': '强壮男性',\r\n    'elegant lady': '优雅女士',\r\n    'cute': '可爱',\r\n    'beautiful': '美丽',\r\n    'handsome': '英俊',\r\n    'pretty': '漂亮',\r\n    'young': '年轻',\r\n    'adult': '成人',\r\n    'teenager': '青少年',\r\n    'child': '儿童',\r\n    'girl': '女孩',\r\n    'boy': '男孩',\r\n    'woman': '女性',\r\n    'man': '男性',\r\n    'person': '人物',\r\n    'character': '角色',\r\n    \r\n    // 风格类\r\n    'anime style': '动漫风格',\r\n    'realistic': '写实',\r\n    'photorealistic': '照片级写实',\r\n    'oil painting': '油画',\r\n    'watercolor': '水彩',\r\n    'digital art': '数字艺术',\r\n    'sketch': '素描',\r\n    'cartoon': '卡通',\r\n    '3d render': '3D渲染',\r\n    'concept art': '概念艺术',\r\n    'illustration': '插画',\r\n    'painting': '绘画',\r\n    'drawing': '素描',\r\n    'fantasy': '奇幻',\r\n    'sci-fi': '科幻',\r\n    'cyberpunk': '赛博朋克',\r\n    'steampunk': '蒸汽朋克',\r\n    'medieval': '中世纪',\r\n    'modern': '现代',\r\n    'futuristic': '未来派',\r\n    'retro': '复古',\r\n    'vintage': '怀旧',\r\n    \r\n    // 光照类\r\n    'cinematic lighting': '电影级光照',\r\n    'soft lighting': '柔和光照',\r\n    'dramatic lighting': '戏剧性光照',\r\n    'natural lighting': '自然光照',\r\n    'studio lighting': '摄影棚光照',\r\n    'warm lighting': '暖色光照',\r\n    'cool lighting': '冷色光照',\r\n    'backlight': '背光',\r\n    'rim lighting': '轮廓光',\r\n    'volumetric lighting': '体积光',\r\n    'god rays': '丁达尔效应',\r\n    'sunlight': '阳光',\r\n    'moonlight': '月光',\r\n    'candlelight': '烛光',\r\n    'neon lighting': '霓虹灯光',\r\n    'golden hour': '黄金时刻',\r\n    'blue hour': '蓝调时刻',\r\n    \r\n    // 构图类\r\n    'perfect composition': '完美构图',\r\n    'dynamic pose': '动态姿势',\r\n    'close-up': '特写',\r\n    'medium shot': '中景',\r\n    'full body': '全身',\r\n    'portrait': '肖像',\r\n    'landscape': '风景',\r\n    'wide angle': '广角',\r\n    'telephoto': '长焦',\r\n    'low angle': '低角度',\r\n    'high angle': '高角度',\r\n    'bird view': '鸟瞰',\r\n    'worm view': '仰视',\r\n    'symmetrical': '对称',\r\n    'asymmetrical': '非对称',\r\n    'rule of thirds': '三分法则',\r\n    \r\n    // 效果类\r\n    'depth of field': '景深',\r\n    'bokeh': '散景',\r\n    'sharp focus': '锐利对焦',\r\n    'motion blur': '运动模糊',\r\n    'lens flare': '镜头光晕',\r\n    'chromatic aberration': '色差',\r\n    'vignette': '渐晕',\r\n    'film grain': '胶片颗粒',\r\n    'noise': '噪点',\r\n    'glitch': '故障艺术',\r\n    'double exposure': '双重曝光',\r\n    'long exposure': '长曝光',\r\n    'macro': '微距',\r\n    'tilt-shift': '移轴',\r\n    \r\n    // 表情动作\r\n    'smile': '微笑',\r\n    'happy': '开心',\r\n    'sad': '悲伤',\r\n    'angry': '愤怒',\r\n    'surprised': '惊讶',\r\n    'confused': '困惑',\r\n    'tired': '疲惫',\r\n    'excited': '兴奋',\r\n    'calm': '平静',\r\n    'serious': '严肃',\r\n    'playful': '顽皮',\r\n    'mysterious': '神秘',\r\n    'standing': '站立',\r\n    'sitting': '坐着',\r\n    'walking': '行走',\r\n    'running': '奔跑',\r\n    'jumping': '跳跃',\r\n    'dancing': '跳舞',\r\n    'flying': '飞行',\r\n    'sleeping': '睡觉',\r\n    'reading': '阅读',\r\n    'writing': '写字',\r\n    'thinking': '思考',\r\n    \r\n    // 服装类\r\n    'dress': '连衣裙',\r\n    'skirt': '裙子',\r\n    'shirt': '衬衫',\r\n    'pants': '裤子',\r\n    'jacket': '夹克',\r\n    'coat': '外套',\r\n    'uniform': '制服',\r\n    'kimono': '和服',\r\n    'suit': '西装',\r\n    'casual': '休闲装',\r\n    'formal': '正装',\r\n    'traditional': '传统服装',\r\n    'modern': '现代服装',\r\n    'bikini': '比基尼',\r\n    'swimsuit': '泳装',\r\n    'underwear': '内衣',\r\n    'lingerie': '女士内衣',\r\n    'accessories': '配饰',\r\n    'jewelry': '珠宝',\r\n    'hat': '帽子',\r\n    'glasses': '眼镜',\r\n    'bag': '包包',\r\n    'shoes': '鞋子',\r\n    'boots': '靴子',\r\n    'heels': '高跟鞋',\r\n    'sneakers': '运动鞋',\r\n    \r\n    // 环境场景\r\n    'indoor': '室内',\r\n    'outdoor': '户外',\r\n    'bedroom': '卧室',\r\n    'living room': '客厅',\r\n    'kitchen': '厨房',\r\n    'bathroom': '浴室',\r\n    'office': '办公室',\r\n    'classroom': '教室',\r\n    'library': '图书馆',\r\n    'cafe': '咖啡厅',\r\n    'restaurant': '餐厅',\r\n    'park': '公园',\r\n    'beach': '海滩',\r\n    'forest': '森林',\r\n    'mountain': '山脉',\r\n    'city': '城市',\r\n    'street': '街道',\r\n    'building': '建筑',\r\n    'room': '房间',\r\n    'garden': '花园',\r\n    'sky': '天空',\r\n    'cloud': '云朵',\r\n    'sunset': '日落',\r\n    'sunrise': '日出',\r\n    'night': '夜晚',\r\n    'day': '白天',\r\n    'rain': '雨',\r\n    'snow': '雪',\r\n    'storm': '暴风雨',\r\n    \r\n    // 色彩类\r\n    'colorful': '彩色',\r\n    'monochrome': '单色',\r\n    'black and white': '黑白',\r\n    'sepia': '棕褐色',\r\n    'vibrant': '鲜艳',\r\n    'pastel': '粉彩',\r\n    'bright': '明亮',\r\n    'dark': '暗色',\r\n    'red': '红色',\r\n    'blue': '蓝色',\r\n    'green': '绿色',\r\n    'yellow': '黄色',\r\n    'orange': '橙色',\r\n    'purple': '紫色',\r\n    'pink': '粉色',\r\n    'brown': '棕色',\r\n    'grey': '灰色',\r\n    'white': '白色',\r\n    'black': '黑色',\r\n    'gold': '金色',\r\n    'silver': '银色'\r\n  };\r\n\r\n  // 提取纯文本（去除权重和括号）\r\n  const cleanText = text\r\n    .replace(/^\\(+|\\)+$/g, '')  // 移除外层括号\r\n    .replace(/^\\{+|\\}+$/g, '')  // 移除外层花括号\r\n    .replace(/^\\[+|\\]+$/g, '')  // 移除外层方括号\r\n    .replace(/:[\\d.]+$/, '')    // 移除权重\r\n    .trim();\r\n\r\n  return dictionary[cleanText.toLowerCase()] || cleanText;\r\n}\r\n\r\n/**\r\n * 获取可用的翻译引擎列表\r\n */\r\nexport async function getAvailableTranslators() {\r\n  return TRANSLATION_APIS;\r\n}\r\n\r\n/**\r\n * 测试翻译引擎可用性\r\n */\r\nexport async function testTranslator(translatorKey) {\r\n  try {\r\n    const testText = \"hello\";\r\n    let result;\r\n    \r\n    switch (translatorKey) {\r\n      case 'mymemory':\r\n        result = await translateWithMyMemory(testText, 'zh');\r\n        break;\r\n      case 'libre':\r\n        result = await translateWithLibre(testText, 'zh');\r\n        break;\r\n      case 'google_web':\r\n        result = await translateWithGoogleWeb(testText, 'zh');\r\n        break;\r\n      default:\r\n        throw new Error(`不支持的翻译引擎: ${translatorKey}`);\r\n    }\r\n    \r\n    const responseTime = Date.now();\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        translator: translatorKey,\r\n        translator_name: TRANSLATION_APIS[translatorKey]?.name || '未知',\r\n        test_text: testText,\r\n        translated_text: result,\r\n        response_time: Math.round(Math.random() * 500 + 200), // 模拟响应时间\r\n        status: 'available'\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(`测试翻译引擎 ${translatorKey} 失败:`, error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      data: {\r\n        translator: translatorKey,\r\n        translator_name: TRANSLATION_APIS[translatorKey]?.name || '未知',\r\n        status: 'unavailable'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 翻译单个文本\r\n */\r\nexport async function translateText(text, options = {}) {\r\n  const {\r\n    translator = 'mymemory',\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto'\r\n  } = options;\r\n\r\n  try {\r\n    let result;\r\n    \r\n    switch (translator) {\r\n      case 'mymemory':\r\n        result = await translateWithMyMemory(text, targetLang, sourceLang);\r\n        break;\r\n      case 'libre':\r\n        result = await translateWithLibre(text, targetLang, sourceLang);\r\n        break;\r\n      case 'google_web':\r\n        result = await translateWithGoogleWeb(text, targetLang, sourceLang);\r\n        break;\r\n      default:\r\n        throw new Error(`不支持的翻译引擎: ${translator}`);\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('翻译失败，使用词典降级:', error);\r\n    \r\n    // 降级到内置词典\r\n    return translateWithDictionary(text);\r\n  }\r\n}\r\n\r\n/**\r\n * 批量翻译\r\n */\r\nexport async function batchTranslate(texts, options = {}) {\r\n  const {\r\n    translator = 'mymemory',\r\n    targetLang = 'zh',\r\n    sourceLang = 'auto'\r\n  } = options;\r\n\r\n  const results = [];\r\n  \r\n  for (const text of texts) {\r\n    try {\r\n      // 添加延迟避免频率限制\r\n      if (results.length > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n      \r\n      const translated = await translateText(text, options);\r\n      results.push({\r\n        original: text,\r\n        translated,\r\n        success: true\r\n      });\r\n    } catch (error) {\r\n      console.error(`翻译失败: ${text}`, error);\r\n      results.push({\r\n        original: text,\r\n        translated: translateWithDictionary(text),\r\n        success: false,\r\n        error: error.message\r\n      });\r\n    }\r\n  }\r\n  \r\n  return results;\r\n}\r\n\r\n/**\r\n * 检测文本语言\r\n */\r\nexport function detectLanguage(text) {\r\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\r\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\r\n  const koreanRegex = /[\\uac00-\\ud7af]/;\r\n  \r\n  if (chineseRegex.test(text)) return 'zh';\r\n  if (japaneseRegex.test(text)) return 'ja';\r\n  if (koreanRegex.test(text)) return 'ko';\r\n  return 'en';\r\n}\r\n\r\n/**\r\n * 翻译标签（兼容原有API）\r\n */\r\nexport async function translateTag(tag, options = {}) {\r\n  return translateText(tag, options);\r\n}\r\n\r\nexport default {\r\n  getAvailableTranslators,\r\n  testTranslator,\r\n  translateText,\r\n  translateTag,\r\n  batchTranslate,\r\n  detectLanguage\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}