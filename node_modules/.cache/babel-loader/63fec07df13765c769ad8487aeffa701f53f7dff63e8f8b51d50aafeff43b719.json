{"ast":null,"code":"import{useState,useCallback}from'react';import{validateInput,cleanPrompt}from'../utils/validation';import{copyToClipboard}from'../utils/clipboard';import{APP_CONFIG,ERROR_MESSAGES,SUCCESS_MESSAGES}from'../constants/config';/**\n * 提示词生成器 Hook\n */export const usePromptGenerator=()=>{const[inputText,setInputText]=useState('');const[generatedPrompt,setGeneratedPrompt]=useState('');const[selectedStyle,setSelectedStyle]=useState('');const[isGenerating,setIsGenerating]=useState(false);const[generationSource,setGenerationSource]=useState('local');// 'local' 或 'api'\nconst[generationCount,setGenerationCount]=useState(0);const[apiError,setApiError]=useState(null);const[validationErrors,setValidationErrors]=useState([]);/**\n   * 验证输入\n   */const validatePromptInput=useCallback(text=>{const validation=validateInput(text);setValidationErrors(validation.errors);return validation.isValid;},[]);/**\n   * 生成提示词 - 本地规则\n   */const generateLocalPrompt=useCallback((text,style)=>{// 清理输入\nconst cleanedText=cleanPrompt(text);// 基础质量标签\nconst qualityTags='masterpiece, best quality, ultra detailed';// 风格相关标签\nconst styleMap={'realistic':'photorealistic, hyperrealistic, detailed','anime':'anime style, cel shading, vibrant colors','oil':'oil painting, classical art, painterly','watercolor':'watercolor, soft colors, flowing','sketch':'pencil sketch, charcoal drawing, artistic'};const styleTag=styleMap[style]||'';// 组合提示词\nconst parts=[qualityTags,cleanedText,styleTag].filter(part=>part.trim());return parts.join(', ');},[]);/**\n   * 生成提示词 - API调用\n   */const generateApiPrompt=useCallback(async(text,style)=>{const requestBody={model:APP_CONFIG.API.MODEL,messages:[{role:'system',content:\"\\u4F60\\u662F\\u4E00\\u4E2A\\u4E13\\u4E1A\\u7684AI\\u7ED8\\u753B\\u63D0\\u793A\\u8BCD\\u751F\\u6210\\u52A9\\u624B\\u3002\\u8BF7\\u6839\\u636E\\u7528\\u6237\\u7684\\u63CF\\u8FF0\\uFF0C\\u751F\\u6210\\u9AD8\\u8D28\\u91CF\\u7684\\u82F1\\u6587\\u63D0\\u793A\\u8BCD\\u3002\\n\\n\\u8981\\u6C42\\uFF1A\\n1. \\u8F93\\u51FA\\u7EAF\\u82F1\\u6587\\u63D0\\u793A\\u8BCD\\uFF0C\\u7528\\u9017\\u53F7\\u5206\\u9694\\n2. \\u5305\\u542B\\u8D28\\u91CF\\u63A7\\u5236\\u8BCD\\u5982 masterpiece, best quality\\n3. \\u6839\\u636E\\u98CE\\u683C\\u8981\\u6C42\\u6DFB\\u52A0\\u5BF9\\u5E94\\u7684\\u98CE\\u683C\\u63CF\\u8FF0\\u8BCD\\n4. \\u786E\\u4FDD\\u8BED\\u6CD5\\u6B63\\u786E\\uFF0C\\u8BCD\\u6C47\\u4E13\\u4E1A\\n5. \\u957F\\u5EA6\\u63A7\\u5236\\u5728100-200\\u4E2A\\u8BCD\\u6C47\\u4E4B\\u95F4\\n6. \\u4E0D\\u8981\\u5305\\u542B\\u4EFB\\u4F55\\u89E3\\u91CA\\u6587\\u5B57\\uFF0C\\u53EA\\u8F93\\u51FA\\u63D0\\u793A\\u8BCD\\n\\n\\u98CE\\u683C\\u8981\\u6C42\\uFF1A\".concat(style||'通用风格')},{role:'user',content:\"\\u8BF7\\u4E3A\\u4EE5\\u4E0B\\u63CF\\u8FF0\\u751F\\u6210AI\\u7ED8\\u753B\\u63D0\\u793A\\u8BCD\\uFF1A\".concat(text)}],max_tokens:APP_CONFIG.API.MAX_TOKENS,temperature:0.7,top_p:APP_CONFIG.API.TOP_P};const response=await fetch(APP_CONFIG.API.BASE_URL,{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(APP_CONFIG.API.SILICONFLOW_API_KEY)},body:JSON.stringify(requestBody)});if(!response.ok){throw new Error(\"API\\u8BF7\\u6C42\\u5931\\u8D25: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();if(!data.choices||!data.choices[0]||!data.choices[0].message){throw new Error(ERROR_MESSAGES.API.INVALID_RESPONSE);}return cleanPrompt(data.choices[0].message.content);},[]);/**\n   * 主生成函数\n   */const generatePrompt=useCallback(async function(){let useApi=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;// 验证输入\nif(!validatePromptInput(inputText)){return false;}setIsGenerating(true);setApiError(null);try{let result;if(useApi&&APP_CONFIG.FEATURES.AI_GENERATION){setGenerationSource('api');result=await generateApiPrompt(inputText,selectedStyle);}else{setGenerationSource('local');result=generateLocalPrompt(inputText,selectedStyle);}setGeneratedPrompt(result);setGenerationCount(prev=>prev+1);return true;}catch(error){console.error('生成提示词失败:',error);setApiError(error.message||ERROR_MESSAGES.API.UNKNOWN_ERROR);// API失败时回退到本地生成\nif(useApi){setGenerationSource('local');const fallbackResult=generateLocalPrompt(inputText,selectedStyle);setGeneratedPrompt(fallbackResult);setGenerationCount(prev=>prev+1);return true;}return false;}finally{setIsGenerating(false);}},[inputText,selectedStyle,validatePromptInput,generateLocalPrompt,generateApiPrompt]);/**\n   * 复制提示词\n   */const copyPrompt=useCallback(async function(){let text=arguments.length>0&&arguments[0]!==undefined?arguments[0]:generatedPrompt;const success=await copyToClipboard(text);return success;},[generatedPrompt]);/**\n   * 插入标签到输入框\n   */const insertTag=useCallback(tag=>{const tagText=typeof tag==='object'?tag.en:tag;const currentText=inputText.trim();if(currentText){setInputText(prev=>\"\".concat(prev,\", \").concat(tagText));}else{setInputText(tagText);}},[inputText]);/**\n   * 重置所有状态\n   */const reset=useCallback(()=>{setInputText('');setGeneratedPrompt('');setSelectedStyle('');setApiError(null);setValidationErrors([]);setGenerationCount(0);},[]);/**\n   * 从提示词中提取风格\n   */const extractStyleFromPrompt=useCallback(prompt=>{const styleKeywords={'realistic':['photorealistic','hyperrealistic','realistic','photograph'],'anime':['anime','manga','cel shading','cartoon'],'oil':['oil painting','classical','renaissance'],'watercolor':['watercolor','aquarelle'],'sketch':['sketch','pencil','charcoal','drawing']};const lowerPrompt=prompt.toLowerCase();for(const[style,keywords]of Object.entries(styleKeywords)){if(keywords.some(keyword=>lowerPrompt.includes(keyword))){return style;}}return'';},[]);return{// 状态\ninputText,generatedPrompt,selectedStyle,isGenerating,generationSource,generationCount,apiError,validationErrors,// 设置函数\nsetInputText,setSelectedStyle,setGeneratedPrompt,// 操作函数\ngeneratePrompt,copyPrompt,insertTag,reset,extractStyleFromPrompt,validatePromptInput};};","map":{"version":3,"names":["useState","useCallback","validateInput","cleanPrompt","copyToClipboard","APP_CONFIG","ERROR_MESSAGES","SUCCESS_MESSAGES","usePromptGenerator","inputText","setInputText","generatedPrompt","setGeneratedPrompt","selectedStyle","setSelectedStyle","isGenerating","setIsGenerating","generationSource","setGenerationSource","generationCount","setGenerationCount","apiError","setApiError","validationErrors","setValidationErrors","validatePromptInput","text","validation","errors","isValid","generateLocalPrompt","style","cleanedText","qualityTags","styleMap","styleTag","parts","filter","part","trim","join","generateApiPrompt","requestBody","model","API","MODEL","messages","role","content","concat","max_tokens","MAX_TOKENS","temperature","top_p","TOP_P","response","fetch","BASE_URL","method","headers","SILICONFLOW_API_KEY","body","JSON","stringify","ok","Error","status","statusText","data","json","choices","message","INVALID_RESPONSE","generatePrompt","useApi","arguments","length","undefined","result","FEATURES","AI_GENERATION","prev","error","console","UNKNOWN_ERROR","fallbackResult","copyPrompt","success","insertTag","tag","tagText","en","currentText","reset","extractStyleFromPrompt","prompt","styleKeywords","lowerPrompt","toLowerCase","keywords","Object","entries","some","keyword","includes"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/hooks/usePromptGenerator.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { validateInput, cleanPrompt } from '../utils/validation';\nimport { copyToClipboard } from '../utils/clipboard';\nimport { APP_CONFIG, ERROR_MESSAGES, SUCCESS_MESSAGES } from '../constants/config';\n\n/**\n * 提示词生成器 Hook\n */\nexport const usePromptGenerator = () => {\n  const [inputText, setInputText] = useState('');\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [selectedStyle, setSelectedStyle] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationSource, setGenerationSource] = useState('local'); // 'local' 或 'api'\n  const [generationCount, setGenerationCount] = useState(0);\n  const [apiError, setApiError] = useState(null);\n  const [validationErrors, setValidationErrors] = useState([]);\n\n  /**\n   * 验证输入\n   */\n  const validatePromptInput = useCallback((text) => {\n    const validation = validateInput(text);\n    setValidationErrors(validation.errors);\n    return validation.isValid;\n  }, []);\n\n  /**\n   * 生成提示词 - 本地规则\n   */\n  const generateLocalPrompt = useCallback((text, style) => {\n    // 清理输入\n    const cleanedText = cleanPrompt(text);\n    \n    // 基础质量标签\n    const qualityTags = 'masterpiece, best quality, ultra detailed';\n    \n    // 风格相关标签\n    const styleMap = {\n      'realistic': 'photorealistic, hyperrealistic, detailed',\n      'anime': 'anime style, cel shading, vibrant colors',\n      'oil': 'oil painting, classical art, painterly',\n      'watercolor': 'watercolor, soft colors, flowing',\n      'sketch': 'pencil sketch, charcoal drawing, artistic'\n    };\n    \n    const styleTag = styleMap[style] || '';\n    \n    // 组合提示词\n    const parts = [qualityTags, cleanedText, styleTag].filter(part => part.trim());\n    return parts.join(', ');\n  }, []);\n\n  /**\n   * 生成提示词 - API调用\n   */\n  const generateApiPrompt = useCallback(async (text, style) => {\n    const requestBody = {\n      model: APP_CONFIG.API.MODEL,\n      messages: [\n        {\n          role: 'system',\n          content: `你是一个专业的AI绘画提示词生成助手。请根据用户的描述，生成高质量的英文提示词。\n\n要求：\n1. 输出纯英文提示词，用逗号分隔\n2. 包含质量控制词如 masterpiece, best quality\n3. 根据风格要求添加对应的风格描述词\n4. 确保语法正确，词汇专业\n5. 长度控制在100-200个词汇之间\n6. 不要包含任何解释文字，只输出提示词\n\n风格要求：${style || '通用风格'}`\n        },\n        {\n          role: 'user',\n          content: `请为以下描述生成AI绘画提示词：${text}`\n        }\n      ],\n      max_tokens: APP_CONFIG.API.MAX_TOKENS,\n      temperature: 0.7,\n      top_p: APP_CONFIG.API.TOP_P\n    };\n\n    const response = await fetch(APP_CONFIG.API.BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${APP_CONFIG.API.SILICONFLOW_API_KEY}`\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n      throw new Error(ERROR_MESSAGES.API.INVALID_RESPONSE);\n    }\n\n    return cleanPrompt(data.choices[0].message.content);\n  }, []);\n\n  /**\n   * 主生成函数\n   */\n  const generatePrompt = useCallback(async (useApi = false) => {\n    // 验证输入\n    if (!validatePromptInput(inputText)) {\n      return false;\n    }\n\n    setIsGenerating(true);\n    setApiError(null);\n\n    try {\n      let result;\n      \n      if (useApi && APP_CONFIG.FEATURES.AI_GENERATION) {\n        setGenerationSource('api');\n        result = await generateApiPrompt(inputText, selectedStyle);\n      } else {\n        setGenerationSource('local');\n        result = generateLocalPrompt(inputText, selectedStyle);\n      }\n\n      setGeneratedPrompt(result);\n      setGenerationCount(prev => prev + 1);\n      return true;\n    } catch (error) {\n      console.error('生成提示词失败:', error);\n      setApiError(error.message || ERROR_MESSAGES.API.UNKNOWN_ERROR);\n      \n      // API失败时回退到本地生成\n      if (useApi) {\n        setGenerationSource('local');\n        const fallbackResult = generateLocalPrompt(inputText, selectedStyle);\n        setGeneratedPrompt(fallbackResult);\n        setGenerationCount(prev => prev + 1);\n        return true;\n      }\n      return false;\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [inputText, selectedStyle, validatePromptInput, generateLocalPrompt, generateApiPrompt]);\n\n  /**\n   * 复制提示词\n   */\n  const copyPrompt = useCallback(async (text = generatedPrompt) => {\n    const success = await copyToClipboard(text);\n    return success;\n  }, [generatedPrompt]);\n\n  /**\n   * 插入标签到输入框\n   */\n  const insertTag = useCallback((tag) => {\n    const tagText = typeof tag === 'object' ? tag.en : tag;\n    const currentText = inputText.trim();\n    \n    if (currentText) {\n      setInputText(prev => `${prev}, ${tagText}`);\n    } else {\n      setInputText(tagText);\n    }\n  }, [inputText]);\n\n  /**\n   * 重置所有状态\n   */\n  const reset = useCallback(() => {\n    setInputText('');\n    setGeneratedPrompt('');\n    setSelectedStyle('');\n    setApiError(null);\n    setValidationErrors([]);\n    setGenerationCount(0);\n  }, []);\n\n  /**\n   * 从提示词中提取风格\n   */\n  const extractStyleFromPrompt = useCallback((prompt) => {\n    const styleKeywords = {\n      'realistic': ['photorealistic', 'hyperrealistic', 'realistic', 'photograph'],\n      'anime': ['anime', 'manga', 'cel shading', 'cartoon'],\n      'oil': ['oil painting', 'classical', 'renaissance'],\n      'watercolor': ['watercolor', 'aquarelle'],\n      'sketch': ['sketch', 'pencil', 'charcoal', 'drawing']\n    };\n\n    const lowerPrompt = prompt.toLowerCase();\n    \n    for (const [style, keywords] of Object.entries(styleKeywords)) {\n      if (keywords.some(keyword => lowerPrompt.includes(keyword))) {\n        return style;\n      }\n    }\n    \n    return '';\n  }, []);\n\n  return {\n    // 状态\n    inputText,\n    generatedPrompt,\n    selectedStyle,\n    isGenerating,\n    generationSource,\n    generationCount,\n    apiError,\n    validationErrors,\n    \n    // 设置函数\n    setInputText,\n    setSelectedStyle,\n    setGeneratedPrompt,\n    \n    // 操作函数\n    generatePrompt,\n    copyPrompt,\n    insertTag,\n    reset,\n    extractStyleFromPrompt,\n    validatePromptInput\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}