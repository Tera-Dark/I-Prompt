{"ast":null,"code":"/**\r\n * 翻译服务\r\n * 支持中英文互译，可以接入多种翻译API\r\n */\n\n// 内置翻译词典\nconst TRANSLATION_DICT = {\n  // 质量相关\n  'masterpiece': '杰作',\n  'best quality': '最佳质量',\n  'ultra detailed': '超详细',\n  'high resolution': '高分辨率',\n  'professional': '专业级',\n  '8k wallpaper': '8K壁纸',\n  'high quality': '高质量',\n  'detailed': '详细',\n  'sharp': '锐利',\n  'crisp': '清晰',\n  // 人物相关\n  'beautiful girl': '美丽女孩',\n  'cute': '可爱',\n  'kawaii': '萌',\n  'portrait': '肖像',\n  'detailed face': '精细面部',\n  'expressive eyes': '有表现力的眼睛',\n  'beautiful woman': '美丽女性',\n  'handsome man': '英俊男性',\n  'character': '角色',\n  'person': '人物',\n  // 风格相关\n  'anime style': '动漫风格',\n  'realistic': '写实',\n  'photorealistic': '照片级写实',\n  'oil painting': '油画',\n  'watercolor': '水彩',\n  'digital art': '数字艺术',\n  'concept art': '概念艺术',\n  'illustration': '插画',\n  'painting': '绘画',\n  'sketch': '素描',\n  // 光照相关\n  'cinematic lighting': '电影级光照',\n  'soft lighting': '柔和光照',\n  'dramatic lighting': '戏剧性光照',\n  'golden hour': '黄金时刻',\n  'natural lighting': '自然光照',\n  'studio lighting': '摄影棚光照',\n  'warm lighting': '暖色光照',\n  'cold lighting': '冷色光照',\n  'backlight': '背光',\n  'rim lighting': '轮廓光',\n  // 构图相关\n  'perfect composition': '完美构图',\n  'dynamic pose': '动态姿势',\n  'close-up': '特写',\n  'wide shot': '远景',\n  'rule of thirds': '三分法则',\n  'bird eye view': '鸟瞰视角',\n  'low angle': '低角度',\n  'high angle': '高角度',\n  'symmetrical': '对称',\n  'asymmetrical': '非对称',\n  // 效果相关\n  'depth of field': '景深',\n  'bokeh': '虚化',\n  'sharp focus': '锐利对焦',\n  'motion blur': '运动模糊',\n  'lens flare': '镜头光晕',\n  'chromatic aberration': '色差',\n  'vignette': '暗角',\n  'film grain': '胶片颗粒',\n  'noise': '噪点',\n  'glow': '发光',\n  // 场景相关\n  'landscape': '风景',\n  'cityscape': '城市景观',\n  'indoor': '室内',\n  'outdoor': '户外',\n  'forest': '森林',\n  'mountain': '山脉',\n  'ocean': '海洋',\n  'sky': '天空',\n  'sunset': '日落',\n  'sunrise': '日出',\n  // 情感相关\n  'happy': '快乐',\n  'sad': '悲伤',\n  'angry': '愤怒',\n  'peaceful': '平静',\n  'mysterious': '神秘',\n  'romantic': '浪漫',\n  'dramatic': '戏剧性',\n  'serene': '宁静',\n  'energetic': '充满活力',\n  'melancholic': '忧郁',\n  // 颜色相关\n  'colorful': '多彩',\n  'monochrome': '单色',\n  'vibrant colors': '鲜艳色彩',\n  'pastel colors': '柔和色彩',\n  'warm colors': '暖色调',\n  'cool colors': '冷色调',\n  'bright': '明亮',\n  'dark': '黑暗',\n  'saturated': '饱和',\n  'desaturated': '去饱和',\n  // 材质相关\n  'metal': '金属',\n  'glass': '玻璃',\n  'wood': '木材',\n  'fabric': '织物',\n  'leather': '皮革',\n  'stone': '石材',\n  'water': '水',\n  'fire': '火',\n  'ice': '冰',\n  'crystal': '水晶'\n};\n\n// 反向词典（英文到中文）\nconst REVERSE_DICT = {};\nObject.entries(TRANSLATION_DICT).forEach(([en, cn]) => {\n  REVERSE_DICT[cn] = en;\n});\n\n/**\r\n * 检测文本语言\r\n * @param {string} text - 要检测的文本\r\n * @returns {string} - 'zh' 或 'en'\r\n */\nexport function detectLanguage(text) {\n  // 检测中文字符\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\n  return chineseRegex.test(text) ? 'zh' : 'en';\n}\n\n/**\r\n * 基于词典的翻译\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言 'zh' 或 'en'\r\n * @returns {string} - 翻译结果\r\n */\nfunction dictionaryTranslate(text, targetLang) {\n  const dict = targetLang === 'zh' ? TRANSLATION_DICT : REVERSE_DICT;\n  let result = text;\n\n  // 按词典进行替换\n  Object.entries(dict).forEach(([source, target]) => {\n    const regex = new RegExp(`\\\\b${source.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi');\n    result = result.replace(regex, target);\n  });\n  return result;\n}\n\n/**\r\n * 智能分词翻译\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\nfunction smartTranslate(text, targetLang) {\n  // 分割文本为标签\n  const tags = text.split(/[,，\\s]+/).filter(tag => tag.trim());\n  const translatedTags = tags.map(tag => {\n    const trimmedTag = tag.trim();\n\n    // 处理权重标记\n    const weightMatch = trimmedTag.match(/^\\((.+?)(?::([0-9.]+))?\\)$/);\n    if (weightMatch) {\n      const innerText = weightMatch[1];\n      const weight = weightMatch[2] || '';\n      const translatedInner = dictionaryTranslate(innerText, targetLang);\n      return weight ? `(${translatedInner}:${weight})` : `(${translatedInner})`;\n    }\n\n    // 处理双括号权重\n    const doubleBracketMatch = trimmedTag.match(/^\\(\\((.+?)\\)\\)$/);\n    if (doubleBracketMatch) {\n      const innerText = doubleBracketMatch[1];\n      const translatedInner = dictionaryTranslate(innerText, targetLang);\n      return `((${translatedInner}))`;\n    }\n\n    // 处理方括号权重\n    const bracketMatch = trimmedTag.match(/^\\[(.+?)\\]$/);\n    if (bracketMatch) {\n      const innerText = bracketMatch[1];\n      const translatedInner = dictionaryTranslate(innerText, targetLang);\n      return `[${translatedInner}]`;\n    }\n\n    // 普通翻译\n    return dictionaryTranslate(trimmedTag, targetLang);\n  });\n  return translatedTags.join(', ');\n}\n\n/**\r\n * 主翻译函数\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言，可选 'auto', 'zh', 'en'\r\n * @returns {Promise<string>} - 翻译结果\r\n */\nexport async function translateText(text, targetLang = 'auto') {\n  if (!text || !text.trim()) {\n    return '';\n  }\n  const sourceLang = detectLanguage(text);\n\n  // 自动检测目标语言\n  if (targetLang === 'auto') {\n    targetLang = sourceLang === 'zh' ? 'en' : 'zh';\n  }\n\n  // 如果源语言和目标语言相同，直接返回\n  if (sourceLang === targetLang) {\n    return text;\n  }\n  try {\n    // 使用智能翻译\n    const result = smartTranslate(text, targetLang);\n\n    // 模拟API延迟\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return result;\n  } catch (error) {\n    console.error('翻译失败:', error);\n    return text; // 翻译失败时返回原文\n  }\n}\n\n/**\r\n * 批量翻译\r\n * @param {string[]} texts - 要翻译的文本数组\r\n * @param {string} targetLang - 目标语言\r\n * @returns {Promise<string[]>} - 翻译结果数组\r\n */\nexport async function translateBatch(texts, targetLang = 'auto') {\n  const promises = texts.map(text => translateText(text, targetLang));\n  return Promise.all(promises);\n}\n\n/**\r\n * 获取翻译建议\r\n * @param {string} text - 输入文本\r\n * @returns {Array} - 翻译建议列表\r\n */\nexport function getTranslationSuggestions(text) {\n  const sourceLang = detectLanguage(text);\n  const dict = sourceLang === 'zh' ? REVERSE_DICT : TRANSLATION_DICT;\n  const suggestions = [];\n  const lowerText = text.toLowerCase();\n  Object.entries(dict).forEach(([source, target]) => {\n    if (source.toLowerCase().includes(lowerText) || target.toLowerCase().includes(lowerText)) {\n      suggestions.push({\n        source,\n        target,\n        confidence: source.toLowerCase() === lowerText ? 1.0 : 0.8\n      });\n    }\n  });\n  return suggestions.sort((a, b) => b.confidence - a.confidence).slice(0, 10);\n}\n\n/**\r\n * 添加自定义翻译对\r\n * @param {string} source - 源文本\r\n * @param {string} target - 目标文本\r\n */\nexport function addCustomTranslation(source, target) {\n  const sourceLang = detectLanguage(source);\n  if (sourceLang === 'en') {\n    TRANSLATION_DICT[source.toLowerCase()] = target;\n    REVERSE_DICT[target] = source.toLowerCase();\n  } else {\n    REVERSE_DICT[source] = target.toLowerCase();\n    TRANSLATION_DICT[target.toLowerCase()] = source;\n  }\n}\n\n/**\r\n * 获取支持的语言对\r\n * @returns {Array} - 支持的语言对列表\r\n */\nexport function getSupportedLanguages() {\n  return [{\n    code: 'zh',\n    name: '中文',\n    nativeName: '中文'\n  }, {\n    code: 'en',\n    name: '英文',\n    nativeName: 'English'\n  }];\n}\n\n/**\r\n * 翻译质量评估\r\n * @param {string} original - 原文\r\n * @param {string} translated - 译文\r\n * @returns {Object} - 质量评估结果\r\n */\nexport function assessTranslationQuality(original, translated) {\n  const originalTags = original.split(/[,，\\s]+/).filter(tag => tag.trim());\n  const translatedTags = translated.split(/[,，\\s]+/).filter(tag => tag.trim());\n  const coverage = Math.min(translatedTags.length / originalTags.length, 1);\n  const accuracy = originalTags.filter(tag => {\n    const dict = detectLanguage(tag) === 'en' ? TRANSLATION_DICT : REVERSE_DICT;\n    return Object.keys(dict).some(key => key.toLowerCase().includes(tag.toLowerCase()));\n  }).length / originalTags.length;\n  const quality = (coverage + accuracy) / 2;\n  return {\n    quality: Math.round(quality * 100),\n    coverage: Math.round(coverage * 100),\n    accuracy: Math.round(accuracy * 100),\n    suggestions: quality < 0.8 ? ['建议手动检查翻译结果', '可能需要添加自定义词典'] : []\n  };\n}\nexport default {\n  translateText,\n  translateBatch,\n  detectLanguage,\n  getTranslationSuggestions,\n  addCustomTranslation,\n  getSupportedLanguages,\n  assessTranslationQuality\n};","map":{"version":3,"names":["TRANSLATION_DICT","REVERSE_DICT","Object","entries","forEach","en","cn","detectLanguage","text","chineseRegex","test","dictionaryTranslate","targetLang","dict","result","source","target","regex","RegExp","replace","smartTranslate","tags","split","filter","tag","trim","translatedTags","map","trimmedTag","weightMatch","match","innerText","weight","translatedInner","doubleBracketMatch","bracketMatch","join","translateText","sourceLang","Promise","resolve","setTimeout","error","console","translateBatch","texts","promises","all","getTranslationSuggestions","suggestions","lowerText","toLowerCase","includes","push","confidence","sort","a","b","slice","addCustomTranslation","getSupportedLanguages","code","name","nativeName","assessTranslationQuality","original","translated","originalTags","coverage","Math","min","length","accuracy","keys","some","key","quality","round"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/translationService.js"],"sourcesContent":["/**\r\n * 翻译服务\r\n * 支持中英文互译，可以接入多种翻译API\r\n */\r\n\r\n// 内置翻译词典\r\nconst TRANSLATION_DICT = {\r\n  // 质量相关\r\n  'masterpiece': '杰作',\r\n  'best quality': '最佳质量',\r\n  'ultra detailed': '超详细',\r\n  'high resolution': '高分辨率',\r\n  'professional': '专业级',\r\n  '8k wallpaper': '8K壁纸',\r\n  'high quality': '高质量',\r\n  'detailed': '详细',\r\n  'sharp': '锐利',\r\n  'crisp': '清晰',\r\n  \r\n  // 人物相关\r\n  'beautiful girl': '美丽女孩',\r\n  'cute': '可爱',\r\n  'kawaii': '萌',\r\n  'portrait': '肖像',\r\n  'detailed face': '精细面部',\r\n  'expressive eyes': '有表现力的眼睛',\r\n  'beautiful woman': '美丽女性',\r\n  'handsome man': '英俊男性',\r\n  'character': '角色',\r\n  'person': '人物',\r\n  \r\n  // 风格相关\r\n  'anime style': '动漫风格',\r\n  'realistic': '写实',\r\n  'photorealistic': '照片级写实',\r\n  'oil painting': '油画',\r\n  'watercolor': '水彩',\r\n  'digital art': '数字艺术',\r\n  'concept art': '概念艺术',\r\n  'illustration': '插画',\r\n  'painting': '绘画',\r\n  'sketch': '素描',\r\n  \r\n  // 光照相关\r\n  'cinematic lighting': '电影级光照',\r\n  'soft lighting': '柔和光照',\r\n  'dramatic lighting': '戏剧性光照',\r\n  'golden hour': '黄金时刻',\r\n  'natural lighting': '自然光照',\r\n  'studio lighting': '摄影棚光照',\r\n  'warm lighting': '暖色光照',\r\n  'cold lighting': '冷色光照',\r\n  'backlight': '背光',\r\n  'rim lighting': '轮廓光',\r\n  \r\n  // 构图相关\r\n  'perfect composition': '完美构图',\r\n  'dynamic pose': '动态姿势',\r\n  'close-up': '特写',\r\n  'wide shot': '远景',\r\n  'rule of thirds': '三分法则',\r\n  'bird eye view': '鸟瞰视角',\r\n  'low angle': '低角度',\r\n  'high angle': '高角度',\r\n  'symmetrical': '对称',\r\n  'asymmetrical': '非对称',\r\n  \r\n  // 效果相关\r\n  'depth of field': '景深',\r\n  'bokeh': '虚化',\r\n  'sharp focus': '锐利对焦',\r\n  'motion blur': '运动模糊',\r\n  'lens flare': '镜头光晕',\r\n  'chromatic aberration': '色差',\r\n  'vignette': '暗角',\r\n  'film grain': '胶片颗粒',\r\n  'noise': '噪点',\r\n  'glow': '发光',\r\n  \r\n  // 场景相关\r\n  'landscape': '风景',\r\n  'cityscape': '城市景观',\r\n  'indoor': '室内',\r\n  'outdoor': '户外',\r\n  'forest': '森林',\r\n  'mountain': '山脉',\r\n  'ocean': '海洋',\r\n  'sky': '天空',\r\n  'sunset': '日落',\r\n  'sunrise': '日出',\r\n  \r\n  // 情感相关\r\n  'happy': '快乐',\r\n  'sad': '悲伤',\r\n  'angry': '愤怒',\r\n  'peaceful': '平静',\r\n  'mysterious': '神秘',\r\n  'romantic': '浪漫',\r\n  'dramatic': '戏剧性',\r\n  'serene': '宁静',\r\n  'energetic': '充满活力',\r\n  'melancholic': '忧郁',\r\n  \r\n  // 颜色相关\r\n  'colorful': '多彩',\r\n  'monochrome': '单色',\r\n  'vibrant colors': '鲜艳色彩',\r\n  'pastel colors': '柔和色彩',\r\n  'warm colors': '暖色调',\r\n  'cool colors': '冷色调',\r\n  'bright': '明亮',\r\n  'dark': '黑暗',\r\n  'saturated': '饱和',\r\n  'desaturated': '去饱和',\r\n  \r\n  // 材质相关\r\n  'metal': '金属',\r\n  'glass': '玻璃',\r\n  'wood': '木材',\r\n  'fabric': '织物',\r\n  'leather': '皮革',\r\n  'stone': '石材',\r\n  'water': '水',\r\n  'fire': '火',\r\n  'ice': '冰',\r\n  'crystal': '水晶'\r\n};\r\n\r\n// 反向词典（英文到中文）\r\nconst REVERSE_DICT = {};\r\nObject.entries(TRANSLATION_DICT).forEach(([en, cn]) => {\r\n  REVERSE_DICT[cn] = en;\r\n});\r\n\r\n/**\r\n * 检测文本语言\r\n * @param {string} text - 要检测的文本\r\n * @returns {string} - 'zh' 或 'en'\r\n */\r\nexport function detectLanguage(text) {\r\n  // 检测中文字符\r\n  const chineseRegex = /[\\u4e00-\\u9fa5]/;\r\n  return chineseRegex.test(text) ? 'zh' : 'en';\r\n}\r\n\r\n/**\r\n * 基于词典的翻译\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言 'zh' 或 'en'\r\n * @returns {string} - 翻译结果\r\n */\r\nfunction dictionaryTranslate(text, targetLang) {\r\n  const dict = targetLang === 'zh' ? TRANSLATION_DICT : REVERSE_DICT;\r\n  let result = text;\r\n  \r\n  // 按词典进行替换\r\n  Object.entries(dict).forEach(([source, target]) => {\r\n    const regex = new RegExp(`\\\\b${source.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi');\r\n    result = result.replace(regex, target);\r\n  });\r\n  \r\n  return result;\r\n}\r\n\r\n/**\r\n * 智能分词翻译\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言\r\n * @returns {string} - 翻译结果\r\n */\r\nfunction smartTranslate(text, targetLang) {\r\n  // 分割文本为标签\r\n  const tags = text.split(/[,，\\s]+/).filter(tag => tag.trim());\r\n  \r\n  const translatedTags = tags.map(tag => {\r\n    const trimmedTag = tag.trim();\r\n    \r\n    // 处理权重标记\r\n    const weightMatch = trimmedTag.match(/^\\((.+?)(?::([0-9.]+))?\\)$/);\r\n    if (weightMatch) {\r\n      const innerText = weightMatch[1];\r\n      const weight = weightMatch[2] || '';\r\n      const translatedInner = dictionaryTranslate(innerText, targetLang);\r\n      return weight ? `(${translatedInner}:${weight})` : `(${translatedInner})`;\r\n    }\r\n    \r\n    // 处理双括号权重\r\n    const doubleBracketMatch = trimmedTag.match(/^\\(\\((.+?)\\)\\)$/);\r\n    if (doubleBracketMatch) {\r\n      const innerText = doubleBracketMatch[1];\r\n      const translatedInner = dictionaryTranslate(innerText, targetLang);\r\n      return `((${translatedInner}))`;\r\n    }\r\n    \r\n    // 处理方括号权重\r\n    const bracketMatch = trimmedTag.match(/^\\[(.+?)\\]$/);\r\n    if (bracketMatch) {\r\n      const innerText = bracketMatch[1];\r\n      const translatedInner = dictionaryTranslate(innerText, targetLang);\r\n      return `[${translatedInner}]`;\r\n    }\r\n    \r\n    // 普通翻译\r\n    return dictionaryTranslate(trimmedTag, targetLang);\r\n  });\r\n  \r\n  return translatedTags.join(', ');\r\n}\r\n\r\n/**\r\n * 主翻译函数\r\n * @param {string} text - 要翻译的文本\r\n * @param {string} targetLang - 目标语言，可选 'auto', 'zh', 'en'\r\n * @returns {Promise<string>} - 翻译结果\r\n */\r\nexport async function translateText(text, targetLang = 'auto') {\r\n  if (!text || !text.trim()) {\r\n    return '';\r\n  }\r\n  \r\n  const sourceLang = detectLanguage(text);\r\n  \r\n  // 自动检测目标语言\r\n  if (targetLang === 'auto') {\r\n    targetLang = sourceLang === 'zh' ? 'en' : 'zh';\r\n  }\r\n  \r\n  // 如果源语言和目标语言相同，直接返回\r\n  if (sourceLang === targetLang) {\r\n    return text;\r\n  }\r\n  \r\n  try {\r\n    // 使用智能翻译\r\n    const result = smartTranslate(text, targetLang);\r\n    \r\n    // 模拟API延迟\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('翻译失败:', error);\r\n    return text; // 翻译失败时返回原文\r\n  }\r\n}\r\n\r\n/**\r\n * 批量翻译\r\n * @param {string[]} texts - 要翻译的文本数组\r\n * @param {string} targetLang - 目标语言\r\n * @returns {Promise<string[]>} - 翻译结果数组\r\n */\r\nexport async function translateBatch(texts, targetLang = 'auto') {\r\n  const promises = texts.map(text => translateText(text, targetLang));\r\n  return Promise.all(promises);\r\n}\r\n\r\n/**\r\n * 获取翻译建议\r\n * @param {string} text - 输入文本\r\n * @returns {Array} - 翻译建议列表\r\n */\r\nexport function getTranslationSuggestions(text) {\r\n  const sourceLang = detectLanguage(text);\r\n  const dict = sourceLang === 'zh' ? REVERSE_DICT : TRANSLATION_DICT;\r\n  \r\n  const suggestions = [];\r\n  const lowerText = text.toLowerCase();\r\n  \r\n  Object.entries(dict).forEach(([source, target]) => {\r\n    if (source.toLowerCase().includes(lowerText) || \r\n        target.toLowerCase().includes(lowerText)) {\r\n      suggestions.push({\r\n        source,\r\n        target,\r\n        confidence: source.toLowerCase() === lowerText ? 1.0 : 0.8\r\n      });\r\n    }\r\n  });\r\n  \r\n  return suggestions\r\n    .sort((a, b) => b.confidence - a.confidence)\r\n    .slice(0, 10);\r\n}\r\n\r\n/**\r\n * 添加自定义翻译对\r\n * @param {string} source - 源文本\r\n * @param {string} target - 目标文本\r\n */\r\nexport function addCustomTranslation(source, target) {\r\n  const sourceLang = detectLanguage(source);\r\n  \r\n  if (sourceLang === 'en') {\r\n    TRANSLATION_DICT[source.toLowerCase()] = target;\r\n    REVERSE_DICT[target] = source.toLowerCase();\r\n  } else {\r\n    REVERSE_DICT[source] = target.toLowerCase();\r\n    TRANSLATION_DICT[target.toLowerCase()] = source;\r\n  }\r\n}\r\n\r\n/**\r\n * 获取支持的语言对\r\n * @returns {Array} - 支持的语言对列表\r\n */\r\nexport function getSupportedLanguages() {\r\n  return [\r\n    { code: 'zh', name: '中文', nativeName: '中文' },\r\n    { code: 'en', name: '英文', nativeName: 'English' }\r\n  ];\r\n}\r\n\r\n/**\r\n * 翻译质量评估\r\n * @param {string} original - 原文\r\n * @param {string} translated - 译文\r\n * @returns {Object} - 质量评估结果\r\n */\r\nexport function assessTranslationQuality(original, translated) {\r\n  const originalTags = original.split(/[,，\\s]+/).filter(tag => tag.trim());\r\n  const translatedTags = translated.split(/[,，\\s]+/).filter(tag => tag.trim());\r\n  \r\n  const coverage = Math.min(translatedTags.length / originalTags.length, 1);\r\n  const accuracy = originalTags.filter(tag => {\r\n    const dict = detectLanguage(tag) === 'en' ? TRANSLATION_DICT : REVERSE_DICT;\r\n    return Object.keys(dict).some(key => \r\n      key.toLowerCase().includes(tag.toLowerCase())\r\n    );\r\n  }).length / originalTags.length;\r\n  \r\n  const quality = (coverage + accuracy) / 2;\r\n  \r\n  return {\r\n    quality: Math.round(quality * 100),\r\n    coverage: Math.round(coverage * 100),\r\n    accuracy: Math.round(accuracy * 100),\r\n    suggestions: quality < 0.8 ? ['建议手动检查翻译结果', '可能需要添加自定义词典'] : []\r\n  };\r\n}\r\n\r\nexport default {\r\n  translateText,\r\n  translateBatch,\r\n  detectLanguage,\r\n  getTranslationSuggestions,\r\n  addCustomTranslation,\r\n  getSupportedLanguages,\r\n  assessTranslationQuality\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,gBAAgB,GAAG;EACvB;EACA,aAAa,EAAE,IAAI;EACnB,cAAc,EAAE,MAAM;EACtB,gBAAgB,EAAE,KAAK;EACvB,iBAAiB,EAAE,MAAM;EACzB,cAAc,EAAE,KAAK;EACrB,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,KAAK;EACrB,UAAU,EAAE,IAAI;EAChB,OAAO,EAAE,IAAI;EACb,OAAO,EAAE,IAAI;EAEb;EACA,gBAAgB,EAAE,MAAM;EACxB,MAAM,EAAE,IAAI;EACZ,QAAQ,EAAE,GAAG;EACb,UAAU,EAAE,IAAI;EAChB,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,SAAS;EAC5B,iBAAiB,EAAE,MAAM;EACzB,cAAc,EAAE,MAAM;EACtB,WAAW,EAAE,IAAI;EACjB,QAAQ,EAAE,IAAI;EAEd;EACA,aAAa,EAAE,MAAM;EACrB,WAAW,EAAE,IAAI;EACjB,gBAAgB,EAAE,OAAO;EACzB,cAAc,EAAE,IAAI;EACpB,YAAY,EAAE,IAAI;EAClB,aAAa,EAAE,MAAM;EACrB,aAAa,EAAE,MAAM;EACrB,cAAc,EAAE,IAAI;EACpB,UAAU,EAAE,IAAI;EAChB,QAAQ,EAAE,IAAI;EAEd;EACA,oBAAoB,EAAE,OAAO;EAC7B,eAAe,EAAE,MAAM;EACvB,mBAAmB,EAAE,OAAO;EAC5B,aAAa,EAAE,MAAM;EACrB,kBAAkB,EAAE,MAAM;EAC1B,iBAAiB,EAAE,OAAO;EAC1B,eAAe,EAAE,MAAM;EACvB,eAAe,EAAE,MAAM;EACvB,WAAW,EAAE,IAAI;EACjB,cAAc,EAAE,KAAK;EAErB;EACA,qBAAqB,EAAE,MAAM;EAC7B,cAAc,EAAE,MAAM;EACtB,UAAU,EAAE,IAAI;EAChB,WAAW,EAAE,IAAI;EACjB,gBAAgB,EAAE,MAAM;EACxB,eAAe,EAAE,MAAM;EACvB,WAAW,EAAE,KAAK;EAClB,YAAY,EAAE,KAAK;EACnB,aAAa,EAAE,IAAI;EACnB,cAAc,EAAE,KAAK;EAErB;EACA,gBAAgB,EAAE,IAAI;EACtB,OAAO,EAAE,IAAI;EACb,aAAa,EAAE,MAAM;EACrB,aAAa,EAAE,MAAM;EACrB,YAAY,EAAE,MAAM;EACpB,sBAAsB,EAAE,IAAI;EAC5B,UAAU,EAAE,IAAI;EAChB,YAAY,EAAE,MAAM;EACpB,OAAO,EAAE,IAAI;EACb,MAAM,EAAE,IAAI;EAEZ;EACA,WAAW,EAAE,IAAI;EACjB,WAAW,EAAE,MAAM;EACnB,QAAQ,EAAE,IAAI;EACd,SAAS,EAAE,IAAI;EACf,QAAQ,EAAE,IAAI;EACd,UAAU,EAAE,IAAI;EAChB,OAAO,EAAE,IAAI;EACb,KAAK,EAAE,IAAI;EACX,QAAQ,EAAE,IAAI;EACd,SAAS,EAAE,IAAI;EAEf;EACA,OAAO,EAAE,IAAI;EACb,KAAK,EAAE,IAAI;EACX,OAAO,EAAE,IAAI;EACb,UAAU,EAAE,IAAI;EAChB,YAAY,EAAE,IAAI;EAClB,UAAU,EAAE,IAAI;EAChB,UAAU,EAAE,KAAK;EACjB,QAAQ,EAAE,IAAI;EACd,WAAW,EAAE,MAAM;EACnB,aAAa,EAAE,IAAI;EAEnB;EACA,UAAU,EAAE,IAAI;EAChB,YAAY,EAAE,IAAI;EAClB,gBAAgB,EAAE,MAAM;EACxB,eAAe,EAAE,MAAM;EACvB,aAAa,EAAE,KAAK;EACpB,aAAa,EAAE,KAAK;EACpB,QAAQ,EAAE,IAAI;EACd,MAAM,EAAE,IAAI;EACZ,WAAW,EAAE,IAAI;EACjB,aAAa,EAAE,KAAK;EAEpB;EACA,OAAO,EAAE,IAAI;EACb,OAAO,EAAE,IAAI;EACb,MAAM,EAAE,IAAI;EACZ,QAAQ,EAAE,IAAI;EACd,SAAS,EAAE,IAAI;EACf,OAAO,EAAE,IAAI;EACb,OAAO,EAAE,GAAG;EACZ,MAAM,EAAE,GAAG;EACX,KAAK,EAAE,GAAG;EACV,SAAS,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;AACvBC,MAAM,CAACC,OAAO,CAACH,gBAAgB,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAC,KAAK;EACrDL,YAAY,CAACK,EAAE,CAAC,GAAGD,EAAE;AACvB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAACC,IAAI,EAAE;EACnC;EACA,MAAMC,YAAY,GAAG,iBAAiB;EACtC,OAAOA,YAAY,CAACC,IAAI,CAACF,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,mBAAmBA,CAACH,IAAI,EAAEI,UAAU,EAAE;EAC7C,MAAMC,IAAI,GAAGD,UAAU,KAAK,IAAI,GAAGZ,gBAAgB,GAAGC,YAAY;EAClE,IAAIa,MAAM,GAAGN,IAAI;;EAEjB;EACAN,MAAM,CAACC,OAAO,CAACU,IAAI,CAAC,CAACT,OAAO,CAAC,CAAC,CAACW,MAAM,EAAEC,MAAM,CAAC,KAAK;IACjD,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,MAAMH,MAAM,CAACI,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC;IACxFL,MAAM,GAAGA,MAAM,CAACK,OAAO,CAACF,KAAK,EAAED,MAAM,CAAC;EACxC,CAAC,CAAC;EAEF,OAAOF,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,cAAcA,CAACZ,IAAI,EAAEI,UAAU,EAAE;EACxC;EACA,MAAMS,IAAI,GAAGb,IAAI,CAACc,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5D,MAAMC,cAAc,GAAGL,IAAI,CAACM,GAAG,CAACH,GAAG,IAAI;IACrC,MAAMI,UAAU,GAAGJ,GAAG,CAACC,IAAI,CAAC,CAAC;;IAE7B;IACA,MAAMI,WAAW,GAAGD,UAAU,CAACE,KAAK,CAAC,4BAA4B,CAAC;IAClE,IAAID,WAAW,EAAE;MACf,MAAME,SAAS,GAAGF,WAAW,CAAC,CAAC,CAAC;MAChC,MAAMG,MAAM,GAAGH,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE;MACnC,MAAMI,eAAe,GAAGtB,mBAAmB,CAACoB,SAAS,EAAEnB,UAAU,CAAC;MAClE,OAAOoB,MAAM,GAAG,IAAIC,eAAe,IAAID,MAAM,GAAG,GAAG,IAAIC,eAAe,GAAG;IAC3E;;IAEA;IACA,MAAMC,kBAAkB,GAAGN,UAAU,CAACE,KAAK,CAAC,iBAAiB,CAAC;IAC9D,IAAII,kBAAkB,EAAE;MACtB,MAAMH,SAAS,GAAGG,kBAAkB,CAAC,CAAC,CAAC;MACvC,MAAMD,eAAe,GAAGtB,mBAAmB,CAACoB,SAAS,EAAEnB,UAAU,CAAC;MAClE,OAAO,KAAKqB,eAAe,IAAI;IACjC;;IAEA;IACA,MAAME,YAAY,GAAGP,UAAU,CAACE,KAAK,CAAC,aAAa,CAAC;IACpD,IAAIK,YAAY,EAAE;MAChB,MAAMJ,SAAS,GAAGI,YAAY,CAAC,CAAC,CAAC;MACjC,MAAMF,eAAe,GAAGtB,mBAAmB,CAACoB,SAAS,EAAEnB,UAAU,CAAC;MAClE,OAAO,IAAIqB,eAAe,GAAG;IAC/B;;IAEA;IACA,OAAOtB,mBAAmB,CAACiB,UAAU,EAAEhB,UAAU,CAAC;EACpD,CAAC,CAAC;EAEF,OAAOc,cAAc,CAACU,IAAI,CAAC,IAAI,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,aAAaA,CAAC7B,IAAI,EAAEI,UAAU,GAAG,MAAM,EAAE;EAC7D,IAAI,CAACJ,IAAI,IAAI,CAACA,IAAI,CAACiB,IAAI,CAAC,CAAC,EAAE;IACzB,OAAO,EAAE;EACX;EAEA,MAAMa,UAAU,GAAG/B,cAAc,CAACC,IAAI,CAAC;;EAEvC;EACA,IAAII,UAAU,KAAK,MAAM,EAAE;IACzBA,UAAU,GAAG0B,UAAU,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;EAChD;;EAEA;EACA,IAAIA,UAAU,KAAK1B,UAAU,EAAE;IAC7B,OAAOJ,IAAI;EACb;EAEA,IAAI;IACF;IACA,MAAMM,MAAM,GAAGM,cAAc,CAACZ,IAAI,EAAEI,UAAU,CAAC;;IAE/C;IACA,MAAM,IAAI2B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,OAAO1B,MAAM;EACf,CAAC,CAAC,OAAO4B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,OAAOlC,IAAI,CAAC,CAAC;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeoC,cAAcA,CAACC,KAAK,EAAEjC,UAAU,GAAG,MAAM,EAAE;EAC/D,MAAMkC,QAAQ,GAAGD,KAAK,CAAClB,GAAG,CAACnB,IAAI,IAAI6B,aAAa,CAAC7B,IAAI,EAAEI,UAAU,CAAC,CAAC;EACnE,OAAO2B,OAAO,CAACQ,GAAG,CAACD,QAAQ,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,yBAAyBA,CAACxC,IAAI,EAAE;EAC9C,MAAM8B,UAAU,GAAG/B,cAAc,CAACC,IAAI,CAAC;EACvC,MAAMK,IAAI,GAAGyB,UAAU,KAAK,IAAI,GAAGrC,YAAY,GAAGD,gBAAgB;EAElE,MAAMiD,WAAW,GAAG,EAAE;EACtB,MAAMC,SAAS,GAAG1C,IAAI,CAAC2C,WAAW,CAAC,CAAC;EAEpCjD,MAAM,CAACC,OAAO,CAACU,IAAI,CAAC,CAACT,OAAO,CAAC,CAAC,CAACW,MAAM,EAAEC,MAAM,CAAC,KAAK;IACjD,IAAID,MAAM,CAACoC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,SAAS,CAAC,IACxClC,MAAM,CAACmC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,SAAS,CAAC,EAAE;MAC5CD,WAAW,CAACI,IAAI,CAAC;QACftC,MAAM;QACNC,MAAM;QACNsC,UAAU,EAAEvC,MAAM,CAACoC,WAAW,CAAC,CAAC,KAAKD,SAAS,GAAG,GAAG,GAAG;MACzD,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAOD,WAAW,CACfM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACH,UAAU,GAAGE,CAAC,CAACF,UAAU,CAAC,CAC3CI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAAC5C,MAAM,EAAEC,MAAM,EAAE;EACnD,MAAMsB,UAAU,GAAG/B,cAAc,CAACQ,MAAM,CAAC;EAEzC,IAAIuB,UAAU,KAAK,IAAI,EAAE;IACvBtC,gBAAgB,CAACe,MAAM,CAACoC,WAAW,CAAC,CAAC,CAAC,GAAGnC,MAAM;IAC/Cf,YAAY,CAACe,MAAM,CAAC,GAAGD,MAAM,CAACoC,WAAW,CAAC,CAAC;EAC7C,CAAC,MAAM;IACLlD,YAAY,CAACc,MAAM,CAAC,GAAGC,MAAM,CAACmC,WAAW,CAAC,CAAC;IAC3CnD,gBAAgB,CAACgB,MAAM,CAACmC,WAAW,CAAC,CAAC,CAAC,GAAGpC,MAAM;EACjD;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAAS6C,qBAAqBA,CAAA,EAAG;EACtC,OAAO,CACL;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAK,CAAC,EAC5C;IAAEF,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAU,CAAC,CAClD;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAC7D,MAAMC,YAAY,GAAGF,QAAQ,CAAC3C,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EACxE,MAAMC,cAAc,GAAGwC,UAAU,CAAC5C,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5E,MAAM2C,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC5C,cAAc,CAAC6C,MAAM,GAAGJ,YAAY,CAACI,MAAM,EAAE,CAAC,CAAC;EACzE,MAAMC,QAAQ,GAAGL,YAAY,CAAC5C,MAAM,CAACC,GAAG,IAAI;IAC1C,MAAMX,IAAI,GAAGN,cAAc,CAACiB,GAAG,CAAC,KAAK,IAAI,GAAGxB,gBAAgB,GAAGC,YAAY;IAC3E,OAAOC,MAAM,CAACuE,IAAI,CAAC5D,IAAI,CAAC,CAAC6D,IAAI,CAACC,GAAG,IAC/BA,GAAG,CAACxB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC5B,GAAG,CAAC2B,WAAW,CAAC,CAAC,CAC9C,CAAC;EACH,CAAC,CAAC,CAACoB,MAAM,GAAGJ,YAAY,CAACI,MAAM;EAE/B,MAAMK,OAAO,GAAG,CAACR,QAAQ,GAAGI,QAAQ,IAAI,CAAC;EAEzC,OAAO;IACLI,OAAO,EAAEP,IAAI,CAACQ,KAAK,CAACD,OAAO,GAAG,GAAG,CAAC;IAClCR,QAAQ,EAAEC,IAAI,CAACQ,KAAK,CAACT,QAAQ,GAAG,GAAG,CAAC;IACpCI,QAAQ,EAAEH,IAAI,CAACQ,KAAK,CAACL,QAAQ,GAAG,GAAG,CAAC;IACpCvB,WAAW,EAAE2B,OAAO,GAAG,GAAG,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,GAAG;EAC/D,CAAC;AACH;AAEA,eAAe;EACbvC,aAAa;EACbO,cAAc;EACdrC,cAAc;EACdyC,yBAAyB;EACzBW,oBAAoB;EACpBC,qBAAqB;EACrBI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}