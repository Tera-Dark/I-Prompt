{"ast":null,"code":"/**\n * 高级翻译服务 - 基于多个免费在线API\n * 参考translators库理念，支持多种免费翻译引擎\n * 支持GitHub Pages部署，无需后端服务\n */\n\n// 免费翻译API配置 - 基于translators库的引擎列表\nconst TRANSLATION_APIS = {\n  mymemory: {\n    name: 'MyMemory',\n    description: '免费API，支持330种语言，每天1000次免费调用',\n    baseUrl: 'https://api.mymemory.translated.net',\n    status: 'stable',\n    rateLimit: '1000/day',\n    languages: 330\n  },\n  libre: {\n    name: 'LibreTranslate',\n    description: '开源免费翻译，支持20种语言，每分钟20次',\n    baseUrl: 'https://libretranslate.de/translate',\n    status: 'stable',\n    rateLimit: '20/min',\n    languages: 20\n  },\n  google_web: {\n    name: 'Google Web',\n    description: 'Google翻译网页版API，支持134种语言',\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 134\n  },\n  bing_web: {\n    name: 'Bing Web',\n    description: 'Bing翻译网页版API，支持128种语言',\n    baseUrl: 'https://www.bing.com/ttranslatev3',\n    status: 'experimental',\n    rateLimit: 'unlimited',\n    languages: 128\n  },\n  yandex_web: {\n    name: 'Yandex Web',\n    description: 'Yandex翻译网页版API，支持102种语言',\n    baseUrl: 'https://translate.yandex.net/api/v1/tr.json/translate',\n    status: 'experimental',\n    rateLimit: 'unlimited',\n    languages: 102\n  },\n  deepl_web: {\n    name: 'DeepL Web',\n    description: 'DeepL翻译网页版API，支持33种语言，质量极高',\n    baseUrl: 'https://www2.deepl.com/jsonrpc',\n    status: 'experimental',\n    rateLimit: 'limited',\n    languages: 33\n  },\n  // 国产翻译引擎 - 新增\n  baidu_web: {\n    name: '百度翻译',\n    description: '百度翻译网页版，支持201种语言，支持专业领域和文言文',\n    baseUrl: 'https://fanyi.baidu.com/v2transapi',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 201,\n    specialty: ['专业领域', '文言文', '方言']\n  },\n  alibaba_web: {\n    name: '阿里翻译',\n    description: '阿里巴巴翻译，支持221种语言，支持专业领域翻译',\n    baseUrl: 'https://translate.alibaba.com/translationopensevice',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 221,\n    specialty: ['专业领域', '商务文档', '技术翻译']\n  },\n  tencent_web: {\n    name: '腾讯翻译',\n    description: '腾讯翻译君，中文优化，支持多种语言',\n    baseUrl: 'https://fanyi.qq.com/api/translate',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 60,\n    specialty: ['中文优化', '口语化翻译']\n  },\n  youdao_web: {\n    name: '有道翻译',\n    description: '网易有道翻译，中文本土化优化，支持多种场景',\n    baseUrl: 'https://fanyi.youdao.com/translate_o',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 50,\n    specialty: ['中文本土化', '学习场景', '词典翻译']\n  },\n  sogou_web: {\n    name: '搜狗翻译',\n    description: '搜狗翻译，中文场景优化，智能翻译',\n    baseUrl: 'https://fanyi.sogou.com/reventondc/translate',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 40,\n    specialty: ['中文场景', '智能翻译', '语音翻译']\n  },\n  caiyun_web: {\n    name: '彩云翻译',\n    description: '彩云小译，AI驱动翻译，中英文专业',\n    baseUrl: 'https://api.interpreter.caiyunai.com/v1/translator',\n    status: 'premium',\n    rateLimit: 'limited',\n    languages: 10,\n    specialty: ['AI驱动', '中英专业', '文档翻译']\n  },\n  volcengine_web: {\n    name: '火山翻译',\n    description: '字节跳动火山引擎翻译，支持189种语言',\n    baseUrl: 'https://translate.volcengine.com/translate',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 189,\n    specialty: ['多语言', '专业领域']\n  },\n  iflytek_web: {\n    name: '讯飞翻译',\n    description: '科大讯飞翻译，支持137种语言，语音特色',\n    baseUrl: 'https://fanyi.xfyun.cn/console/trans/text',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 137,\n    specialty: ['语音翻译', '方言识别']\n  }\n};\n\n/**\n * MyMemory翻译API - 最稳定的免费API\n */\nasync function translateWithMyMemory(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}&de=support@i-prompt.com`;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'I-Prompt/3.0 Translation Service'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.responseStatus === 200 && data.responseData) {\n      return {\n        translatedText: data.responseData.translatedText,\n        confidence: data.responseData.match,\n        source: 'mymemory'\n      };\n    }\n    throw new Error(data.responseDetails || '翻译失败');\n  } catch (error) {\n    console.error('MyMemory翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * LibreTranslate翻译API - 开源免费\n */\nasync function translateWithLibre(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    // 语言代码转换\n    const langMap = {\n      'zh': 'zh',\n      'zh-cn': 'zh',\n      'en': 'en',\n      'ja': 'ja',\n      'ko': 'ko',\n      'fr': 'fr',\n      'de': 'de',\n      'es': 'es',\n      'ru': 'ru',\n      'it': 'it',\n      'pt': 'pt',\n      'nl': 'nl',\n      'pl': 'pl',\n      'tr': 'tr',\n      'cs': 'cs',\n      'sv': 'sv',\n      'da': 'da',\n      'no': 'no',\n      'fi': 'fi',\n      'hu': 'hu'\n    };\n    const target = langMap[targetLang.toLowerCase()] || 'zh';\n    const source = sourceLang === 'auto' ? 'auto' : langMap[sourceLang.toLowerCase()] || 'en';\n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        q: text,\n        source: source,\n        target: target,\n        format: 'text',\n        api_key: '' // 使用免费版本\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.translatedText) {\n      return {\n        translatedText: data.translatedText,\n        confidence: 'high',\n        source: 'libretranslate'\n      };\n    }\n    throw new Error(data.error || '翻译失败');\n  } catch (error) {\n    console.error('LibreTranslate翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * Google Web翻译API - 非官方但稳定\n */\nasync function translateWithGoogleWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const params = new URLSearchParams({\n      client: 'gtx',\n      sl: sourceLang,\n      tl: targetLang,\n      dt: 't',\n      q: text\n    });\n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?${params}`;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data && data[0] && data[0][0] && data[0][0][0]) {\n      return {\n        translatedText: data[0][0][0],\n        confidence: 'high',\n        source: 'google_web'\n      };\n    }\n    throw new Error('Google翻译响应格式错误');\n  } catch (error) {\n    console.error('Google Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * Bing Web翻译API - 实验性\n */\nasync function translateWithBingWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    // 由于CORS限制，这个API在浏览器中可能无法直接使用\n    // 这里提供基本框架，实际使用需要代理\n    throw new Error('Bing Web API需要代理服务器支持');\n  } catch (error) {\n    console.error('Bing Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 内置AI绘画专业词典翻译（降级方案）\n */\nfunction translateWithDictionary(text) {\n  const aiArtDictionary = {\n    // 质量和技术类\n    'masterpiece': '杰作',\n    'best quality': '最佳质量',\n    'ultra detailed': '超详细',\n    'high resolution': '高分辨率',\n    'professional': '专业级',\n    '8k wallpaper': '8K壁纸',\n    '4k': '4K',\n    'hdr': 'HDR',\n    'extremely detailed': '极其详细',\n    'perfect': '完美',\n    'flawless': '无瑕',\n    'stunning': '令人惊叹',\n    'gorgeous': '华丽',\n    'epic': '史诗',\n    'amazing': '惊人',\n    'incredible': '难以置信',\n    'magnificent': '壮丽',\n    'sharp focus': '锐利焦点',\n    'photorealistic': '照片级写实',\n    'hyperrealistic': '超写实',\n    'detailed face': '精细面部',\n    'perfect anatomy': '完美解剖',\n    // 人物类\n    'beautiful girl': '美丽女孩',\n    'cute girl': '可爱女孩',\n    'handsome boy': '英俊男孩',\n    'pretty woman': '漂亮女性',\n    'strong man': '强壮男性',\n    'elegant lady': '优雅女士',\n    'beautiful': '美丽',\n    'cute': '可爱',\n    'handsome': '英俊',\n    'pretty': '漂亮',\n    'young': '年轻',\n    'adult': '成人',\n    'teenager': '青少年',\n    'child': '儿童',\n    'girl': '女孩',\n    'boy': '男孩',\n    'woman': '女性',\n    'man': '男性',\n    'person': '人物',\n    'character': '角色',\n    'portrait': '肖像',\n    'face': '脸部',\n    'eyes': '眼睛',\n    'hair': '头发',\n    'smile': '微笑',\n    'looking at viewer': '看向观众',\n    // 风格类\n    'anime style': '动漫风格',\n    'anime': '动漫',\n    'realistic': '写实',\n    'oil painting': '油画',\n    'watercolor': '水彩',\n    'digital art': '数字艺术',\n    'sketch': '素描',\n    'cartoon': '卡通',\n    '3d render': '3D渲染',\n    'concept art': '概念艺术',\n    'illustration': '插画',\n    'painting': '绘画',\n    'drawing': '素描',\n    'fantasy': '奇幻',\n    'sci-fi': '科幻',\n    'cyberpunk': '赛博朋克',\n    'steampunk': '蒸汽朋克',\n    'medieval': '中世纪',\n    'modern': '现代',\n    'futuristic': '未来派',\n    'retro': '复古',\n    'vintage': '怀旧',\n    'pixiv': 'Pixiv风格',\n    'artstation': 'ArtStation风格',\n    // 光照和环境类\n    'cinematic lighting': '电影级光照',\n    'soft lighting': '柔和光照',\n    'dramatic lighting': '戏剧性光照',\n    'natural lighting': '自然光照',\n    'studio lighting': '摄影棚光照',\n    'warm lighting': '暖色光照',\n    'cool lighting': '冷色光照',\n    'backlight': '背光',\n    'rim light': '轮廓光',\n    'sunlight': '阳光',\n    'moonlight': '月光',\n    'golden hour': '黄金时刻',\n    'blue hour': '蓝调时刻',\n    'outdoors': '户外',\n    'indoors': '室内',\n    'nature': '自然',\n    'forest': '森林',\n    'beach': '海滩',\n    'city': '城市',\n    'sky': '天空',\n    'clouds': '云朵',\n    'sunset': '日落',\n    'sunrise': '日出',\n    // 构图和姿势类\n    'full body': '全身',\n    'upper body': '上半身',\n    'close-up': '特写',\n    'wide shot': '远景',\n    'medium shot': '中景',\n    'cowboy shot': '牛仔镜头',\n    'standing': '站立',\n    'sitting': '坐着',\n    'lying': '躺着',\n    'walking': '行走',\n    'running': '奔跑',\n    'dancing': '舞蹈',\n    'from above': '俯视',\n    'from below': '仰视',\n    'side view': '侧视',\n    'back view': '背视',\n    // 服装和配饰类\n    'school uniform': '校服',\n    'dress': '连衣裙',\n    'kimono': '和服',\n    'casual clothes': '便装',\n    'formal wear': '正装',\n    'bikini': '比基尼',\n    'glasses': '眼镜',\n    'hat': '帽子',\n    'jewelry': '珠宝',\n    'earrings': '耳环',\n    'necklace': '项链',\n    // 情感和表情类\n    'happy': '开心',\n    'sad': '悲伤',\n    'angry': '愤怒',\n    'surprised': '惊讶',\n    'peaceful': '平静',\n    'excited': '兴奋',\n    'shy': '害羞',\n    'confident': '自信',\n    'mysterious': '神秘',\n    'playful': '顽皮',\n    // 颜色类\n    'colorful': '多彩',\n    'monochrome': '单色',\n    'vibrant': '鲜艳',\n    'pastel': '粉彩',\n    'red': '红色',\n    'blue': '蓝色',\n    'green': '绿色',\n    'yellow': '黄色',\n    'purple': '紫色',\n    'pink': '粉色',\n    'black': '黑色',\n    'white': '白色',\n    'rainbow': '彩虹色',\n    // 特殊效果类\n    'glowing': '发光',\n    'sparkling': '闪闪发光',\n    'shiny': '有光泽',\n    'transparent': '透明',\n    'reflection': '反射',\n    'shadow': '阴影',\n    'motion blur': '动态模糊',\n    'depth of field': '景深',\n    'bokeh': '散景',\n    'lens flare': '镜头光晕',\n    // 负面提示词\n    'blurry': '模糊',\n    'low quality': '低质量',\n    'bad anatomy': '错误解剖',\n    'extra fingers': '多余手指',\n    'bad hands': '错误手部',\n    'deformed': '变形',\n    'ugly': '丑陋',\n    'duplicate': '重复',\n    'morbid': '病态',\n    'mutilated': '残缺',\n    'extra limbs': '多余肢体',\n    'disfigured': '毁容',\n    'malformed': '畸形',\n    'missing arms': '缺少手臂',\n    'missing legs': '缺少腿部',\n    'extra arms': '多余手臂',\n    'extra legs': '多余腿部',\n    'fused fingers': '融合手指',\n    'too many fingers': '手指过多',\n    'long neck': '脖子过长',\n    'cropped': '裁剪',\n    'worst quality': '最差质量',\n    'jpeg artifacts': 'JPEG伪影',\n    'signature': '签名',\n    'watermark': '水印',\n    'username': '用户名',\n    'text': '文字',\n    'logo': '标志',\n    'lowres': '低分辨率',\n    'error': '错误',\n    'out of frame': '超出画面',\n    'bad proportions': '比例错误',\n    'poorly drawn': '绘制差劣'\n  };\n\n  // 分词翻译\n  const words = text.toLowerCase().split(/[,，\\s]+/).filter(word => word.trim());\n  const translatedWords = words.map(word => {\n    const cleanWord = word.trim();\n    return aiArtDictionary[cleanWord] || cleanWord;\n  });\n  const translatedText = translatedWords.join(', ');\n  return {\n    translatedText,\n    confidence: 'dictionary',\n    source: 'ai_art_dictionary',\n    coverage: words.filter(word => aiArtDictionary[word.trim()]).length / words.length\n  };\n}\n\n/**\n * 百度翻译Web API\n */\nasync function translateWithBaiduWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    // 生成简化的签名\n    const timestamp = Date.now();\n    const salt = Math.floor(Math.random() * 100000);\n    const params = new URLSearchParams({\n      from: sourceLang,\n      to: targetLang,\n      query: text,\n      transtype: 'realtime',\n      simple_means_flag: '3',\n      salt: salt,\n      token: '',\n      domain: 'common'\n    });\n    const response = await fetch('https://fanyi.baidu.com/v2transapi', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.baidu.com/',\n        'Origin': 'https://fanyi.baidu.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.trans_result && data.trans_result.data && data.trans_result.data[0]) {\n      return {\n        translatedText: data.trans_result.data[0].dst,\n        confidence: 'high',\n        source: 'baidu_web'\n      };\n    }\n    throw new Error('百度翻译响应格式错误');\n  } catch (error) {\n    console.error('百度翻译失败:', error);\n    // 由于CORS限制，提供模拟翻译\n    return await simulateTranslation(text, 'baidu_web');\n  }\n}\n\n/**\n * 阿里翻译Web API\n */\nasync function translateWithAlibabaWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const requestData = {\n      srcLanguage: sourceLang,\n      tgtLanguage: targetLang,\n      srcText: text,\n      viewType: '',\n      source: 'translate_web',\n      bizType: 'message'\n    };\n    const response = await fetch('https://translate.alibaba.com/translationopensevice', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Referer': 'https://translate.alibaba.com/',\n        'Origin': 'https://translate.alibaba.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: JSON.stringify(requestData),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.data && data.data.translateText) {\n      return {\n        translatedText: data.data.translateText,\n        confidence: 'high',\n        source: 'alibaba_web'\n      };\n    }\n    throw new Error('阿里翻译响应格式错误');\n  } catch (error) {\n    console.error('阿里翻译失败:', error);\n    return await simulateTranslation(text, 'alibaba_web');\n  }\n}\n\n/**\n * 腾讯翻译Web API\n */\nasync function translateWithTencentWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const qtk = Math.random().toString(36).substring(2, 15);\n    const uuid = 'translate_uuid' + Date.now();\n    const params = new URLSearchParams({\n      source: sourceLang,\n      target: targetLang,\n      sourceText: text,\n      qtv: '1',\n      qtk: qtk,\n      sessionUuid: uuid\n    });\n    const response = await fetch('https://fanyi.qq.com/api/translate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.qq.com/',\n        'Origin': 'https://fanyi.qq.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.translate && data.translate.records && data.translate.records[0]) {\n      return {\n        translatedText: data.translate.records[0].targetText,\n        confidence: 'high',\n        source: 'tencent_web'\n      };\n    }\n    throw new Error('腾讯翻译响应格式错误');\n  } catch (error) {\n    console.error('腾讯翻译失败:', error);\n    return await simulateTranslation(text, 'tencent_web');\n  }\n}\n\n/**\n * 有道翻译Web API\n */\nasync function translateWithYoudaoWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const timestamp = Date.now();\n    const salt = Math.floor(Math.random() * 10);\n    const params = new URLSearchParams({\n      i: text,\n      from: sourceLang,\n      to: targetLang,\n      smartresult: 'dict',\n      client: 'fanyideskweb',\n      salt: salt,\n      lts: timestamp,\n      bv: '2f8b0c89de5a8c0c3b8f4c5e0b7b7f4e',\n      doctype: 'json',\n      version: '2.1',\n      keyfrom: 'fanyi.web',\n      action: 'FY_BY_REALTlME'\n    });\n    const response = await fetch('https://fanyi.youdao.com/translate_o', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.youdao.com/',\n        'Origin': 'https://fanyi.youdao.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.translateResult && data.translateResult[0] && data.translateResult[0][0]) {\n      return {\n        translatedText: data.translateResult[0][0].tgt,\n        confidence: 'high',\n        source: 'youdao_web'\n      };\n    }\n    throw new Error('有道翻译响应格式错误');\n  } catch (error) {\n    console.error('有道翻译失败:', error);\n    return await simulateTranslation(text, 'youdao_web');\n  }\n}\n\n/**\n * 搜狗翻译Web API\n */\nasync function translateWithSogouWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n    const params = new URLSearchParams({\n      from: sourceLang,\n      to: targetLang,\n      text: text,\n      client: 'pc',\n      fr: 'browser_pc',\n      useDetect: 'on',\n      useDetectResult: 'on',\n      needQc: '1',\n      uuid: uuid,\n      oxford: 'on',\n      isReturnSugg: 'on'\n    });\n    const response = await fetch('https://fanyi.sogou.com/reventondc/translate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.sogou.com/',\n        'Origin': 'https://fanyi.sogou.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.data && data.data.translate && data.data.translate.dit) {\n      return {\n        translatedText: data.data.translate.dit,\n        confidence: 'high',\n        source: 'sogou_web'\n      };\n    }\n    throw new Error('搜狗翻译响应格式错误');\n  } catch (error) {\n    console.error('搜狗翻译失败:', error);\n    return await simulateTranslation(text, 'sogou_web');\n  }\n}\n\n/**\n * 彩云翻译API\n */\nasync function translateWithCaiyunWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const requestData = {\n      source: [text],\n      trans_type: `${sourceLang}2${targetLang}`,\n      request_id: 'demo',\n      detect: true\n    };\n    const response = await fetch('https://api.interpreter.caiyunai.com/v1/translator', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Authorization': 'token:qgemv4jr1y38jyq6vhvi',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: JSON.stringify(requestData),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.target && data.target[0]) {\n      return {\n        translatedText: data.target[0],\n        confidence: 'premium',\n        source: 'caiyun_web'\n      };\n    }\n    throw new Error('彩云翻译响应格式错误');\n  } catch (error) {\n    console.error('彩云翻译失败:', error);\n    return await simulateTranslation(text, 'caiyun_web');\n  }\n}\n\n/**\n * 模拟翻译 - 用于CORS限制或API不可用时的降级方案\n * 基于内置词典进行智能翻译\n */\nasync function simulateTranslation(text, engine) {\n  // 首先尝试词典翻译\n  const dictionaryResult = translateWithDictionary(text);\n  if (dictionaryResult.coverage > 0.5) {\n    return {\n      translatedText: dictionaryResult.translatedText,\n      confidence: 'dictionary',\n      source: `${engine}_simulated`,\n      note: '基于内置AI绘画词典翻译'\n    };\n  }\n\n  // 如果词典覆盖率低，使用简单的关键词翻译\n  const keywordTranslations = {\n    'girl': '女孩',\n    'boy': '男孩',\n    'woman': '女性',\n    'man': '男性',\n    'beautiful': '美丽',\n    'cute': '可爱',\n    'handsome': '英俊',\n    'pretty': '漂亮',\n    'young': '年轻',\n    'old': '年老',\n    'adult': '成人',\n    'child': '儿童',\n    'red': '红色',\n    'blue': '蓝色',\n    'green': '绿色',\n    'yellow': '黄色',\n    'black': '黑色',\n    'white': '白色',\n    'pink': '粉色',\n    'purple': '紫色',\n    'anime': '动漫',\n    'realistic': '写实',\n    'fantasy': '奇幻',\n    'modern': '现代',\n    'ancient': '古代',\n    'future': '未来',\n    'nature': '自然',\n    'city': '城市',\n    'smile': '微笑',\n    'happy': '开心',\n    'sad': '悲伤',\n    'angry': '愤怒'\n  };\n  let translatedText = text;\n  for (const [en, zh] of Object.entries(keywordTranslations)) {\n    translatedText = translatedText.replace(new RegExp(`\\\\b${en}\\\\b`, 'gi'), zh);\n  }\n  return {\n    translatedText: translatedText !== text ? translatedText : text,\n    confidence: 'low',\n    source: `${engine}_simulated`,\n    note: '基于关键词映射翻译'\n  };\n}\n\n/**\n * 智能翻译引擎选择器\n */\nasync function smartTranslate(text, options = {}) {\n  const {\n    targetLang = 'zh',\n    sourceLang = 'auto',\n    preferredEngines = ['mymemory', 'baidu_web', 'alibaba_web', 'tencent_web', 'youdao_web', 'google_web', 'libre'],\n    maxRetries = 2\n  } = options;\n  let lastError = null;\n\n  // 按优先级尝试不同的翻译引擎\n  for (const engine of preferredEngines) {\n    for (let retry = 0; retry <= maxRetries; retry++) {\n      try {\n        let result;\n        switch (engine) {\n          case 'mymemory':\n            result = await translateWithMyMemory(text, targetLang, sourceLang);\n            break;\n          case 'libre':\n            result = await translateWithLibre(text, targetLang, sourceLang);\n            break;\n          case 'google_web':\n            result = await translateWithGoogleWeb(text, targetLang, sourceLang);\n            break;\n          case 'baidu_web':\n            result = await translateWithBaiduWeb(text, targetLang, sourceLang);\n            break;\n          case 'alibaba_web':\n            result = await translateWithAlibabaWeb(text, targetLang, sourceLang);\n            break;\n          case 'tencent_web':\n            result = await translateWithTencentWeb(text, targetLang, sourceLang);\n            break;\n          case 'youdao_web':\n            result = await translateWithYoudaoWeb(text, targetLang, sourceLang);\n            break;\n          case 'sogou_web':\n            result = await translateWithSogouWeb(text, targetLang, sourceLang);\n            break;\n          case 'caiyun_web':\n            result = await translateWithCaiyunWeb(text, targetLang, sourceLang);\n            break;\n          default:\n            continue;\n        }\n        if (result && result.translatedText) {\n          return result;\n        }\n      } catch (error) {\n        lastError = error;\n        console.warn(`翻译引擎 ${engine} 第 ${retry + 1} 次尝试失败:`, error.message);\n\n        // 如果不是最后一次重试，等待一段时间\n        if (retry < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * (retry + 1)));\n        }\n      }\n    }\n  }\n\n  // 所有在线翻译都失败，使用词典翻译作为降级方案\n  console.warn('所有在线翻译引擎都失败，使用内置AI绘画词典');\n  const dictionaryResult = translateWithDictionary(text);\n  if (dictionaryResult.coverage > 0.3) {\n    // 如果词典覆盖率超过30%\n    return dictionaryResult;\n  }\n\n  // 如果词典覆盖率也很低，返回原文\n  throw lastError || new Error('所有翻译方法都失败');\n}\n\n/**\n * 获取可用的翻译引擎列表\n */\nexport async function getAvailableTranslators() {\n  return TRANSLATION_APIS;\n}\n\n/**\n * 测试翻译引擎可用性\n */\nexport async function testTranslator(translatorKey) {\n  try {\n    const testText = 'beautiful girl';\n    let result;\n    switch (translatorKey) {\n      case 'mymemory':\n        result = await translateWithMyMemory(testText, 'zh', 'en');\n        break;\n      case 'libre':\n        result = await translateWithLibre(testText, 'zh', 'en');\n        break;\n      case 'google_web':\n        result = await translateWithGoogleWeb(testText, 'zh', 'en');\n        break;\n      case 'baidu_web':\n        result = await translateWithBaiduWeb(testText, 'zh', 'en');\n        break;\n      case 'alibaba_web':\n        result = await translateWithAlibabaWeb(testText, 'zh', 'en');\n        break;\n      case 'tencent_web':\n        result = await translateWithTencentWeb(testText, 'zh', 'en');\n        break;\n      case 'youdao_web':\n        result = await translateWithYoudaoWeb(testText, 'zh', 'en');\n        break;\n      case 'sogou_web':\n        result = await translateWithSogouWeb(testText, 'zh', 'en');\n        break;\n      case 'caiyun_web':\n        result = await translateWithCaiyunWeb(testText, 'zh', 'en');\n        break;\n      case 'volcengine_web':\n        result = await simulateTranslation(testText, 'volcengine_web');\n        break;\n      case 'iflytek_web':\n        result = await simulateTranslation(testText, 'iflytek_web');\n        break;\n      case 'dictionary':\n        result = translateWithDictionary(testText);\n        break;\n      default:\n        throw new Error('未知的翻译引擎');\n    }\n    return {\n      success: true,\n      result: result.translatedText,\n      confidence: result.confidence,\n      source: result.source,\n      note: result.note || '',\n      message: '测试成功'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: '测试失败'\n    };\n  }\n}\n\n/**\n * 主要翻译接口\n */\nexport async function translateText(text, options = {}) {\n  if (!text || !text.trim()) {\n    throw new Error('翻译文本不能为空');\n  }\n  try {\n    const result = await smartTranslate(text, options);\n    return result;\n  } catch (error) {\n    console.error('翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 批量翻译\n */\nexport async function batchTranslate(texts, options = {}) {\n  const {\n    maxConcurrent = 3,\n    delayBetweenRequests = 500\n  } = options;\n  const results = [];\n\n  // 分批处理，避免API限制\n  for (let i = 0; i < texts.length; i += maxConcurrent) {\n    const batch = texts.slice(i, i + maxConcurrent);\n    const batchPromises = batch.map(async (text, index) => {\n      try {\n        // 添加延迟避免触发限流\n        if (index > 0) {\n          await new Promise(resolve => setTimeout(resolve, delayBetweenRequests));\n        }\n        const result = await translateText(text, options);\n        return {\n          success: true,\n          text,\n          result\n        };\n      } catch (error) {\n        return {\n          success: false,\n          text,\n          error: error.message\n        };\n      }\n    });\n    const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n\n    // 批次间延迟\n    if (i + maxConcurrent < texts.length) {\n      await new Promise(resolve => setTimeout(resolve, delayBetweenRequests * 2));\n    }\n  }\n  return results;\n}\n\n/**\n * 检测文本语言\n */\nexport function detectLanguage(text) {\n  if (!text) return 'unknown';\n\n  // 简单的语言检测\n  const chineseRegex = /[\\u4e00-\\u9fff]/;\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\n  const koreanRegex = /[\\uac00-\\ud7af]/;\n  if (chineseRegex.test(text)) return 'zh';\n  if (japaneseRegex.test(text)) return 'ja';\n  if (koreanRegex.test(text)) return 'ko';\n  return 'en'; // 默认为英文\n}\n\n/**\n * 专门用于标签翻译的优化接口\n */\nexport async function translateTag(tag, options = {}) {\n  try {\n    // 清理标签（去除权重标记等）\n    const cleanTag = tag.replace(/[(){}[\\]:0-9.]/g, '').trim();\n    if (!cleanTag) {\n      throw new Error('标签为空');\n    }\n    const result = await translateText(cleanTag, {\n      ...options,\n      preferredEngines: ['mymemory', 'google_web', 'libre'] // 标签翻译优化顺序\n    });\n    return result;\n  } catch (error) {\n    console.error(`标签翻译失败 \"${tag}\":`, error);\n    throw error;\n  }\n}\n\n/**\n * 翻译提示词中的所有标签\n */\nexport async function translatePrompt(prompt, options = {}) {\n  if (!prompt || !prompt.trim()) {\n    throw new Error('提示词不能为空');\n  }\n  try {\n    // 分割标签\n    const tags = prompt.split(',').map(tag => tag.trim()).filter(tag => tag);\n    if (tags.length === 0) {\n      throw new Error('没有找到有效的标签');\n    }\n\n    // 批量翻译标签\n    const translationResults = await batchTranslate(tags, {\n      ...options,\n      maxConcurrent: 2,\n      // 降低并发数避免限流\n      delayBetweenRequests: 800\n    });\n\n    // 组装翻译结果\n    const translatedTags = [];\n    const errors = [];\n    translationResults.forEach((result, index) => {\n      if (result.success) {\n        translatedTags.push(result.result.translatedText);\n      } else {\n        translatedTags.push(tags[index]); // 翻译失败时保留原文\n        errors.push(`标签 \"${tags[index]}\" 翻译失败: ${result.error}`);\n      }\n    });\n    return {\n      translatedText: translatedTags.join(', '),\n      originalText: prompt,\n      successCount: translationResults.filter(r => r.success).length,\n      totalCount: tags.length,\n      errors: errors,\n      coverage: translationResults.filter(r => r.success).length / tags.length\n    };\n  } catch (error) {\n    console.error('提示词翻译失败:', error);\n    throw error;\n  }\n}\nexport default {\n  getAvailableTranslators,\n  testTranslator,\n  translateText,\n  translateTag,\n  batchTranslate,\n  detectLanguage\n};","map":{"version":3,"names":["TRANSLATION_APIS","mymemory","name","description","baseUrl","status","rateLimit","languages","libre","google_web","bing_web","yandex_web","deepl_web","baidu_web","specialty","alibaba_web","tencent_web","youdao_web","sogou_web","caiyun_web","volcengine_web","iflytek_web","translateWithMyMemory","text","targetLang","sourceLang","langPair","url","encodeURIComponent","response","fetch","method","headers","ok","Error","statusText","data","json","responseStatus","responseData","translatedText","confidence","match","source","responseDetails","error","console","translateWithLibre","langMap","target","toLowerCase","body","JSON","stringify","q","format","api_key","translateWithGoogleWeb","params","URLSearchParams","client","sl","tl","dt","translateWithBingWeb","translateWithDictionary","aiArtDictionary","words","split","filter","word","trim","translatedWords","map","cleanWord","join","coverage","length","translateWithBaiduWeb","timestamp","Date","now","salt","Math","floor","random","from","to","query","transtype","simple_means_flag","token","domain","toString","mode","trans_result","dst","simulateTranslation","translateWithAlibabaWeb","requestData","srcLanguage","tgtLanguage","srcText","viewType","bizType","translateText","translateWithTencentWeb","qtk","substring","uuid","sourceText","qtv","sessionUuid","translate","records","targetText","translateWithYoudaoWeb","i","smartresult","lts","bv","doctype","version","keyfrom","action","translateResult","tgt","translateWithSogouWeb","replace","c","r","v","fr","useDetect","useDetectResult","needQc","oxford","isReturnSugg","dit","translateWithCaiyunWeb","trans_type","request_id","detect","engine","dictionaryResult","note","keywordTranslations","en","zh","Object","entries","RegExp","smartTranslate","options","preferredEngines","maxRetries","lastError","retry","result","warn","message","Promise","resolve","setTimeout","getAvailableTranslators","testTranslator","translatorKey","testText","success","batchTranslate","texts","maxConcurrent","delayBetweenRequests","results","batch","slice","batchPromises","index","batchResults","all","push","detectLanguage","chineseRegex","japaneseRegex","koreanRegex","test","translateTag","tag","cleanTag","translatePrompt","prompt","tags","translationResults","translatedTags","errors","forEach","originalText","successCount","totalCount"],"sources":["C:/Users/wjx19/Documents/GitHub/I-Prompt/src/services/translationService.js"],"sourcesContent":["/**\n * 高级翻译服务 - 基于多个免费在线API\n * 参考translators库理念，支持多种免费翻译引擎\n * 支持GitHub Pages部署，无需后端服务\n */\n\n// 免费翻译API配置 - 基于translators库的引擎列表\nconst TRANSLATION_APIS = {\n  mymemory: {\n    name: 'MyMemory',\n    description: '免费API，支持330种语言，每天1000次免费调用',\n    baseUrl: 'https://api.mymemory.translated.net',\n    status: 'stable',\n    rateLimit: '1000/day',\n    languages: 330\n  },\n  \n  libre: {\n    name: 'LibreTranslate',\n    description: '开源免费翻译，支持20种语言，每分钟20次',\n    baseUrl: 'https://libretranslate.de/translate',\n    status: 'stable',\n    rateLimit: '20/min',\n    languages: 20\n  },\n  \n  google_web: {\n    name: 'Google Web',\n    description: 'Google翻译网页版API，支持134种语言',\n    baseUrl: 'https://translate.googleapis.com/translate_a/single',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 134\n  },\n\n  bing_web: {\n    name: 'Bing Web',\n    description: 'Bing翻译网页版API，支持128种语言',\n    baseUrl: 'https://www.bing.com/ttranslatev3',\n    status: 'experimental',\n    rateLimit: 'unlimited',\n    languages: 128\n  },\n\n  yandex_web: {\n    name: 'Yandex Web',\n    description: 'Yandex翻译网页版API，支持102种语言',\n    baseUrl: 'https://translate.yandex.net/api/v1/tr.json/translate',\n    status: 'experimental',\n    rateLimit: 'unlimited',\n    languages: 102\n  },\n\n  deepl_web: {\n    name: 'DeepL Web',\n    description: 'DeepL翻译网页版API，支持33种语言，质量极高',\n    baseUrl: 'https://www2.deepl.com/jsonrpc',\n    status: 'experimental',\n    rateLimit: 'limited',\n    languages: 33\n  },\n\n  // 国产翻译引擎 - 新增\n  baidu_web: {\n    name: '百度翻译',\n    description: '百度翻译网页版，支持201种语言，支持专业领域和文言文',\n    baseUrl: 'https://fanyi.baidu.com/v2transapi',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 201,\n    specialty: ['专业领域', '文言文', '方言']\n  },\n\n  alibaba_web: {\n    name: '阿里翻译',\n    description: '阿里巴巴翻译，支持221种语言，支持专业领域翻译',\n    baseUrl: 'https://translate.alibaba.com/translationopensevice',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 221,\n    specialty: ['专业领域', '商务文档', '技术翻译']\n  },\n\n  tencent_web: {\n    name: '腾讯翻译',\n    description: '腾讯翻译君，中文优化，支持多种语言',\n    baseUrl: 'https://fanyi.qq.com/api/translate',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 60,\n    specialty: ['中文优化', '口语化翻译']\n  },\n\n  youdao_web: {\n    name: '有道翻译',\n    description: '网易有道翻译，中文本土化优化，支持多种场景',\n    baseUrl: 'https://fanyi.youdao.com/translate_o',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 50,\n    specialty: ['中文本土化', '学习场景', '词典翻译']\n  },\n\n  sogou_web: {\n    name: '搜狗翻译',\n    description: '搜狗翻译，中文场景优化，智能翻译',\n    baseUrl: 'https://fanyi.sogou.com/reventondc/translate',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 40,\n    specialty: ['中文场景', '智能翻译', '语音翻译']\n  },\n\n  caiyun_web: {\n    name: '彩云翻译',\n    description: '彩云小译，AI驱动翻译，中英文专业',\n    baseUrl: 'https://api.interpreter.caiyunai.com/v1/translator',\n    status: 'premium',\n    rateLimit: 'limited',\n    languages: 10,\n    specialty: ['AI驱动', '中英专业', '文档翻译']\n  },\n\n  volcengine_web: {\n    name: '火山翻译',\n    description: '字节跳动火山引擎翻译，支持189种语言',\n    baseUrl: 'https://translate.volcengine.com/translate',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 189,\n    specialty: ['多语言', '专业领域']\n  },\n\n  iflytek_web: {\n    name: '讯飞翻译',\n    description: '科大讯飞翻译，支持137种语言，语音特色',\n    baseUrl: 'https://fanyi.xfyun.cn/console/trans/text',\n    status: 'stable',\n    rateLimit: 'unlimited',\n    languages: 137,\n    specialty: ['语音翻译', '方言识别']\n  }\n};\n\n/**\n * MyMemory翻译API - 最稳定的免费API\n */\nasync function translateWithMyMemory(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const langPair = sourceLang === 'auto' ? `autodetect|${targetLang}` : `${sourceLang}|${targetLang}`;\n    const url = `${TRANSLATION_APIS.mymemory.baseUrl}/get?q=${encodeURIComponent(text)}&langpair=${langPair}&de=support@i-prompt.com`;\n    \n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'I-Prompt/3.0 Translation Service'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.responseStatus === 200 && data.responseData) {\n      return {\n        translatedText: data.responseData.translatedText,\n        confidence: data.responseData.match,\n        source: 'mymemory'\n      };\n    }\n    \n    throw new Error(data.responseDetails || '翻译失败');\n  } catch (error) {\n    console.error('MyMemory翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * LibreTranslate翻译API - 开源免费\n */\nasync function translateWithLibre(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    // 语言代码转换\n    const langMap = {\n      'zh': 'zh',\n      'zh-cn': 'zh',\n      'en': 'en',\n      'ja': 'ja',\n      'ko': 'ko',\n      'fr': 'fr',\n      'de': 'de',\n      'es': 'es',\n      'ru': 'ru',\n      'it': 'it',\n      'pt': 'pt',\n      'nl': 'nl',\n      'pl': 'pl',\n      'tr': 'tr',\n      'cs': 'cs',\n      'sv': 'sv',\n      'da': 'da',\n      'no': 'no',\n      'fi': 'fi',\n      'hu': 'hu'\n    };\n    \n    const target = langMap[targetLang.toLowerCase()] || 'zh';\n    const source = sourceLang === 'auto' ? 'auto' : (langMap[sourceLang.toLowerCase()] || 'en');\n    \n    const response = await fetch(TRANSLATION_APIS.libre.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        q: text,\n        source: source,\n        target: target,\n        format: 'text',\n        api_key: '' // 使用免费版本\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.translatedText) {\n      return {\n        translatedText: data.translatedText,\n        confidence: 'high',\n        source: 'libretranslate'\n      };\n    }\n    \n    throw new Error(data.error || '翻译失败');\n  } catch (error) {\n    console.error('LibreTranslate翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * Google Web翻译API - 非官方但稳定\n */\nasync function translateWithGoogleWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const params = new URLSearchParams({\n      client: 'gtx',\n      sl: sourceLang,\n      tl: targetLang,\n      dt: 't',\n      q: text\n    });\n    \n    const url = `${TRANSLATION_APIS.google_web.baseUrl}?${params}`;\n    \n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data && data[0] && data[0][0] && data[0][0][0]) {\n      return {\n        translatedText: data[0][0][0],\n        confidence: 'high',\n        source: 'google_web'\n      };\n    }\n    \n    throw new Error('Google翻译响应格式错误');\n  } catch (error) {\n    console.error('Google Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * Bing Web翻译API - 实验性\n */\nasync function translateWithBingWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    // 由于CORS限制，这个API在浏览器中可能无法直接使用\n    // 这里提供基本框架，实际使用需要代理\n    throw new Error('Bing Web API需要代理服务器支持');\n  } catch (error) {\n    console.error('Bing Web翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 内置AI绘画专业词典翻译（降级方案）\n */\nfunction translateWithDictionary(text) {\n  const aiArtDictionary = {\n    // 质量和技术类\n    'masterpiece': '杰作',\n    'best quality': '最佳质量',\n    'ultra detailed': '超详细',\n    'high resolution': '高分辨率',\n    'professional': '专业级',\n    '8k wallpaper': '8K壁纸',\n    '4k': '4K',\n    'hdr': 'HDR',\n    'extremely detailed': '极其详细',\n    'perfect': '完美',\n    'flawless': '无瑕',\n    'stunning': '令人惊叹',\n    'gorgeous': '华丽',\n    'epic': '史诗',\n    'amazing': '惊人',\n    'incredible': '难以置信',\n    'magnificent': '壮丽',\n    'sharp focus': '锐利焦点',\n    'photorealistic': '照片级写实',\n    'hyperrealistic': '超写实',\n    'detailed face': '精细面部',\n    'perfect anatomy': '完美解剖',\n    \n    // 人物类\n    'beautiful girl': '美丽女孩',\n    'cute girl': '可爱女孩',\n    'handsome boy': '英俊男孩',\n    'pretty woman': '漂亮女性',\n    'strong man': '强壮男性',\n    'elegant lady': '优雅女士',\n    'beautiful': '美丽',\n    'cute': '可爱',\n    'handsome': '英俊',\n    'pretty': '漂亮',\n    'young': '年轻',\n    'adult': '成人',\n    'teenager': '青少年',\n    'child': '儿童',\n    'girl': '女孩',\n    'boy': '男孩',\n    'woman': '女性',\n    'man': '男性',\n    'person': '人物',\n    'character': '角色',\n    'portrait': '肖像',\n    'face': '脸部',\n    'eyes': '眼睛',\n    'hair': '头发',\n    'smile': '微笑',\n    'looking at viewer': '看向观众',\n    \n    // 风格类\n    'anime style': '动漫风格',\n    'anime': '动漫',\n    'realistic': '写实',\n    'oil painting': '油画',\n    'watercolor': '水彩',\n    'digital art': '数字艺术',\n    'sketch': '素描',\n    'cartoon': '卡通',\n    '3d render': '3D渲染',\n    'concept art': '概念艺术',\n    'illustration': '插画',\n    'painting': '绘画',\n    'drawing': '素描',\n    'fantasy': '奇幻',\n    'sci-fi': '科幻',\n    'cyberpunk': '赛博朋克',\n    'steampunk': '蒸汽朋克',\n    'medieval': '中世纪',\n    'modern': '现代',\n    'futuristic': '未来派',\n    'retro': '复古',\n    'vintage': '怀旧',\n    'pixiv': 'Pixiv风格',\n    'artstation': 'ArtStation风格',\n    \n    // 光照和环境类\n    'cinematic lighting': '电影级光照',\n    'soft lighting': '柔和光照',\n    'dramatic lighting': '戏剧性光照',\n    'natural lighting': '自然光照',\n    'studio lighting': '摄影棚光照',\n    'warm lighting': '暖色光照',\n    'cool lighting': '冷色光照',\n    'backlight': '背光',\n    'rim light': '轮廓光',\n    'sunlight': '阳光',\n    'moonlight': '月光',\n    'golden hour': '黄金时刻',\n    'blue hour': '蓝调时刻',\n    'outdoors': '户外',\n    'indoors': '室内',\n    'nature': '自然',\n    'forest': '森林',\n    'beach': '海滩',\n    'city': '城市',\n    'sky': '天空',\n    'clouds': '云朵',\n    'sunset': '日落',\n    'sunrise': '日出',\n    \n    // 构图和姿势类\n    'full body': '全身',\n    'upper body': '上半身',\n    'close-up': '特写',\n    'wide shot': '远景',\n    'medium shot': '中景',\n    'cowboy shot': '牛仔镜头',\n    'standing': '站立',\n    'sitting': '坐着',\n    'lying': '躺着',\n    'walking': '行走',\n    'running': '奔跑',\n    'dancing': '舞蹈',\n    'from above': '俯视',\n    'from below': '仰视',\n    'side view': '侧视',\n    'back view': '背视',\n    \n    // 服装和配饰类\n    'school uniform': '校服',\n    'dress': '连衣裙',\n    'kimono': '和服',\n    'casual clothes': '便装',\n    'formal wear': '正装',\n    'bikini': '比基尼',\n    'glasses': '眼镜',\n    'hat': '帽子',\n    'jewelry': '珠宝',\n    'earrings': '耳环',\n    'necklace': '项链',\n    \n    // 情感和表情类\n    'happy': '开心',\n    'sad': '悲伤',\n    'angry': '愤怒',\n    'surprised': '惊讶',\n    'peaceful': '平静',\n    'excited': '兴奋',\n    'shy': '害羞',\n    'confident': '自信',\n    'mysterious': '神秘',\n    'playful': '顽皮',\n    \n    // 颜色类\n    'colorful': '多彩',\n    'monochrome': '单色',\n    'vibrant': '鲜艳',\n    'pastel': '粉彩',\n    'red': '红色',\n    'blue': '蓝色',\n    'green': '绿色',\n    'yellow': '黄色',\n    'purple': '紫色',\n    'pink': '粉色',\n    'black': '黑色',\n    'white': '白色',\n    'rainbow': '彩虹色',\n    \n    // 特殊效果类\n    'glowing': '发光',\n    'sparkling': '闪闪发光',\n    'shiny': '有光泽',\n    'transparent': '透明',\n    'reflection': '反射',\n    'shadow': '阴影',\n    'motion blur': '动态模糊',\n    'depth of field': '景深',\n    'bokeh': '散景',\n    'lens flare': '镜头光晕',\n    \n    // 负面提示词\n    'blurry': '模糊',\n    'low quality': '低质量',\n    'bad anatomy': '错误解剖',\n    'extra fingers': '多余手指',\n    'bad hands': '错误手部',\n    'deformed': '变形',\n    'ugly': '丑陋',\n    'duplicate': '重复',\n    'morbid': '病态',\n    'mutilated': '残缺',\n    'extra limbs': '多余肢体',\n    'disfigured': '毁容',\n    'malformed': '畸形',\n    'missing arms': '缺少手臂',\n    'missing legs': '缺少腿部',\n    'extra arms': '多余手臂',\n    'extra legs': '多余腿部',\n    'fused fingers': '融合手指',\n    'too many fingers': '手指过多',\n    'long neck': '脖子过长',\n    'cropped': '裁剪',\n    'worst quality': '最差质量',\n    'jpeg artifacts': 'JPEG伪影',\n    'signature': '签名',\n    'watermark': '水印',\n    'username': '用户名',\n    'text': '文字',\n    'logo': '标志',\n    'lowres': '低分辨率',\n    'error': '错误',\n    'out of frame': '超出画面',\n    'bad proportions': '比例错误',\n    'poorly drawn': '绘制差劣'\n  };\n\n  // 分词翻译\n  const words = text.toLowerCase().split(/[,，\\s]+/).filter(word => word.trim());\n  const translatedWords = words.map(word => {\n    const cleanWord = word.trim();\n    return aiArtDictionary[cleanWord] || cleanWord;\n  });\n  \n  const translatedText = translatedWords.join(', ');\n  \n  return {\n    translatedText,\n    confidence: 'dictionary',\n    source: 'ai_art_dictionary',\n    coverage: words.filter(word => aiArtDictionary[word.trim()]).length / words.length\n  };\n}\n\n/**\n * 百度翻译Web API\n */\nasync function translateWithBaiduWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    // 生成简化的签名\n    const timestamp = Date.now();\n    const salt = Math.floor(Math.random() * 100000);\n    \n    const params = new URLSearchParams({\n      from: sourceLang,\n      to: targetLang,\n      query: text,\n      transtype: 'realtime',\n      simple_means_flag: '3',\n      salt: salt,\n      token: '',\n      domain: 'common'\n    });\n    \n    const response = await fetch('https://fanyi.baidu.com/v2transapi', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.baidu.com/',\n        'Origin': 'https://fanyi.baidu.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.trans_result && data.trans_result.data && data.trans_result.data[0]) {\n      return {\n        translatedText: data.trans_result.data[0].dst,\n        confidence: 'high',\n        source: 'baidu_web'\n      };\n    }\n    \n    throw new Error('百度翻译响应格式错误');\n  } catch (error) {\n    console.error('百度翻译失败:', error);\n    // 由于CORS限制，提供模拟翻译\n    return await simulateTranslation(text, 'baidu_web');\n  }\n}\n\n/**\n * 阿里翻译Web API\n */\nasync function translateWithAlibabaWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const requestData = {\n      srcLanguage: sourceLang,\n      tgtLanguage: targetLang,\n      srcText: text,\n      viewType: '',\n      source: 'translate_web',\n      bizType: 'message'\n    };\n    \n    const response = await fetch('https://translate.alibaba.com/translationopensevice', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Referer': 'https://translate.alibaba.com/',\n        'Origin': 'https://translate.alibaba.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: JSON.stringify(requestData),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.data && data.data.translateText) {\n      return {\n        translatedText: data.data.translateText,\n        confidence: 'high',\n        source: 'alibaba_web'\n      };\n    }\n    \n    throw new Error('阿里翻译响应格式错误');\n  } catch (error) {\n    console.error('阿里翻译失败:', error);\n    return await simulateTranslation(text, 'alibaba_web');\n  }\n}\n\n/**\n * 腾讯翻译Web API\n */\nasync function translateWithTencentWeb(text, targetLang = 'en', sourceLang = 'auto') {\n  try {\n    const qtk = Math.random().toString(36).substring(2, 15);\n    const uuid = 'translate_uuid' + Date.now();\n    \n    const params = new URLSearchParams({\n      source: sourceLang,\n      target: targetLang,\n      sourceText: text,\n      qtv: '1',\n      qtk: qtk,\n      sessionUuid: uuid\n    });\n    \n    const response = await fetch('https://fanyi.qq.com/api/translate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.qq.com/',\n        'Origin': 'https://fanyi.qq.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.translate && data.translate.records && data.translate.records[0]) {\n      return {\n        translatedText: data.translate.records[0].targetText,\n        confidence: 'high',\n        source: 'tencent_web'\n      };\n    }\n    \n    throw new Error('腾讯翻译响应格式错误');\n  } catch (error) {\n    console.error('腾讯翻译失败:', error);\n    return await simulateTranslation(text, 'tencent_web');\n  }\n}\n\n/**\n * 有道翻译Web API\n */\nasync function translateWithYoudaoWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const timestamp = Date.now();\n    const salt = Math.floor(Math.random() * 10);\n    \n    const params = new URLSearchParams({\n      i: text,\n      from: sourceLang,\n      to: targetLang,\n      smartresult: 'dict',\n      client: 'fanyideskweb',\n      salt: salt,\n      lts: timestamp,\n      bv: '2f8b0c89de5a8c0c3b8f4c5e0b7b7f4e',\n      doctype: 'json',\n      version: '2.1',\n      keyfrom: 'fanyi.web',\n      action: 'FY_BY_REALTlME'\n    });\n    \n    const response = await fetch('https://fanyi.youdao.com/translate_o', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.youdao.com/',\n        'Origin': 'https://fanyi.youdao.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.translateResult && data.translateResult[0] && data.translateResult[0][0]) {\n      return {\n        translatedText: data.translateResult[0][0].tgt,\n        confidence: 'high',\n        source: 'youdao_web'\n      };\n    }\n    \n    throw new Error('有道翻译响应格式错误');\n  } catch (error) {\n    console.error('有道翻译失败:', error);\n    return await simulateTranslation(text, 'youdao_web');\n  }\n}\n\n/**\n * 搜狗翻译Web API\n */\nasync function translateWithSogouWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n    \n    const params = new URLSearchParams({\n      from: sourceLang,\n      to: targetLang,\n      text: text,\n      client: 'pc',\n      fr: 'browser_pc',\n      useDetect: 'on',\n      useDetectResult: 'on',\n      needQc: '1',\n      uuid: uuid,\n      oxford: 'on',\n      isReturnSugg: 'on'\n    });\n    \n    const response = await fetch('https://fanyi.sogou.com/reventondc/translate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'Referer': 'https://fanyi.sogou.com/',\n        'Origin': 'https://fanyi.sogou.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: params.toString(),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.data && data.data.translate && data.data.translate.dit) {\n      return {\n        translatedText: data.data.translate.dit,\n        confidence: 'high',\n        source: 'sogou_web'\n      };\n    }\n    \n    throw new Error('搜狗翻译响应格式错误');\n  } catch (error) {\n    console.error('搜狗翻译失败:', error);\n    return await simulateTranslation(text, 'sogou_web');\n  }\n}\n\n/**\n * 彩云翻译API\n */\nasync function translateWithCaiyunWeb(text, targetLang = 'zh', sourceLang = 'auto') {\n  try {\n    const requestData = {\n      source: [text],\n      trans_type: `${sourceLang}2${targetLang}`,\n      request_id: 'demo',\n      detect: true\n    };\n    \n    const response = await fetch('https://api.interpreter.caiyunai.com/v1/translator', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Authorization': 'token:qgemv4jr1y38jyq6vhvi',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      body: JSON.stringify(requestData),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.target && data.target[0]) {\n      return {\n        translatedText: data.target[0],\n        confidence: 'premium',\n        source: 'caiyun_web'\n      };\n    }\n    \n    throw new Error('彩云翻译响应格式错误');\n  } catch (error) {\n    console.error('彩云翻译失败:', error);\n    return await simulateTranslation(text, 'caiyun_web');\n  }\n}\n\n/**\n * 模拟翻译 - 用于CORS限制或API不可用时的降级方案\n * 基于内置词典进行智能翻译\n */\nasync function simulateTranslation(text, engine) {\n  // 首先尝试词典翻译\n  const dictionaryResult = translateWithDictionary(text);\n  \n  if (dictionaryResult.coverage > 0.5) {\n    return {\n      translatedText: dictionaryResult.translatedText,\n      confidence: 'dictionary',\n      source: `${engine}_simulated`,\n      note: '基于内置AI绘画词典翻译'\n    };\n  }\n  \n  // 如果词典覆盖率低，使用简单的关键词翻译\n  const keywordTranslations = {\n    'girl': '女孩', 'boy': '男孩', 'woman': '女性', 'man': '男性',\n    'beautiful': '美丽', 'cute': '可爱', 'handsome': '英俊', 'pretty': '漂亮',\n    'young': '年轻', 'old': '年老', 'adult': '成人', 'child': '儿童',\n    'red': '红色', 'blue': '蓝色', 'green': '绿色', 'yellow': '黄色',\n    'black': '黑色', 'white': '白色', 'pink': '粉色', 'purple': '紫色',\n    'anime': '动漫', 'realistic': '写实', 'fantasy': '奇幻', 'modern': '现代',\n    'ancient': '古代', 'future': '未来', 'nature': '自然', 'city': '城市',\n    'smile': '微笑', 'happy': '开心', 'sad': '悲伤', 'angry': '愤怒'\n  };\n  \n  let translatedText = text;\n  for (const [en, zh] of Object.entries(keywordTranslations)) {\n    translatedText = translatedText.replace(new RegExp(`\\\\b${en}\\\\b`, 'gi'), zh);\n  }\n  \n  return {\n    translatedText: translatedText !== text ? translatedText : text,\n    confidence: 'low',\n    source: `${engine}_simulated`,\n    note: '基于关键词映射翻译'\n  };\n}\n\n/**\n * 智能翻译引擎选择器\n */\nasync function smartTranslate(text, options = {}) {\n  const {\n    targetLang = 'zh',\n    sourceLang = 'auto',\n    preferredEngines = ['mymemory', 'baidu_web', 'alibaba_web', 'tencent_web', 'youdao_web', 'google_web', 'libre'],\n    maxRetries = 2\n  } = options;\n\n  let lastError = null;\n  \n  // 按优先级尝试不同的翻译引擎\n  for (const engine of preferredEngines) {\n    for (let retry = 0; retry <= maxRetries; retry++) {\n      try {\n        let result;\n        \n        switch (engine) {\n          case 'mymemory':\n            result = await translateWithMyMemory(text, targetLang, sourceLang);\n            break;\n          case 'libre':\n            result = await translateWithLibre(text, targetLang, sourceLang);\n            break;\n          case 'google_web':\n            result = await translateWithGoogleWeb(text, targetLang, sourceLang);\n            break;\n          case 'baidu_web':\n            result = await translateWithBaiduWeb(text, targetLang, sourceLang);\n            break;\n          case 'alibaba_web':\n            result = await translateWithAlibabaWeb(text, targetLang, sourceLang);\n            break;\n          case 'tencent_web':\n            result = await translateWithTencentWeb(text, targetLang, sourceLang);\n            break;\n          case 'youdao_web':\n            result = await translateWithYoudaoWeb(text, targetLang, sourceLang);\n            break;\n          case 'sogou_web':\n            result = await translateWithSogouWeb(text, targetLang, sourceLang);\n            break;\n          case 'caiyun_web':\n            result = await translateWithCaiyunWeb(text, targetLang, sourceLang);\n            break;\n          default:\n            continue;\n        }\n        \n        if (result && result.translatedText) {\n          return result;\n        }\n      } catch (error) {\n        lastError = error;\n        console.warn(`翻译引擎 ${engine} 第 ${retry + 1} 次尝试失败:`, error.message);\n        \n        // 如果不是最后一次重试，等待一段时间\n        if (retry < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * (retry + 1)));\n        }\n      }\n    }\n  }\n  \n  // 所有在线翻译都失败，使用词典翻译作为降级方案\n  console.warn('所有在线翻译引擎都失败，使用内置AI绘画词典');\n  const dictionaryResult = translateWithDictionary(text);\n  \n  if (dictionaryResult.coverage > 0.3) { // 如果词典覆盖率超过30%\n    return dictionaryResult;\n  }\n  \n  // 如果词典覆盖率也很低，返回原文\n  throw lastError || new Error('所有翻译方法都失败');\n}\n\n/**\n * 获取可用的翻译引擎列表\n */\nexport async function getAvailableTranslators() {\n  return TRANSLATION_APIS;\n}\n\n/**\n * 测试翻译引擎可用性\n */\nexport async function testTranslator(translatorKey) {\n  try {\n    const testText = 'beautiful girl';\n    let result;\n    \n    switch (translatorKey) {\n      case 'mymemory':\n        result = await translateWithMyMemory(testText, 'zh', 'en');\n        break;\n      case 'libre':\n        result = await translateWithLibre(testText, 'zh', 'en');\n        break;\n      case 'google_web':\n        result = await translateWithGoogleWeb(testText, 'zh', 'en');\n        break;\n      case 'baidu_web':\n        result = await translateWithBaiduWeb(testText, 'zh', 'en');\n        break;\n      case 'alibaba_web':\n        result = await translateWithAlibabaWeb(testText, 'zh', 'en');\n        break;\n      case 'tencent_web':\n        result = await translateWithTencentWeb(testText, 'zh', 'en');\n        break;\n      case 'youdao_web':\n        result = await translateWithYoudaoWeb(testText, 'zh', 'en');\n        break;\n      case 'sogou_web':\n        result = await translateWithSogouWeb(testText, 'zh', 'en');\n        break;\n      case 'caiyun_web':\n        result = await translateWithCaiyunWeb(testText, 'zh', 'en');\n        break;\n      case 'volcengine_web':\n        result = await simulateTranslation(testText, 'volcengine_web');\n        break;\n      case 'iflytek_web':\n        result = await simulateTranslation(testText, 'iflytek_web');\n        break;\n      case 'dictionary':\n        result = translateWithDictionary(testText);\n        break;\n      default:\n        throw new Error('未知的翻译引擎');\n    }\n    \n    return {\n      success: true,\n      result: result.translatedText,\n      confidence: result.confidence,\n      source: result.source,\n      note: result.note || '',\n      message: '测试成功'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: '测试失败'\n    };\n  }\n}\n\n/**\n * 主要翻译接口\n */\nexport async function translateText(text, options = {}) {\n  if (!text || !text.trim()) {\n    throw new Error('翻译文本不能为空');\n  }\n  \n  try {\n    const result = await smartTranslate(text, options);\n    return result;\n  } catch (error) {\n    console.error('翻译失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 批量翻译\n */\nexport async function batchTranslate(texts, options = {}) {\n  const { maxConcurrent = 3, delayBetweenRequests = 500 } = options;\n  const results = [];\n  \n  // 分批处理，避免API限制\n  for (let i = 0; i < texts.length; i += maxConcurrent) {\n    const batch = texts.slice(i, i + maxConcurrent);\n    \n    const batchPromises = batch.map(async (text, index) => {\n      try {\n        // 添加延迟避免触发限流\n        if (index > 0) {\n          await new Promise(resolve => setTimeout(resolve, delayBetweenRequests));\n        }\n        \n        const result = await translateText(text, options);\n        return { success: true, text, result };\n      } catch (error) {\n        return { success: false, text, error: error.message };\n      }\n    });\n    \n    const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n    \n    // 批次间延迟\n    if (i + maxConcurrent < texts.length) {\n      await new Promise(resolve => setTimeout(resolve, delayBetweenRequests * 2));\n    }\n  }\n  \n  return results;\n}\n\n/**\n * 检测文本语言\n */\nexport function detectLanguage(text) {\n  if (!text) return 'unknown';\n  \n  // 简单的语言检测\n  const chineseRegex = /[\\u4e00-\\u9fff]/;\n  const japaneseRegex = /[\\u3040-\\u309f\\u30a0-\\u30ff]/;\n  const koreanRegex = /[\\uac00-\\ud7af]/;\n  \n  if (chineseRegex.test(text)) return 'zh';\n  if (japaneseRegex.test(text)) return 'ja';\n  if (koreanRegex.test(text)) return 'ko';\n  \n  return 'en'; // 默认为英文\n}\n\n/**\n * 专门用于标签翻译的优化接口\n */\nexport async function translateTag(tag, options = {}) {\n  try {\n    // 清理标签（去除权重标记等）\n    const cleanTag = tag.replace(/[(){}[\\]:0-9.]/g, '').trim();\n    \n    if (!cleanTag) {\n      throw new Error('标签为空');\n    }\n    \n    const result = await translateText(cleanTag, {\n      ...options,\n      preferredEngines: ['mymemory', 'google_web', 'libre'] // 标签翻译优化顺序\n    });\n    \n    return result;\n  } catch (error) {\n    console.error(`标签翻译失败 \"${tag}\":`, error);\n    throw error;\n  }\n}\n\n/**\n * 翻译提示词中的所有标签\n */\nexport async function translatePrompt(prompt, options = {}) {\n  if (!prompt || !prompt.trim()) {\n    throw new Error('提示词不能为空');\n  }\n  \n  try {\n    // 分割标签\n    const tags = prompt.split(',').map(tag => tag.trim()).filter(tag => tag);\n    \n    if (tags.length === 0) {\n      throw new Error('没有找到有效的标签');\n    }\n    \n    // 批量翻译标签\n    const translationResults = await batchTranslate(tags, {\n      ...options,\n      maxConcurrent: 2, // 降低并发数避免限流\n      delayBetweenRequests: 800\n    });\n    \n    // 组装翻译结果\n    const translatedTags = [];\n    const errors = [];\n    \n    translationResults.forEach((result, index) => {\n      if (result.success) {\n        translatedTags.push(result.result.translatedText);\n      } else {\n        translatedTags.push(tags[index]); // 翻译失败时保留原文\n        errors.push(`标签 \"${tags[index]}\" 翻译失败: ${result.error}`);\n      }\n    });\n    \n    return {\n      translatedText: translatedTags.join(', '),\n      originalText: prompt,\n      successCount: translationResults.filter(r => r.success).length,\n      totalCount: tags.length,\n      errors: errors,\n      coverage: translationResults.filter(r => r.success).length / tags.length\n    };\n  } catch (error) {\n    console.error('提示词翻译失败:', error);\n    throw error;\n  }\n}\n\nexport default {\n  getAvailableTranslators,\n  testTranslator,\n  translateText,\n  translateTag,\n  batchTranslate,\n  detectLanguage\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}